
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08010038  08010038  00020038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010504  08010504  000303fc  2**0
                  CONTENTS
  4 .ARM          00000008  08010504  08010504  00020504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801050c  0801050c  000303fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801050c  0801050c  0002050c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010510  08010510  00020510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003fc  20000000  08010514  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc8  200003fc  08010910  000303fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010c4  08010910  000310c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015599  00000000  00000000  0003042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002740  00000000  00000000  000459c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00048108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00049310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001594c  00000000  00000000  00063733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0226  00000000  00000000  0007907f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001192a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000640c  00000000  00000000  001192f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200003fc 	.word	0x200003fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010020 	.word	0x08010020

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000400 	.word	0x20000400
 80001dc:	08010020 	.word	0x08010020

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000418 	.word	0x20000418

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000418 	.word	0x20000418

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f009 f842 	bl	800a116 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000418 	.word	0x20000418

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 f98e 	bl	80093f0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f008 f986 	bl	80093f0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f008 ff24 	bl	8009f3c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f009 f800 	bl	800a116 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fa13 	bl	8008558 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f007 fc48 	bl	80089d0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000418 	.word	0x20000418
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f008 ff4b 	bl	800a116 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00a f898 	bl	800b49c <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f008 ff70 	bl	800a274 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000418 	.word	0x20000418

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00a f82c 	bl	800b49c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000418 	.word	0x20000418

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000418 	.word	0x20000418

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000418 	.word	0x20000418

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000418 	.word	0x20000418

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f009 ff52 	bl	800b49c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f008 fd78 	bl	800a178 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000418 	.word	0x20000418
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016bc:	f003 f862 	bl	8004784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 fa60 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c4:	f000 fd52 	bl	800216c <MX_GPIO_Init>
  MX_DMA_Init();
 80016c8:	f000 fd1a 	bl	8002100 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016cc:	f000 fcec 	bl	80020a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d0:	f000 fbde 	bl	8001e90 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d4:	f000 fb4c 	bl	8001d70 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016d8:	f000 fabc 	bl	8001c54 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016dc:	f000 fcba 	bl	8002054 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80016e0:	f000 fb18 	bl	8001d14 <MX_I2C1_Init>
  MX_TIM11_Init();
 80016e4:	f000 fc62 	bl	8001fac <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e8:	f000 fc26 	bl	8001f38 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <main+0x280>)
 80016ee:	4a93      	ldr	r2, [pc, #588]	; (800193c <main+0x284>)
 80016f0:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <main+0x280>)
 80016f4:	4a92      	ldr	r2, [pc, #584]	; (8001940 <main+0x288>)
 80016f6:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <main+0x280>)
 80016fa:	2215      	movs	r2, #21
 80016fc:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 80016fe:	4b8e      	ldr	r3, [pc, #568]	; (8001938 <main+0x280>)
 8001700:	2246      	movs	r2, #70	; 0x46
 8001702:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001704:	498f      	ldr	r1, [pc, #572]	; (8001944 <main+0x28c>)
 8001706:	488c      	ldr	r0, [pc, #560]	; (8001938 <main+0x280>)
 8001708:	f7ff fcd0 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170c:	2104      	movs	r1, #4
 800170e:	488e      	ldr	r0, [pc, #568]	; (8001948 <main+0x290>)
 8001710:	f007 fa78 	bl	8008c04 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001714:	488d      	ldr	r0, [pc, #564]	; (800194c <main+0x294>)
 8001716:	f006 fec5 	bl	80084a4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171a:	2100      	movs	r1, #0
 800171c:	488b      	ldr	r0, [pc, #556]	; (800194c <main+0x294>)
 800171e:	f007 f83f 	bl	80087a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001722:	2104      	movs	r1, #4
 8001724:	4889      	ldr	r0, [pc, #548]	; (800194c <main+0x294>)
 8001726:	f007 f83b 	bl	80087a0 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 800172a:	4889      	ldr	r0, [pc, #548]	; (8001950 <main+0x298>)
 800172c:	f006 ff14 	bl	8008558 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8001730:	4b88      	ldr	r3, [pc, #544]	; (8001954 <main+0x29c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173c:	4886      	ldr	r0, [pc, #536]	; (8001958 <main+0x2a0>)
 800173e:	f004 fb83 	bl	8005e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001742:	4b86      	ldr	r3, [pc, #536]	; (800195c <main+0x2a4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	2110      	movs	r1, #16
 800174c:	4882      	ldr	r0, [pc, #520]	; (8001958 <main+0x2a0>)
 800174e:	f004 fb7b 	bl	8005e48 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001752:	2202      	movs	r2, #2
 8001754:	4982      	ldr	r1, [pc, #520]	; (8001960 <main+0x2a8>)
 8001756:	4883      	ldr	r0, [pc, #524]	; (8001964 <main+0x2ac>)
 8001758:	f003 f8ee 	bl	8004938 <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175c:	4b79      	ldr	r3, [pc, #484]	; (8001944 <main+0x28c>)
 800175e:	2200      	movs	r2, #0
 8001760:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001762:	4b81      	ldr	r3, [pc, #516]	; (8001968 <main+0x2b0>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001768:	4b80      	ldr	r3, [pc, #512]	; (800196c <main+0x2b4>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800176e:	f7ff fd29 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001772:	f003 f86d 	bl	8004850 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <main+0x2b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d909      	bls.n	8001794 <main+0xdc>
	  {
		  heartbeat = HAL_GetTick()+100;
 8001780:	f003 f866 	bl	8004850 <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	3364      	adds	r3, #100	; 0x64
 8001788:	4a79      	ldr	r2, [pc, #484]	; (8001970 <main+0x2b8>)
 800178a:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178c:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <main+0x28c>)
 800178e:	f645 1261 	movw	r2, #22881	; 0x5961
 8001792:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001794:	4b77      	ldr	r3, [pc, #476]	; (8001974 <main+0x2bc>)
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d11d      	bne.n	80017dc <main+0x124>
 80017a0:	f003 f856 	bl	8004850 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b74      	ldr	r3, [pc, #464]	; (8001978 <main+0x2c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d316      	bcc.n	80017dc <main+0x124>
	  {
		  sprintf(TxBuffer,"%d\r\n",position);
 80017ae:	4b73      	ldr	r3, [pc, #460]	; (800197c <main+0x2c4>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4972      	ldr	r1, [pc, #456]	; (8001980 <main+0x2c8>)
 80017b8:	4872      	ldr	r0, [pc, #456]	; (8001984 <main+0x2cc>)
 80017ba:	f00a fd05 	bl	800c1c8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017be:	4871      	ldr	r0, [pc, #452]	; (8001984 <main+0x2cc>)
 80017c0:	f7fe fd0e 	bl	80001e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	461a      	mov	r2, r3
 80017ca:	496e      	ldr	r1, [pc, #440]	; (8001984 <main+0x2cc>)
 80017cc:	4869      	ldr	r0, [pc, #420]	; (8001974 <main+0x2bc>)
 80017ce:	f008 fc5d 	bl	800a08c <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017d2:	4b69      	ldr	r3, [pc, #420]	; (8001978 <main+0x2c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3314      	adds	r3, #20
 80017d8:	4a67      	ldr	r2, [pc, #412]	; (8001978 <main+0x2c0>)
 80017da:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VelocityApprox();
 80017dc:	f000 fd6c 	bl	80022b8 <VelocityApprox>
	  AccelerationApprox();
 80017e0:	f000 fd98 	bl	8002314 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 80017e4:	f000 fdb4 	bl	8002350 <Routine>

//  	  EndEffectorWrite(); //I2C
	  JoystickPinUpdate(); //Check Pin Flag
 80017e8:	f000 fe7a 	bl	80024e0 <JoystickPinUpdate>

	  switch(scheduler)
 80017ec:	4b66      	ldr	r3, [pc, #408]	; (8001988 <main+0x2d0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b05      	cmp	r3, #5
 80017f2:	d8bc      	bhi.n	800176e <main+0xb6>
 80017f4:	a201      	add	r2, pc, #4	; (adr r2, 80017fc <main+0x144>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	08001815 	.word	0x08001815
 8001800:	0800182b 	.word	0x0800182b
 8001804:	080018ab 	.word	0x080018ab
 8001808:	080019a1 	.word	0x080019a1
 800180c:	08001adb 	.word	0x08001adb
 8001810:	08001b35 	.word	0x08001b35
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001814:	4b4c      	ldr	r3, [pc, #304]	; (8001948 <main+0x290>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	b21a      	sxth	r2, r3
 800181c:	4b57      	ldr	r3, [pc, #348]	; (800197c <main+0x2c4>)
 800181e:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001820:	f000 fefa 	bl	8002618 <JoystickControl>
		  JoystickLocationState();
 8001824:	f000 ffc8 	bl	80027b8 <JoystickLocationState>
		  break;
 8001828:	e18a      	b.n	8001b40 <main+0x488>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <main+0x28c>)
 800182c:	2208      	movs	r2, #8
 800182e:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001830:	4b56      	ldr	r3, [pc, #344]	; (800198c <main+0x2d4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a56      	ldr	r2, [pc, #344]	; (8001990 <main+0x2d8>)
 8001836:	330c      	adds	r3, #12
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3304      	adds	r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_f2d>
 8001846:	a33a      	add	r3, pc, #232	; (adr r3, 8001930 <main+0x278>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f806 	bl	800085c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9ce 	bl	8000bf8 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <main+0x2dc>)
 8001860:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <main+0x2d4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <main+0x2d8>)
 8001868:	3304      	adds	r3, #4
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800187a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187e:	ee17 3a90 	vmov	r3, s15
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b2f      	ldr	r3, [pc, #188]	; (8001944 <main+0x28c>)
 8001886:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <main+0x28c>)
 800188c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001890:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <main+0x28c>)
 8001896:	2203      	movs	r2, #3
 8001898:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 800189c:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <main+0x2e0>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 80018a2:	4b39      	ldr	r3, [pc, #228]	; (8001988 <main+0x2d0>)
 80018a4:	2203      	movs	r2, #3
 80018a6:	601a      	str	r2, [r3, #0]
		  break;
 80018a8:	e14a      	b.n	8001b40 <main+0x488>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80018aa:	4b26      	ldr	r3, [pc, #152]	; (8001944 <main+0x28c>)
 80018ac:	2210      	movs	r2, #16
 80018ae:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80018b0:	4b36      	ldr	r3, [pc, #216]	; (800198c <main+0x2d4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a39      	ldr	r2, [pc, #228]	; (800199c <main+0x2e4>)
 80018b6:	330c      	adds	r3, #12
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3304      	adds	r3, #4
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe49 	bl	8000558 <__aeabi_f2d>
 80018c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001930 <main+0x278>)
 80018c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018cc:	f7fe ffc6 	bl	800085c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f98e 	bl	8000bf8 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <main+0x2dc>)
 80018e0:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 80018e2:	4b2a      	ldr	r3, [pc, #168]	; (800198c <main+0x2d4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <main+0x2e4>)
 80018e8:	3304      	adds	r3, #4
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	b29a      	uxth	r2, r3
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <main+0x28c>)
 8001906:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800190a:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <main+0x28c>)
 800190c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001910:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <main+0x28c>)
 8001916:	2203      	movs	r2, #3
 8001918:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 800191c:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <main+0x2e0>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <main+0x2d0>)
 8001924:	2203      	movs	r2, #3
 8001926:	601a      	str	r2, [r3, #0]
		  break;
 8001928:	e10a      	b.n	8001b40 <main+0x488>
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	70a3d70a 	.word	0x70a3d70a
 8001934:	3fa70a3d 	.word	0x3fa70a3d
 8001938:	20000adc 	.word	0x20000adc
 800193c:	2000085c 	.word	0x2000085c
 8001940:	20000734 	.word	0x20000734
 8001944:	20000fb4 	.word	0x20000fb4
 8001948:	200005cc 	.word	0x200005cc
 800194c:	20000518 	.word	0x20000518
 8001950:	20000680 	.word	0x20000680
 8001954:	20000208 	.word	0x20000208
 8001958:	40020400 	.word	0x40020400
 800195c:	20000204 	.word	0x20000204
 8001960:	20000ac4 	.word	0x20000ac4
 8001964:	2000041c 	.word	0x2000041c
 8001968:	20000ad4 	.word	0x20000ad4
 800196c:	20000ad0 	.word	0x20000ad0
 8001970:	20001090 	.word	0x20001090
 8001974:	200007e8 	.word	0x200007e8
 8001978:	20001094 	.word	0x20001094
 800197c:	2000097c 	.word	0x2000097c
 8001980:	08010038 	.word	0x08010038
 8001984:	20001040 	.word	0x20001040
 8001988:	20000930 	.word	0x20000930
 800198c:	20000934 	.word	0x20000934
 8001990:	200009b8 	.word	0x200009b8
 8001994:	20000944 	.word	0x20000944
 8001998:	2000093c 	.word	0x2000093c
 800199c:	20000a1c 	.word	0x20000a1c

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <main+0x48c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <main+0x490>)
 80019aa:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 80019ac:	f002 ff50 	bl	8004850 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b66      	ldr	r3, [pc, #408]	; (8001b4c <main+0x494>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d917      	bls.n	80019ea <main+0x332>
		  {
			  timestamp0 = HAL_GetTick() + 0.5;
 80019ba:	f002 ff49 	bl	8004850 <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fda7 	bl	8000514 <__aeabi_ui2d>
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <main+0x498>)
 80019cc:	f7fe fc66 	bl	800029c <__adddf3>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f8ee 	bl	8000bb8 <__aeabi_d2uiz>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a5b      	ldr	r2, [pc, #364]	; (8001b4c <main+0x494>)
 80019e0:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 80019e2:	f000 fc69 	bl	80022b8 <VelocityApprox>
			  AccelerationApprox();
 80019e6:	f000 fc95 	bl	8002314 <AccelerationApprox>
//			  TrajectoryGenerator();
//		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 80019ea:	f002 ff31 	bl	8004850 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b58      	ldr	r3, [pc, #352]	; (8001b54 <main+0x49c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d349      	bcc.n	8001a8c <main+0x3d4>
		  {
			  timestamp2 = HAL_GetTick() + 0.5;
 80019f8:	f002 ff2a 	bl	8004850 <HAL_GetTick>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd88 	bl	8000514 <__aeabi_ui2d>
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <main+0x498>)
 8001a0a:	f7fe fc47 	bl	800029c <__adddf3>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8cf 	bl	8000bb8 <__aeabi_d2uiz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a4d      	ldr	r2, [pc, #308]	; (8001b54 <main+0x49c>)
 8001a1e:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a20:	f000 fcf6 	bl	8002410 <PIDcal>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b4b      	ldr	r3, [pc, #300]	; (8001b58 <main+0x4a0>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <main+0x4a0>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	db0e      	blt.n	8001a5c <main+0x3a4>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <main+0x4a4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2200      	movs	r2, #0
 8001a44:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a46:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <main+0x4a0>)
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <main+0x4a4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a54:	ee17 2a90 	vmov	r2, s15
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5a:	e017      	b.n	8001a8c <main+0x3d4>
			  }
			  else if (duty < 0)
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <main+0x4a0>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d50f      	bpl.n	8001a8c <main+0x3d4>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <main+0x4a4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2200      	movs	r2, #0
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <main+0x4a0>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eef1 7a67 	vneg.f32	s15, s15
 8001a7e:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <main+0x4a4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a86:	ee17 2a90 	vmov	r2, s15
 8001a8a:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position == qf){
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <main+0x490>)
 8001a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <main+0x4a8>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb4 7a67 	vcmp.f32	s14, s15
 8001aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa8:	d10c      	bne.n	8001ac4 <main+0x40c>
			  static int FinalTime = 0;
			  FinalTime += 1;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <main+0x4ac>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a2c      	ldr	r2, [pc, #176]	; (8001b64 <main+0x4ac>)
 8001ab2:	6013      	str	r3, [r2, #0]
			  if(FinalTime >= 50000000){
 8001ab4:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <main+0x4ac>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <main+0x4b0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	dd02      	ble.n	8001ac4 <main+0x40c>
				  // End Effector
				  scheduler = 4;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <main+0x4b4>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
			  }
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <main+0x4b8>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d136      	bne.n	8001b3a <main+0x482>
		  {
			  ResetButton.flag = 0;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <main+0x4b8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <main+0x4b4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001ad8:	e02f      	b.n	8001b3a <main+0x482>

	  //Proximity
	  case 4 :
		  if (HoleSequence == 9)
 8001ada:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <main+0x4bc>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b09      	cmp	r3, #9
 8001ae0:	d103      	bne.n	8001aea <main+0x432>
		  {
			  scheduler = 0;
 8001ae2:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <main+0x4b4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	e019      	b.n	8001b1e <main+0x466>
		  }
		  else if (HoleSequence < 9)
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <main+0x4bc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	dc15      	bgt.n	8001b1e <main+0x466>
		  {
			  if (TaskType == 1)
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <main+0x4c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <main+0x450>
			  {
				  EndEffectorState = 4;			//Pick
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <main+0x4c4>)
 8001afc:	2204      	movs	r2, #4
 8001afe:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <main+0x4c8>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e00a      	b.n	8001b1e <main+0x466>
			  }
			  else if (TaskType == -1)
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <main+0x4c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b10:	d105      	bne.n	8001b1e <main+0x466>
			  {
				  EndEffectorState = 5;			//Place
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <main+0x4c4>)
 8001b14:	2205      	movs	r2, #5
 8001b16:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001b18:	4b19      	ldr	r3, [pc, #100]	; (8001b80 <main+0x4c8>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (ResetButton.flag == 1)
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <main+0x4b8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d10b      	bne.n	8001b3e <main+0x486>
			  {
				  ResetButton.flag = 0;
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <main+0x4b8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <main+0x4b4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
			  }
		  break;
 8001b32:	e004      	b.n	8001b3e <main+0x486>

	  //Emergency
	  case 5:
		  Homing();
 8001b34:	f000 fb96 	bl	8002264 <Homing>
		  break;
 8001b38:	e002      	b.n	8001b40 <main+0x488>
		  break;
 8001b3a:	bf00      	nop
 8001b3c:	e617      	b.n	800176e <main+0xb6>
		  break;
 8001b3e:	bf00      	nop
  {
 8001b40:	e615      	b.n	800176e <main+0xb6>
 8001b42:	bf00      	nop
 8001b44:	200005cc 	.word	0x200005cc
 8001b48:	2000097c 	.word	0x2000097c
 8001b4c:	20001098 	.word	0x20001098
 8001b50:	3fe00000 	.word	0x3fe00000
 8001b54:	2000109c 	.word	0x2000109c
 8001b58:	20000938 	.word	0x20000938
 8001b5c:	20000518 	.word	0x20000518
 8001b60:	20000944 	.word	0x20000944
 8001b64:	200010a0 	.word	0x200010a0
 8001b68:	02faf07f 	.word	0x02faf07f
 8001b6c:	20000930 	.word	0x20000930
 8001b70:	20000a94 	.word	0x20000a94
 8001b74:	20000934 	.word	0x20000934
 8001b78:	20000200 	.word	0x20000200
 8001b7c:	20000ad4 	.word	0x20000ad4
 8001b80:	20000ad0 	.word	0x20000ad0

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f009 fc90 	bl	800b4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be8:	2310      	movs	r3, #16
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bec:	2302      	movs	r3, #2
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bf8:	2364      	movs	r3, #100	; 0x64
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 ff57 	bl	8007abc <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c14:	f002 f95e 	bl	8003ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2103      	movs	r1, #3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f006 f9b9 	bl	8007fac <HAL_RCC_ClockConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c40:	f002 f948 	bl	8003ed4 <Error_Handler>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3750      	adds	r7, #80	; 0x50
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c68:	4a28      	ldr	r2, [pc, #160]	; (8001d0c <MX_ADC1_Init+0xb8>)
 8001c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <MX_ADC1_Init+0xbc>)
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ca0:	4b19      	ldr	r3, [pc, #100]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cae:	4b16      	ldr	r3, [pc, #88]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cb4:	4814      	ldr	r0, [pc, #80]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001cb6:	f002 fdfb 	bl	80048b0 <HAL_ADC_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cc0:	f002 f908 	bl	8003ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cd0:	463b      	mov	r3, r7
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001cd6:	f002 ff3d 	bl	8004b54 <HAL_ADC_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ce0:	f002 f8f8 	bl	8003ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_ADC1_Init+0xb4>)
 8001cf2:	f002 ff2f 	bl	8004b54 <HAL_ADC_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001cfc:	f002 f8ea 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2000041c 	.word	0x2000041c
 8001d0c:	40012000 	.word	0x40012000
 8001d10:	0f000001 	.word	0x0f000001

08001d14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d1a:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <MX_I2C1_Init+0x54>)
 8001d1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x58>)
 8001d22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d44:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <MX_I2C1_Init+0x50>)
 8001d52:	f004 f893 	bl	8005e7c <HAL_I2C_Init>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d5c:	f002 f8ba 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200004c4 	.word	0x200004c4
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	000186a0 	.word	0x000186a0

08001d70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b092      	sub	sp, #72	; 0x48
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2220      	movs	r2, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f009 fb8c 	bl	800b4b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001da2:	4a3a      	ldr	r2, [pc, #232]	; (8001e8c <MX_TIM1_Init+0x11c>)
 8001da4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001da8:	2263      	movs	r2, #99	; 0x63
 8001daa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001db8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dc0:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dcc:	482e      	ldr	r0, [pc, #184]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dce:	f006 fc8b 	bl	80086e8 <HAL_TIM_PWM_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001dd8:	f002 f87c 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001de4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001de8:	4619      	mov	r1, r3
 8001dea:	4827      	ldr	r0, [pc, #156]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001dec:	f007 ff6e 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001df6:	f002 f86d 	bl	8003ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001e20:	f007 f902 	bl	8009028 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001e2a:	f002 f853 	bl	8003ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	2204      	movs	r2, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4814      	ldr	r0, [pc, #80]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001e38:	f007 f8f6 	bl	8009028 <HAL_TIM_PWM_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001e42:	f002 f847 	bl	8003ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001e6a:	f007 ff9d 	bl	8009da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001e74:	f002 f82e 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e78:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_TIM1_Init+0x118>)
 8001e7a:	f002 f9e7 	bl	800424c <HAL_TIM_MspPostInit>

}
 8001e7e:	bf00      	nop
 8001e80:	3748      	adds	r7, #72	; 0x48
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000518 	.word	0x20000518
 8001e8c:	40010000 	.word	0x40010000

08001e90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08c      	sub	sp, #48	; 0x30
 8001e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	2224      	movs	r2, #36	; 0x24
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f009 fb0a 	bl	800b4b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <MX_TIM3_Init+0xa4>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eda:	2301      	movs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eea:	2301      	movs	r3, #1
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001efe:	f006 fdcd 	bl	8008a9c <HAL_TIM_Encoder_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001f08:	f001 ffe4 	bl	8003ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_TIM3_Init+0xa0>)
 8001f1a:	f007 fed7 	bl	8009ccc <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001f24:	f001 ffd6 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3730      	adds	r7, #48	; 0x30
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200005cc 	.word	0x200005cc
 8001f34:	40000400 	.word	0x40000400

08001f38 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	463b      	mov	r3, r7
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f4c:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <MX_TIM9_Init+0x70>)
 8001f4e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8001f50:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f52:	2263      	movs	r2, #99	; 0x63
 8001f54:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f62:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f70:	480c      	ldr	r0, [pc, #48]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f72:	f006 fa3b 	bl	80083ec <HAL_TIM_Base_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001f7c:	f001 ffaa 	bl	8003ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f84:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f86:	463b      	mov	r3, r7
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <MX_TIM9_Init+0x6c>)
 8001f8c:	f007 f90e 	bl	80091ac <HAL_TIM_ConfigClockSource>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001f96:	f001 ff9d 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000680 	.word	0x20000680
 8001fa8:	40014000 	.word	0x40014000

08001fac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b088      	sub	sp, #32
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
 8001fbe:	611a      	str	r2, [r3, #16]
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <MX_TIM11_Init+0xa4>)
 8001fc8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fcc:	2263      	movs	r2, #99	; 0x63
 8001fce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001fd6:	4b1d      	ldr	r3, [pc, #116]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fd8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001fdc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <MX_TIM11_Init+0xa0>)
 8001fec:	f006 f9fe 	bl	80083ec <HAL_TIM_Base_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001ff6:	f001 ff6d 	bl	8003ed4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001ffa:	4814      	ldr	r0, [pc, #80]	; (800204c <MX_TIM11_Init+0xa0>)
 8001ffc:	f006 fb0e 	bl	800861c <HAL_TIM_OC_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002006:	f001 ff65 	bl	8003ed4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800200a:	2108      	movs	r1, #8
 800200c:	480f      	ldr	r0, [pc, #60]	; (800204c <MX_TIM11_Init+0xa0>)
 800200e:	f006 fc77 	bl	8008900 <HAL_TIM_OnePulse_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002018:	f001 ff5c 	bl	8003ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800201c:	2310      	movs	r3, #16
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002020:	f240 5399 	movw	r3, #1433	; 0x599
 8002024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	2200      	movs	r2, #0
 8002032:	4619      	mov	r1, r3
 8002034:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_TIM11_Init+0xa0>)
 8002036:	f006 ff9b 	bl	8008f70 <HAL_TIM_OC_ConfigChannel>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002040:	f001 ff48 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000734 	.word	0x20000734
 8002050:	40014800 	.word	0x40014800

08002054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_USART1_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART1_UART_Init+0x4c>)
 800208c:	f007 fefc 	bl	8009e88 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f001 ff1d 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200007e8 	.word	0x200007e8
 80020a4:	40011000 	.word	0x40011000

080020a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <MX_USART2_UART_Init+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020b4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80020b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART2_UART_Init+0x50>)
 80020e4:	f007 fed0 	bl	8009e88 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80020ee:	f001 fef1 	bl	8003ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	2000085c 	.word	0x2000085c
 80020fc:	40004400 	.word	0x40004400

08002100 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <MX_DMA_Init+0x68>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a16      	ldr	r2, [pc, #88]	; (8002168 <MX_DMA_Init+0x68>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <MX_DMA_Init+0x68>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <MX_DMA_Init+0x68>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <MX_DMA_Init+0x68>)
 800212c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <MX_DMA_Init+0x68>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	2011      	movs	r0, #17
 8002144:	f003 f891 	bl	800526a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002148:	2011      	movs	r0, #17
 800214a:	f003 f8aa 	bl	80052a2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2038      	movs	r0, #56	; 0x38
 8002154:	f003 f889 	bl	800526a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002158:	2038      	movs	r0, #56	; 0x38
 800215a:	f003 f8a2 	bl	80052a2 <HAL_NVIC_EnableIRQ>

}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08a      	sub	sp, #40	; 0x28
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <MX_GPIO_Init+0xec>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a33      	ldr	r2, [pc, #204]	; (8002258 <MX_GPIO_Init+0xec>)
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b31      	ldr	r3, [pc, #196]	; (8002258 <MX_GPIO_Init+0xec>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <MX_GPIO_Init+0xec>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <MX_GPIO_Init+0xec>)
 80021a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <MX_GPIO_Init+0xec>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	4b26      	ldr	r3, [pc, #152]	; (8002258 <MX_GPIO_Init+0xec>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a25      	ldr	r2, [pc, #148]	; (8002258 <MX_GPIO_Init+0xec>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <MX_GPIO_Init+0xec>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	4b1f      	ldr	r3, [pc, #124]	; (8002258 <MX_GPIO_Init+0xec>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <MX_GPIO_Init+0xec>)
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <MX_GPIO_Init+0xec>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80021f8:	4818      	ldr	r0, [pc, #96]	; (800225c <MX_GPIO_Init+0xf0>)
 80021fa:	f003 fe25 	bl	8005e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 80021fe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002204:	2300      	movs	r3, #0
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4813      	ldr	r0, [pc, #76]	; (8002260 <MX_GPIO_Init+0xf4>)
 8002214:	f003 fc7c 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002218:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	480a      	ldr	r0, [pc, #40]	; (800225c <MX_GPIO_Init+0xf0>)
 8002232:	f003 fc6d 	bl	8005b10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002236:	2360      	movs	r3, #96	; 0x60
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4804      	ldr	r0, [pc, #16]	; (800225c <MX_GPIO_Init+0xf0>)
 800224a:	f003 fc61 	bl	8005b10 <HAL_GPIO_Init>

}
 800224e:	bf00      	nop
 8002250:	3728      	adds	r7, #40	; 0x28
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40020400 	.word	0x40020400
 8002260:	40020000 	.word	0x40020000

08002264 <Homing>:
		Proximity = 2;
	}
}

void Homing()
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <Homing+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 800226e:	2102      	movs	r1, #2
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <Homing+0x44>)
 8002272:	f003 fdd1 	bl	8005e18 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d110      	bne.n	800229e <Homing+0x3a>
	{
		Proximity = 0;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <Homing+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <Homing+0x48>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <Homing+0x48>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <Homing+0x4c>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <Homing+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
	}
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000ad8 	.word	0x20000ad8
 80022a8:	40020800 	.word	0x40020800
 80022ac:	20000518 	.word	0x20000518
 80022b0:	20000acc 	.word	0x20000acc
 80022b4:	20000930 	.word	0x20000930

080022b8 <VelocityApprox>:
		break;
	}
}

void VelocityApprox()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <VelocityApprox+0x50>)
 80022be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <VelocityApprox+0x54>)
 80022c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f931 	bl	8000534 <__aeabi_i2d>
 80022d2:	a30b      	add	r3, pc, #44	; (adr r3, 8002300 <VelocityApprox+0x48>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe fac0 	bl	800085c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f7fe fc88 	bl	8000bf8 <__aeabi_d2f>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <VelocityApprox+0x58>)
 80022ec:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <VelocityApprox+0x50>)
 80022f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <VelocityApprox+0x54>)
 80022f6:	801a      	strh	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f3af 8000 	nop.w
 8002300:	d2f1a9fc 	.word	0xd2f1a9fc
 8002304:	3f50624d 	.word	0x3f50624d
 8002308:	2000097c 	.word	0x2000097c
 800230c:	200010a4 	.word	0x200010a4
 8002310:	200009a0 	.word	0x200009a0

08002314 <AccelerationApprox>:

void AccelerationApprox()
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <AccelerationApprox+0x2c>)
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <AccelerationApprox+0x30>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <AccelerationApprox+0x34>)
 800232a:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <AccelerationApprox+0x2c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <AccelerationApprox+0x30>)
 8002334:	6013      	str	r3, [r2, #0]

}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	200009a0 	.word	0x200009a0
 8002344:	200010a8 	.word	0x200010a8
 8002348:	200009a4 	.word	0x200009a4
 800234c:	00000000 	.word	0x00000000

08002350 <Routine>:

void Routine()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	position_f = position;
 8002354:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <Routine+0xa8>)
 8002356:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <Routine+0xac>)
 8002364:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <Routine+0xac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f8f3 	bl	8000558 <__aeabi_f2d>
 8002372:	a31f      	add	r3, pc, #124	; (adr r3, 80023f0 <Routine+0xa0>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f946 	bl	8000608 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4610      	mov	r0, r2
 8002382:	4619      	mov	r1, r3
 8002384:	f7fe fbf0 	bl	8000b68 <__aeabi_d2iz>
 8002388:	4603      	mov	r3, r0
 800238a:	b21a      	sxth	r2, r3
 800238c:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <Routine+0xb0>)
 800238e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <Routine+0xb0>)
 8002392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <Routine+0xb4>)
 800239a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 800239c:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <Routine+0xb8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8d9 	bl	8000558 <__aeabi_f2d>
 80023a6:	a312      	add	r3, pc, #72	; (adr r3, 80023f0 <Routine+0xa0>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f92c 	bl	8000608 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fbfe 	bl	8000bb8 <__aeabi_d2uiz>
 80023bc:	4603      	mov	r3, r0
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <Routine+0xb4>)
 80023c2:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <Routine+0xbc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8c5 	bl	8000558 <__aeabi_f2d>
 80023ce:	a308      	add	r3, pc, #32	; (adr r3, 80023f0 <Routine+0xa0>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f918 	bl	8000608 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f7fe fbea 	bl	8000bb8 <__aeabi_d2uiz>
 80023e4:	4603      	mov	r3, r0
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <Routine+0xb4>)
 80023ea:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	cccccccd 	.word	0xcccccccd
 80023f4:	3fdccccc 	.word	0x3fdccccc
 80023f8:	2000097c 	.word	0x2000097c
 80023fc:	20000980 	.word	0x20000980
 8002400:	20000984 	.word	0x20000984
 8002404:	20000fb4 	.word	0x20000fb4
 8002408:	200009a0 	.word	0x200009a0
 800240c:	200009a4 	.word	0x200009a4

08002410 <PIDcal>:

float PIDcal()
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002414:	4b28      	ldr	r3, [pc, #160]	; (80024b8 <PIDcal+0xa8>)
 8002416:	ed93 7a00 	vldr	s14, [r3]
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <PIDcal+0xac>)
 800241c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242c:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <PIDcal+0xb0>)
 800242e:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <PIDcal+0xb4>)
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <PIDcal+0xb0>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <PIDcal+0xb4>)
 8002444:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002448:	4b1d      	ldr	r3, [pc, #116]	; (80024c0 <PIDcal+0xb0>)
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <PIDcal+0xb8>)
 8002450:	edd3 7a00 	vldr	s15, [r3]
 8002454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002458:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <PIDcal+0xbc>)
 800245a:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 800245e:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <PIDcal+0xc0>)
 8002460:	ed93 7a00 	vldr	s14, [r3]
 8002464:	4b16      	ldr	r3, [pc, #88]	; (80024c0 <PIDcal+0xb0>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <PIDcal+0xc4>)
 8002470:	edd3 6a00 	vldr	s13, [r3]
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <PIDcal+0xb4>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <PIDcal+0xc8>)
 8002484:	edd3 6a00 	vldr	s13, [r3]
 8002488:	4b10      	ldr	r3, [pc, #64]	; (80024cc <PIDcal+0xbc>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <PIDcal+0xcc>)
 8002498:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <PIDcal+0xb0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <PIDcal+0xb8>)
 80024a2:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <PIDcal+0xcc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	ee07 3a90 	vmov	s15, r3
}
 80024ac:	eeb0 0a67 	vmov.f32	s0, s15
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	20000988 	.word	0x20000988
 80024bc:	2000097c 	.word	0x2000097c
 80024c0:	2000098c 	.word	0x2000098c
 80024c4:	20000998 	.word	0x20000998
 80024c8:	20000994 	.word	0x20000994
 80024cc:	2000099c 	.word	0x2000099c
 80024d0:	20000214 	.word	0x20000214
 80024d4:	200009b0 	.word	0x200009b0
 80024d8:	200009b4 	.word	0x200009b4
 80024dc:	20000990 	.word	0x20000990

080024e0 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	4845      	ldr	r0, [pc, #276]	; (80025fc <JoystickPinUpdate+0x11c>)
 80024e8:	f003 fc96 	bl	8005e18 <HAL_GPIO_ReadPin>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461a      	mov	r2, r3
 80024f0:	4b43      	ldr	r3, [pc, #268]	; (8002600 <JoystickPinUpdate+0x120>)
 80024f2:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 80024f4:	4b42      	ldr	r3, [pc, #264]	; (8002600 <JoystickPinUpdate+0x120>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d107      	bne.n	800250c <JoystickPinUpdate+0x2c>
 80024fc:	4b40      	ldr	r3, [pc, #256]	; (8002600 <JoystickPinUpdate+0x120>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002504:	4b3e      	ldr	r3, [pc, #248]	; (8002600 <JoystickPinUpdate+0x120>)
 8002506:	2201      	movs	r2, #1
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e002      	b.n	8002512 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <JoystickPinUpdate+0x120>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002512:	4b3b      	ldr	r3, [pc, #236]	; (8002600 <JoystickPinUpdate+0x120>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a3a      	ldr	r2, [pc, #232]	; (8002600 <JoystickPinUpdate+0x120>)
 8002518:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800251a:	2120      	movs	r1, #32
 800251c:	4839      	ldr	r0, [pc, #228]	; (8002604 <JoystickPinUpdate+0x124>)
 800251e:	f003 fc7b 	bl	8005e18 <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	461a      	mov	r2, r3
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <JoystickPinUpdate+0x128>)
 8002528:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 800252a:	4b37      	ldr	r3, [pc, #220]	; (8002608 <JoystickPinUpdate+0x128>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <JoystickPinUpdate+0x62>
 8002532:	4b35      	ldr	r3, [pc, #212]	; (8002608 <JoystickPinUpdate+0x128>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d103      	bne.n	8002542 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 800253a:	4b33      	ldr	r3, [pc, #204]	; (8002608 <JoystickPinUpdate+0x128>)
 800253c:	2201      	movs	r2, #1
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	e002      	b.n	8002548 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <JoystickPinUpdate+0x128>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <JoystickPinUpdate+0x128>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	4a2e      	ldr	r2, [pc, #184]	; (8002608 <JoystickPinUpdate+0x128>)
 800254e:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002554:	482b      	ldr	r0, [pc, #172]	; (8002604 <JoystickPinUpdate+0x124>)
 8002556:	f003 fc5f 	bl	8005e18 <HAL_GPIO_ReadPin>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	4b2b      	ldr	r3, [pc, #172]	; (800260c <JoystickPinUpdate+0x12c>)
 8002560:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002562:	4b2a      	ldr	r3, [pc, #168]	; (800260c <JoystickPinUpdate+0x12c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <JoystickPinUpdate+0x9a>
 800256a:	4b28      	ldr	r3, [pc, #160]	; (800260c <JoystickPinUpdate+0x12c>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d103      	bne.n	800257a <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002572:	4b26      	ldr	r3, [pc, #152]	; (800260c <JoystickPinUpdate+0x12c>)
 8002574:	2201      	movs	r2, #1
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e002      	b.n	8002580 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 800257a:	4b24      	ldr	r3, [pc, #144]	; (800260c <JoystickPinUpdate+0x12c>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002580:	4b22      	ldr	r3, [pc, #136]	; (800260c <JoystickPinUpdate+0x12c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a21      	ldr	r2, [pc, #132]	; (800260c <JoystickPinUpdate+0x12c>)
 8002586:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002588:	2120      	movs	r1, #32
 800258a:	481c      	ldr	r0, [pc, #112]	; (80025fc <JoystickPinUpdate+0x11c>)
 800258c:	f003 fc44 	bl	8005e18 <HAL_GPIO_ReadPin>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <JoystickPinUpdate+0x130>)
 8002596:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <JoystickPinUpdate+0x130>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <JoystickPinUpdate+0xd0>
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <JoystickPinUpdate+0x130>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <JoystickPinUpdate+0x130>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	e002      	b.n	80025b6 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <JoystickPinUpdate+0x130>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <JoystickPinUpdate+0x130>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a15      	ldr	r2, [pc, #84]	; (8002610 <JoystickPinUpdate+0x130>)
 80025bc:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80025be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c2:	480e      	ldr	r0, [pc, #56]	; (80025fc <JoystickPinUpdate+0x11c>)
 80025c4:	f003 fc28 	bl	8005e18 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	461a      	mov	r2, r3
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <JoystickPinUpdate+0x134>)
 80025ce:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 80025d0:	4b10      	ldr	r3, [pc, #64]	; (8002614 <JoystickPinUpdate+0x134>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <JoystickPinUpdate+0x108>
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <JoystickPinUpdate+0x134>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <JoystickPinUpdate+0x134>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	e002      	b.n	80025ee <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <JoystickPinUpdate+0x134>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <JoystickPinUpdate+0x134>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <JoystickPinUpdate+0x134>)
 80025f4:	6013      	str	r3, [r2, #0]
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40020400 	.word	0x40020400
 8002600:	20000a88 	.word	0x20000a88
 8002604:	40020000 	.word	0x40020000
 8002608:	20000a94 	.word	0x20000a94
 800260c:	20000aa0 	.word	0x20000aa0
 8002610:	20000aac 	.word	0x20000aac
 8002614:	20000ab8 	.word	0x20000ab8

08002618 <JoystickControl>:

void JoystickControl()
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <JoystickControl+0x180>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d106      	bne.n	8002632 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002624:	4b5d      	ldr	r3, [pc, #372]	; (800279c <JoystickControl+0x184>)
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 800262a:	4b5b      	ldr	r3, [pc, #364]	; (8002798 <JoystickControl+0x180>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e014      	b.n	800265c <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002632:	4b5b      	ldr	r3, [pc, #364]	; (80027a0 <JoystickControl+0x188>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 800263a:	4b58      	ldr	r3, [pc, #352]	; (800279c <JoystickControl+0x184>)
 800263c:	2201      	movs	r2, #1
 800263e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002640:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <JoystickControl+0x188>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	e009      	b.n	800265c <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002648:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <JoystickControl+0x18c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d105      	bne.n	800265c <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002650:	4b52      	ldr	r3, [pc, #328]	; (800279c <JoystickControl+0x184>)
 8002652:	2202      	movs	r2, #2
 8002654:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002656:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <JoystickControl+0x18c>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 800265c:	4b4f      	ldr	r3, [pc, #316]	; (800279c <JoystickControl+0x184>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	f000 808c 	beq.w	800277e <JoystickControl+0x166>
 8002666:	2b02      	cmp	r3, #2
 8002668:	f300 8094 	bgt.w	8002794 <JoystickControl+0x17c>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <JoystickControl+0x5e>
 8002670:	2b01      	cmp	r3, #1
 8002672:	d043      	beq.n	80026fc <JoystickControl+0xe4>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
		Homing();
		break;
	}
}
 8002674:	e08e      	b.n	8002794 <JoystickControl+0x17c>
		if(XYSwitch[1] > 2200)
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <JoystickControl+0x190>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f640 0298 	movw	r2, #2200	; 0x898
 800267e:	4293      	cmp	r3, r2
 8002680:	dd09      	ble.n	8002696 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <JoystickControl+0x194>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,300);
 800268a:	4b48      	ldr	r3, [pc, #288]	; (80027ac <JoystickControl+0x194>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002692:	635a      	str	r2, [r3, #52]	; 0x34
 8002694:	e017      	b.n	80026c6 <JoystickControl+0xae>
		else if(XYSwitch[1] < 1950)
 8002696:	4b44      	ldr	r3, [pc, #272]	; (80027a8 <JoystickControl+0x190>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f240 729d 	movw	r2, #1949	; 0x79d
 800269e:	4293      	cmp	r3, r2
 80026a0:	dc09      	bgt.n	80026b6 <JoystickControl+0x9e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,300);
 80026a2:	4b42      	ldr	r3, [pc, #264]	; (80027ac <JoystickControl+0x194>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80026ac:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <JoystickControl+0x194>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2200      	movs	r2, #0
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
 80026b4:	e007      	b.n	80026c6 <JoystickControl+0xae>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <JoystickControl+0x194>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2200      	movs	r2, #0
 80026bc:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <JoystickControl+0x194>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <JoystickControl+0x190>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f640 0298 	movw	r2, #2200	; 0x898
 80026ce:	4293      	cmp	r3, r2
 80026d0:	dd04      	ble.n	80026dc <JoystickControl+0xc4>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80026d2:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <JoystickControl+0x198>)
 80026d4:	2204      	movs	r2, #4
 80026d6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026da:	e05b      	b.n	8002794 <JoystickControl+0x17c>
		else if(XYSwitch[0] < 1950)
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <JoystickControl+0x190>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f240 729d 	movw	r2, #1949	; 0x79d
 80026e4:	4293      	cmp	r3, r2
 80026e6:	dc04      	bgt.n	80026f2 <JoystickControl+0xda>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <JoystickControl+0x198>)
 80026ea:	2208      	movs	r2, #8
 80026ec:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026f0:	e050      	b.n	8002794 <JoystickControl+0x17c>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <JoystickControl+0x198>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80026fa:	e04b      	b.n	8002794 <JoystickControl+0x17c>
		if(XYSwitch[1] > 2200)
 80026fc:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <JoystickControl+0x190>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f640 0298 	movw	r2, #2200	; 0x898
 8002704:	4293      	cmp	r3, r2
 8002706:	dd08      	ble.n	800271a <JoystickControl+0x102>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <JoystickControl+0x194>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 8002710:	4b26      	ldr	r3, [pc, #152]	; (80027ac <JoystickControl+0x194>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	22c8      	movs	r2, #200	; 0xc8
 8002716:	635a      	str	r2, [r3, #52]	; 0x34
 8002718:	e016      	b.n	8002748 <JoystickControl+0x130>
		else if(XYSwitch[1] < 1950)
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <JoystickControl+0x190>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f240 729d 	movw	r2, #1949	; 0x79d
 8002722:	4293      	cmp	r3, r2
 8002724:	dc08      	bgt.n	8002738 <JoystickControl+0x120>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,200);
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <JoystickControl+0x194>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	22c8      	movs	r2, #200	; 0xc8
 800272c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <JoystickControl+0x194>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2200      	movs	r2, #0
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
 8002736:	e007      	b.n	8002748 <JoystickControl+0x130>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002738:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <JoystickControl+0x194>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2200      	movs	r2, #0
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <JoystickControl+0x194>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2200)
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <JoystickControl+0x190>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f640 0298 	movw	r2, #2200	; 0x898
 8002750:	4293      	cmp	r3, r2
 8002752:	dd04      	ble.n	800275e <JoystickControl+0x146>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <JoystickControl+0x198>)
 8002756:	2204      	movs	r2, #4
 8002758:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800275c:	e01a      	b.n	8002794 <JoystickControl+0x17c>
		else if(XYSwitch[0] < 1950)
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <JoystickControl+0x190>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f240 729d 	movw	r2, #1949	; 0x79d
 8002766:	4293      	cmp	r3, r2
 8002768:	dc04      	bgt.n	8002774 <JoystickControl+0x15c>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <JoystickControl+0x198>)
 800276c:	2208      	movs	r2, #8
 800276e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002772:	e00f      	b.n	8002794 <JoystickControl+0x17c>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <JoystickControl+0x198>)
 8002776:	2200      	movs	r2, #0
 8002778:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800277c:	e00a      	b.n	8002794 <JoystickControl+0x17c>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <JoystickControl+0x194>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <JoystickControl+0x194>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	22c8      	movs	r2, #200	; 0xc8
 800278c:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 800278e:	f7ff fd69 	bl	8002264 <Homing>
		break;
 8002792:	bf00      	nop
}
 8002794:	bf00      	nop
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000aac 	.word	0x20000aac
 800279c:	20000acc 	.word	0x20000acc
 80027a0:	20000aa0 	.word	0x20000aa0
 80027a4:	20000ab8 	.word	0x20000ab8
 80027a8:	20000ac4 	.word	0x20000ac4
 80027ac:	20000518 	.word	0x20000518
 80027b0:	20000fb4 	.word	0x20000fb4
 80027b4:	00000000 	.word	0x00000000

080027b8 <JoystickLocationState>:

void JoystickLocationState()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <JoystickLocationState+0x120>)
 80027be:	885b      	ldrh	r3, [r3, #2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d112      	bne.n	80027ea <JoystickLocationState+0x32>
	{
		registerFrame[1].U16 = 0;
 80027c4:	4b44      	ldr	r3, [pc, #272]	; (80028d8 <JoystickLocationState+0x120>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <JoystickLocationState+0x120>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <JoystickLocationState+0x124>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <JoystickLocationState+0x120>)
 80027d8:	2201      	movs	r2, #1
 80027da:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80027dc:	4b40      	ldr	r3, [pc, #256]	; (80028e0 <JoystickLocationState+0x128>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
		state = 1;					//Go Pick state
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <JoystickLocationState+0x12c>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e015      	b.n	8002816 <JoystickLocationState+0x5e>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 80027ea:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <JoystickLocationState+0x120>)
 80027ec:	885b      	ldrh	r3, [r3, #2]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d111      	bne.n	8002816 <JoystickLocationState+0x5e>
	{
		registerFrame[1].U16 = 0;
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <JoystickLocationState+0x120>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 80027f8:	4b37      	ldr	r3, [pc, #220]	; (80028d8 <JoystickLocationState+0x120>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <JoystickLocationState+0x124>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <JoystickLocationState+0x120>)
 8002806:	2201      	movs	r2, #1
 8002808:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800280a:	4b35      	ldr	r3, [pc, #212]	; (80028e0 <JoystickLocationState+0x128>)
 800280c:	2201      	movs	r2, #1
 800280e:	701a      	strb	r2, [r3, #0]
		state = 3;					//Go Place state
 8002810:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <JoystickLocationState+0x12c>)
 8002812:	2203      	movs	r2, #3
 8002814:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002816:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <JoystickLocationState+0x120>)
 8002818:	885b      	ldrh	r3, [r3, #2]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d102      	bne.n	8002824 <JoystickLocationState+0x6c>
	{
		state = 5;
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <JoystickLocationState+0x12c>)
 8002820:	2205      	movs	r2, #5
 8002822:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <JoystickLocationState+0x12c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3b01      	subs	r3, #1
 800282a:	2b04      	cmp	r3, #4
 800282c:	f200 8613 	bhi.w	8003456 <JoystickLocationState+0xc9e>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <JoystickLocationState+0x80>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800284d 	.word	0x0800284d
 800283c:	080028f9 	.word	0x080028f9
 8002840:	08002e0b 	.word	0x08002e0b
 8002844:	08002ee9 	.word	0x08002ee9
 8002848:	080033f9 	.word	0x080033f9
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <JoystickLocationState+0x130>)
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <JoystickLocationState+0x130>)
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <JoystickLocationState+0x130>)
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002864:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <JoystickLocationState+0x130>)
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <JoystickLocationState+0x134>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	f040 85e7 	bne.w	8003444 <JoystickLocationState+0xc8c>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <JoystickLocationState+0x120>)
 8002878:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800287c:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <JoystickLocationState+0x138>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	b29b      	uxth	r3, r3
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <JoystickLocationState+0x130>)
 8002890:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <JoystickLocationState+0x13c>)
 8002896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289a:	4618      	mov	r0, r3
 800289c:	f7fd fe4a 	bl	8000534 <__aeabi_i2d>
 80028a0:	a30b      	add	r3, pc, #44	; (adr r3, 80028d0 <JoystickLocationState+0x118>)
 80028a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a6:	f7fd feaf 	bl	8000608 <__aeabi_dmul>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7fe f9a1 	bl	8000bf8 <__aeabi_d2f>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <JoystickLocationState+0x130>)
 80028ba:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <JoystickLocationState+0x134>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
			state = 2;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <JoystickLocationState+0x12c>)
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
		}
		break;
 80028c8:	f000 bdbc 	b.w	8003444 <JoystickLocationState+0xc8c>
 80028cc:	f3af 8000 	nop.w
 80028d0:	70a3d70a 	.word	0x70a3d70a
 80028d4:	3fa70a3d 	.word	0x3fa70a3d
 80028d8:	20000fb4 	.word	0x20000fb4
 80028dc:	20000ad4 	.word	0x20000ad4
 80028e0:	20000ad0 	.word	0x20000ad0
 80028e4:	20000218 	.word	0x20000218
 80028e8:	200009b8 	.word	0x200009b8
 80028ec:	20000a88 	.word	0x20000a88
 80028f0:	cccccccd 	.word	0xcccccccd
 80028f4:	2000097c 	.word	0x2000097c

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 80028f8:	4bd5      	ldr	r3, [pc, #852]	; (8002c50 <JoystickLocationState+0x498>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 8278 	bne.w	8002df2 <JoystickLocationState+0x63a>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 8002902:	4bd4      	ldr	r3, [pc, #848]	; (8002c54 <JoystickLocationState+0x49c>)
 8002904:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002908:	4ad3      	ldr	r2, [pc, #844]	; (8002c58 <JoystickLocationState+0x4a0>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	b29b      	uxth	r3, r3
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291a:	4bd0      	ldr	r3, [pc, #832]	; (8002c5c <JoystickLocationState+0x4a4>)
 800291c:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8002920:	4bcf      	ldr	r3, [pc, #828]	; (8002c60 <JoystickLocationState+0x4a8>)
 8002922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fd fe04 	bl	8000534 <__aeabi_i2d>
 800292c:	a3c6      	add	r3, pc, #792	; (adr r3, 8002c48 <JoystickLocationState+0x490>)
 800292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002932:	f7fd fe69 	bl	8000608 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fe f95b 	bl	8000bf8 <__aeabi_d2f>
 8002942:	4603      	mov	r3, r0
 8002944:	4ac5      	ldr	r2, [pc, #788]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002946:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002948:	4bc1      	ldr	r3, [pc, #772]	; (8002c50 <JoystickLocationState+0x498>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 800294e:	4bc3      	ldr	r3, [pc, #780]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002950:	ed93 7a02 	vldr	s14, [r3, #8]
 8002954:	4bc1      	ldr	r3, [pc, #772]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800295e:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002c64 <JoystickLocationState+0x4ac>
 8002962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002966:	4bc0      	ldr	r3, [pc, #768]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002968:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 800296c:	4bbb      	ldr	r3, [pc, #748]	; (8002c5c <JoystickLocationState+0x4a4>)
 800296e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002972:	4bba      	ldr	r3, [pc, #744]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002974:	edd3 7a01 	vldr	s15, [r3, #4]
 8002978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800297c:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8002c64 <JoystickLocationState+0x4ac>
 8002980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002984:	4bb9      	ldr	r3, [pc, #740]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002986:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 800298a:	4bb7      	ldr	r3, [pc, #732]	; (8002c68 <JoystickLocationState+0x4b0>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002998:	4bb4      	ldr	r3, [pc, #720]	; (8002c6c <JoystickLocationState+0x4b4>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80029a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029aa:	4bac      	ldr	r3, [pc, #688]	; (8002c5c <JoystickLocationState+0x4a4>)
 80029ac:	edd3 7a00 	vldr	s15, [r3]
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	4ba9      	ldr	r3, [pc, #676]	; (8002c5c <JoystickLocationState+0x4a4>)
 80029b6:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 80029ba:	4bac      	ldr	r3, [pc, #688]	; (8002c6c <JoystickLocationState+0x4b4>)
 80029bc:	edd3 7a00 	vldr	s15, [r3]
 80029c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80029c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029c8:	4ba7      	ldr	r3, [pc, #668]	; (8002c68 <JoystickLocationState+0x4b0>)
 80029ca:	edd3 7a00 	vldr	s15, [r3]
 80029ce:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80029d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029da:	4ba0      	ldr	r3, [pc, #640]	; (8002c5c <JoystickLocationState+0x4a4>)
 80029dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80029e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e4:	4b9d      	ldr	r3, [pc, #628]	; (8002c5c <JoystickLocationState+0x4a4>)
 80029e6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 80029ea:	4b9f      	ldr	r3, [pc, #636]	; (8002c68 <JoystickLocationState+0x4b0>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029f8:	4b9c      	ldr	r3, [pc, #624]	; (8002c6c <JoystickLocationState+0x4b4>)
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002a02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a0a:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a0c:	edd3 7a00 	vldr	s15, [r3]
 8002a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a14:	4b91      	ldr	r3, [pc, #580]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a16:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8002a1a:	4b94      	ldr	r3, [pc, #592]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a28:	4b8f      	ldr	r3, [pc, #572]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002a32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3a:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a46:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002a4a:	4b87      	ldr	r3, [pc, #540]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002c70 <JoystickLocationState+0x4b8>
 8002a54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a58:	4b84      	ldr	r3, [pc, #528]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002a5a:	edd3 7a00 	vldr	s15, [r3]
 8002a5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002a62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a74:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a76:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002a7a:	4b7c      	ldr	r3, [pc, #496]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002a7c:	edd3 7a00 	vldr	s15, [r3]
 8002a80:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002c70 <JoystickLocationState+0x4b8>
 8002a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a88:	4b77      	ldr	r3, [pc, #476]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002a92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a9a:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002a9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002aa6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002aaa:	4b6f      	ldr	r3, [pc, #444]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002aac:	edd3 7a00 	vldr	s15, [r3]
 8002ab0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ab8:	4b6c      	ldr	r3, [pc, #432]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002ac2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aca:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002acc:	edd3 7a00 	vldr	s15, [r3]
 8002ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002ad6:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002ada:	4b64      	ldr	r3, [pc, #400]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ae4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ae8:	4b5f      	ldr	r3, [pc, #380]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002af2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b06:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002b0a:	4b57      	ldr	r3, [pc, #348]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b18:	4b54      	ldr	r3, [pc, #336]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002b22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b36:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b48:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002b52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5a:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b66:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8002b6a:	4b3f      	ldr	r3, [pc, #252]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002c70 <JoystickLocationState+0x4b8>
 8002b74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b78:	4b3c      	ldr	r3, [pc, #240]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002b7a:	edd3 7a00 	vldr	s15, [r3]
 8002b7e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b8a:	4b34      	ldr	r3, [pc, #208]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b94:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002b96:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c70 <JoystickLocationState+0x4b8>
 8002ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002bb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002bbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002bc6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bd8:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002bda:	edd3 7a00 	vldr	s15, [r3]
 8002bde:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002c74 <JoystickLocationState+0x4bc>
 8002be2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002be6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf4:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002bf6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002c0a:	edd3 7a00 	vldr	s15, [r3]
 8002c0e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002c78 <JoystickLocationState+0x4c0>
 8002c12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002c1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <JoystickLocationState+0x4a4>)
 8002c26:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <JoystickLocationState+0x4b0>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <JoystickLocationState+0x4b4>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002c74 <JoystickLocationState+0x4bc>
 8002c42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c46:	e019      	b.n	8002c7c <JoystickLocationState+0x4c4>
 8002c48:	70a3d70a 	.word	0x70a3d70a
 8002c4c:	3fa70a3d 	.word	0x3fa70a3d
 8002c50:	20000a88 	.word	0x20000a88
 8002c54:	20000fb4 	.word	0x20000fb4
 8002c58:	cccccccd 	.word	0xcccccccd
 8002c5c:	200009b8 	.word	0x200009b8
 8002c60:	2000097c 	.word	0x2000097c
 8002c64:	42700000 	.word	0x42700000
 8002c68:	20000a80 	.word	0x20000a80
 8002c6c:	20000a84 	.word	0x20000a84
 8002c70:	42480000 	.word	0x42480000
 8002c74:	42200000 	.word	0x42200000
 8002c78:	c2200000 	.word	0xc2200000
 8002c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c80:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8a:	4b89      	ldr	r3, [pc, #548]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002c8c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8002c90:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <JoystickLocationState+0x6fc>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c9e:	4b86      	ldr	r3, [pc, #536]	; (8002eb8 <JoystickLocationState+0x700>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002ebc <JoystickLocationState+0x704>
 8002ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb0:	4b7f      	ldr	r3, [pc, #508]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002cb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cba:	4b7d      	ldr	r3, [pc, #500]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002cbc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8002cc0:	4b7d      	ldr	r3, [pc, #500]	; (8002eb8 <JoystickLocationState+0x700>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002ec0 <JoystickLocationState+0x708>
 8002cca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <JoystickLocationState+0x6fc>)
 8002cd0:	edd3 7a00 	vldr	s15, [r3]
 8002cd4:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8002ec4 <JoystickLocationState+0x70c>
 8002cd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce0:	4b73      	ldr	r3, [pc, #460]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	4b71      	ldr	r3, [pc, #452]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002cec:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8002cf0:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <JoystickLocationState+0x6fc>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8002ec0 <JoystickLocationState+0x708>
 8002cfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cfe:	4b6e      	ldr	r3, [pc, #440]	; (8002eb8 <JoystickLocationState+0x700>)
 8002d00:	edd3 7a00 	vldr	s15, [r3]
 8002d04:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8002ebc <JoystickLocationState+0x704>
 8002d08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	4b67      	ldr	r3, [pc, #412]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d1c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8002d20:	4b63      	ldr	r3, [pc, #396]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d22:	ed93 7a00 	vldr	s14, [r3]
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <JoystickLocationState+0x6fc>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eddf 6a64 	vldr	s13, [pc, #400]	; 8002ec0 <JoystickLocationState+0x708>
 8002d30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d3a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8002d3e:	4b5c      	ldr	r3, [pc, #368]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d40:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d44:	4b5c      	ldr	r3, [pc, #368]	; (8002eb8 <JoystickLocationState+0x700>)
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8002ec0 <JoystickLocationState+0x708>
 8002d4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d58:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8002d5c:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <JoystickLocationState+0x700>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	eeb0 0a67 	vmov.f32	s0, s15
 8002d66:	f00d f80f 	bl	800fd88 <acosf>
 8002d6a:	ee10 3a10 	vmov	r3, s0
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fbf2 	bl	8000558 <__aeabi_f2d>
 8002d74:	a34a      	add	r3, pc, #296	; (adr r3, 8002ea0 <JoystickLocationState+0x6e8>)
 8002d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7a:	f7fd fc45 	bl	8000608 <__aeabi_dmul>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd ff37 	bl	8000bf8 <__aeabi_d2f>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4a48      	ldr	r2, [pc, #288]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d8e:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8002d90:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002d92:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002d96:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da2:	ee17 3a90 	vmov	r3, s15
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <JoystickLocationState+0x710>)
 8002daa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002db0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002db4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc0:	ee17 3a90 	vmov	r3, s15
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <JoystickLocationState+0x710>)
 8002dc8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <JoystickLocationState+0x6f8>)
 8002dce:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002dd2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8002ecc <JoystickLocationState+0x714>
 8002dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dde:	ee17 3a90 	vmov	r3, s15
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	4b38      	ldr	r3, [pc, #224]	; (8002ec8 <JoystickLocationState+0x710>)
 8002de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 8002dea:	4b37      	ldr	r3, [pc, #220]	; (8002ec8 <JoystickLocationState+0x710>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002df0:	e32a      	b.n	8003448 <JoystickLocationState+0xc90>
		else if (ResetButton.flag == 1)
 8002df2:	4b37      	ldr	r3, [pc, #220]	; (8002ed0 <JoystickLocationState+0x718>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	f040 8326 	bne.w	8003448 <JoystickLocationState+0xc90>
			ResetButton.flag = 0;
 8002dfc:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <JoystickLocationState+0x718>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
			state = 1;
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <JoystickLocationState+0x71c>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
		break;
 8002e08:	e31e      	b.n	8003448 <JoystickLocationState+0xc90>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8002e1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e1c:	f04f 0200 	mov.w	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8002e22:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <JoystickLocationState+0x724>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d129      	bne.n	8002e86 <JoystickLocationState+0x6ce>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <JoystickLocationState+0x710>)
 8002e34:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <JoystickLocationState+0x728>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	08db      	lsrs	r3, r3, #3
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e4a:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8002e50:	4b24      	ldr	r3, [pc, #144]	; (8002ee4 <JoystickLocationState+0x72c>)
 8002e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb6c 	bl	8000534 <__aeabi_i2d>
 8002e5c:	a312      	add	r3, pc, #72	; (adr r3, 8002ea8 <JoystickLocationState+0x6f0>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fbd1 	bl	8000608 <__aeabi_dmul>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fec3 	bl	8000bf8 <__aeabi_d2f>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <JoystickLocationState+0x720>)
 8002e76:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002e78:	4b18      	ldr	r3, [pc, #96]	; (8002edc <JoystickLocationState+0x724>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
			state = 4;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <JoystickLocationState+0x71c>)
 8002e80:	2204      	movs	r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002e84:	e2e2      	b.n	800344c <JoystickLocationState+0xc94>
		else if (ResetButton.flag == 1)
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <JoystickLocationState+0x718>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	f040 82de 	bne.w	800344c <JoystickLocationState+0xc94>
			ResetButton.flag = 0;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <JoystickLocationState+0x718>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
			state = 1;
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <JoystickLocationState+0x71c>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
		break;
 8002e9c:	e2d6      	b.n	800344c <JoystickLocationState+0xc94>
 8002e9e:	bf00      	nop
 8002ea0:	1a63c1f8 	.word	0x1a63c1f8
 8002ea4:	404ca5dc 	.word	0x404ca5dc
 8002ea8:	70a3d70a 	.word	0x70a3d70a
 8002eac:	3fa70a3d 	.word	0x3fa70a3d
 8002eb0:	200009b8 	.word	0x200009b8
 8002eb4:	20000a84 	.word	0x20000a84
 8002eb8:	20000a80 	.word	0x20000a80
 8002ebc:	c2200000 	.word	0xc2200000
 8002ec0:	42480000 	.word	0x42480000
 8002ec4:	42200000 	.word	0x42200000
 8002ec8:	20000fb4 	.word	0x20000fb4
 8002ecc:	42c80000 	.word	0x42c80000
 8002ed0:	20000a94 	.word	0x20000a94
 8002ed4:	20000218 	.word	0x20000218
 8002ed8:	20000a1c 	.word	0x20000a1c
 8002edc:	20000a88 	.word	0x20000a88
 8002ee0:	cccccccd 	.word	0xcccccccd
 8002ee4:	2000097c 	.word	0x2000097c

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8002ee8:	4bd5      	ldr	r3, [pc, #852]	; (8003240 <JoystickLocationState+0xa88>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	f040 8278 	bne.w	80033e2 <JoystickLocationState+0xc2a>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 8002ef2:	4bd4      	ldr	r3, [pc, #848]	; (8003244 <JoystickLocationState+0xa8c>)
 8002ef4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ef8:	4ad3      	ldr	r2, [pc, #844]	; (8003248 <JoystickLocationState+0xa90>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	ee07 3a90 	vmov	s15, r3
 8002f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f0a:	4bd0      	ldr	r3, [pc, #832]	; (800324c <JoystickLocationState+0xa94>)
 8002f0c:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8002f10:	4bcf      	ldr	r3, [pc, #828]	; (8003250 <JoystickLocationState+0xa98>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fb0c 	bl	8000534 <__aeabi_i2d>
 8002f1c:	a3c6      	add	r3, pc, #792	; (adr r3, 8003238 <JoystickLocationState+0xa80>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb71 	bl	8000608 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	f7fd fe63 	bl	8000bf8 <__aeabi_d2f>
 8002f32:	4603      	mov	r3, r0
 8002f34:	4ac5      	ldr	r2, [pc, #788]	; (800324c <JoystickLocationState+0xa94>)
 8002f36:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002f38:	4bc1      	ldr	r3, [pc, #772]	; (8003240 <JoystickLocationState+0xa88>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 8002f3e:	4bc3      	ldr	r3, [pc, #780]	; (800324c <JoystickLocationState+0xa94>)
 8002f40:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f44:	4bc1      	ldr	r3, [pc, #772]	; (800324c <JoystickLocationState+0xa94>)
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f4e:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8003254 <JoystickLocationState+0xa9c>
 8002f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f56:	4bc0      	ldr	r3, [pc, #768]	; (8003258 <JoystickLocationState+0xaa0>)
 8002f58:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 8002f5c:	4bbb      	ldr	r3, [pc, #748]	; (800324c <JoystickLocationState+0xa94>)
 8002f5e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f62:	4bba      	ldr	r3, [pc, #744]	; (800324c <JoystickLocationState+0xa94>)
 8002f64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f6c:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8003254 <JoystickLocationState+0xa9c>
 8002f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f74:	4bb9      	ldr	r3, [pc, #740]	; (800325c <JoystickLocationState+0xaa4>)
 8002f76:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8002f7a:	4bb7      	ldr	r3, [pc, #732]	; (8003258 <JoystickLocationState+0xaa0>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f88:	4bb4      	ldr	r3, [pc, #720]	; (800325c <JoystickLocationState+0xaa4>)
 8002f8a:	edd3 7a00 	vldr	s15, [r3]
 8002f8e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002f92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f9a:	4bac      	ldr	r3, [pc, #688]	; (800324c <JoystickLocationState+0xa94>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa4:	4ba9      	ldr	r3, [pc, #676]	; (800324c <JoystickLocationState+0xa94>)
 8002fa6:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8002faa:	4bac      	ldr	r3, [pc, #688]	; (800325c <JoystickLocationState+0xaa4>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002fb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fb8:	4ba7      	ldr	r3, [pc, #668]	; (8003258 <JoystickLocationState+0xaa0>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002fc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fca:	4ba0      	ldr	r3, [pc, #640]	; (800324c <JoystickLocationState+0xa94>)
 8002fcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd4:	4b9d      	ldr	r3, [pc, #628]	; (800324c <JoystickLocationState+0xa94>)
 8002fd6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8002fda:	4b9f      	ldr	r3, [pc, #636]	; (8003258 <JoystickLocationState+0xaa0>)
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002fe4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fe8:	4b9c      	ldr	r3, [pc, #624]	; (800325c <JoystickLocationState+0xaa4>)
 8002fea:	edd3 7a00 	vldr	s15, [r3]
 8002fee:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ff6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ffa:	4b94      	ldr	r3, [pc, #592]	; (800324c <JoystickLocationState+0xa94>)
 8002ffc:	edd3 7a00 	vldr	s15, [r3]
 8003000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003004:	4b91      	ldr	r3, [pc, #580]	; (800324c <JoystickLocationState+0xa94>)
 8003006:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 800300a:	4b94      	ldr	r3, [pc, #592]	; (800325c <JoystickLocationState+0xaa4>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003018:	4b8f      	ldr	r3, [pc, #572]	; (8003258 <JoystickLocationState+0xaa0>)
 800301a:	edd3 7a00 	vldr	s15, [r3]
 800301e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003026:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302a:	4b88      	ldr	r3, [pc, #544]	; (800324c <JoystickLocationState+0xa94>)
 800302c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003030:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003034:	4b85      	ldr	r3, [pc, #532]	; (800324c <JoystickLocationState+0xa94>)
 8003036:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 800303a:	4b87      	ldr	r3, [pc, #540]	; (8003258 <JoystickLocationState+0xaa0>)
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003260 <JoystickLocationState+0xaa8>
 8003044:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003048:	4b84      	ldr	r3, [pc, #528]	; (800325c <JoystickLocationState+0xaa4>)
 800304a:	edd3 7a00 	vldr	s15, [r3]
 800304e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003052:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305a:	4b7c      	ldr	r3, [pc, #496]	; (800324c <JoystickLocationState+0xa94>)
 800305c:	edd3 7a00 	vldr	s15, [r3]
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	4b79      	ldr	r3, [pc, #484]	; (800324c <JoystickLocationState+0xa94>)
 8003066:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 800306a:	4b7c      	ldr	r3, [pc, #496]	; (800325c <JoystickLocationState+0xaa4>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8003260 <JoystickLocationState+0xaa8>
 8003074:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003078:	4b77      	ldr	r3, [pc, #476]	; (8003258 <JoystickLocationState+0xaa0>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003082:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800308a:	4b70      	ldr	r3, [pc, #448]	; (800324c <JoystickLocationState+0xa94>)
 800308c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003094:	4b6d      	ldr	r3, [pc, #436]	; (800324c <JoystickLocationState+0xa94>)
 8003096:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 800309a:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <JoystickLocationState+0xaa0>)
 800309c:	edd3 7a00 	vldr	s15, [r3]
 80030a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a8:	4b6c      	ldr	r3, [pc, #432]	; (800325c <JoystickLocationState+0xaa4>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80030b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ba:	4b64      	ldr	r3, [pc, #400]	; (800324c <JoystickLocationState+0xa94>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	4b61      	ldr	r3, [pc, #388]	; (800324c <JoystickLocationState+0xa94>)
 80030c6:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 80030ca:	4b64      	ldr	r3, [pc, #400]	; (800325c <JoystickLocationState+0xaa4>)
 80030cc:	edd3 7a00 	vldr	s15, [r3]
 80030d0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030d8:	4b5f      	ldr	r3, [pc, #380]	; (8003258 <JoystickLocationState+0xaa0>)
 80030da:	edd3 7a00 	vldr	s15, [r3]
 80030de:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80030e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80030e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ea:	4b58      	ldr	r3, [pc, #352]	; (800324c <JoystickLocationState+0xa94>)
 80030ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80030f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f4:	4b55      	ldr	r3, [pc, #340]	; (800324c <JoystickLocationState+0xa94>)
 80030f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80030fa:	4b57      	ldr	r3, [pc, #348]	; (8003258 <JoystickLocationState+0xaa0>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003108:	4b54      	ldr	r3, [pc, #336]	; (800325c <JoystickLocationState+0xaa4>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003112:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800311a:	4b4c      	ldr	r3, [pc, #304]	; (800324c <JoystickLocationState+0xa94>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	4b49      	ldr	r3, [pc, #292]	; (800324c <JoystickLocationState+0xa94>)
 8003126:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <JoystickLocationState+0xaa4>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003134:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <JoystickLocationState+0xaa0>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003142:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800314a:	4b40      	ldr	r3, [pc, #256]	; (800324c <JoystickLocationState+0xa94>)
 800314c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003154:	4b3d      	ldr	r3, [pc, #244]	; (800324c <JoystickLocationState+0xa94>)
 8003156:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 800315a:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <JoystickLocationState+0xaa0>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003260 <JoystickLocationState+0xaa8>
 8003164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003168:	4b3c      	ldr	r3, [pc, #240]	; (800325c <JoystickLocationState+0xaa4>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003172:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003176:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <JoystickLocationState+0xa94>)
 800317c:	edd3 7a00 	vldr	s15, [r3]
 8003180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <JoystickLocationState+0xa94>)
 8003186:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 800318a:	4b34      	ldr	r3, [pc, #208]	; (800325c <JoystickLocationState+0xaa4>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003260 <JoystickLocationState+0xaa8>
 8003194:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003198:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <JoystickLocationState+0xaa0>)
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80031a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031aa:	4b28      	ldr	r3, [pc, #160]	; (800324c <JoystickLocationState+0xa94>)
 80031ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b4:	4b25      	ldr	r3, [pc, #148]	; (800324c <JoystickLocationState+0xa94>)
 80031b6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80031ba:	4b27      	ldr	r3, [pc, #156]	; (8003258 <JoystickLocationState+0xaa0>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c8:	4b24      	ldr	r3, [pc, #144]	; (800325c <JoystickLocationState+0xaa4>)
 80031ca:	edd3 7a00 	vldr	s15, [r3]
 80031ce:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003264 <JoystickLocationState+0xaac>
 80031d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <JoystickLocationState+0xa94>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <JoystickLocationState+0xa94>)
 80031e6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <JoystickLocationState+0xaa4>)
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <JoystickLocationState+0xaa0>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003268 <JoystickLocationState+0xab0>
 8003202:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003206:	ee37 7a27 	vadd.f32	s14, s14, s15
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <JoystickLocationState+0xa94>)
 800320c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003214:	4b0d      	ldr	r3, [pc, #52]	; (800324c <JoystickLocationState+0xa94>)
 8003216:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <JoystickLocationState+0xaa0>)
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003224:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <JoystickLocationState+0xaa4>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8003264 <JoystickLocationState+0xaac>
 8003232:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003236:	e019      	b.n	800326c <JoystickLocationState+0xab4>
 8003238:	70a3d70a 	.word	0x70a3d70a
 800323c:	3fa70a3d 	.word	0x3fa70a3d
 8003240:	20000a88 	.word	0x20000a88
 8003244:	20000fb4 	.word	0x20000fb4
 8003248:	cccccccd 	.word	0xcccccccd
 800324c:	20000a1c 	.word	0x20000a1c
 8003250:	2000097c 	.word	0x2000097c
 8003254:	42700000 	.word	0x42700000
 8003258:	20000a80 	.word	0x20000a80
 800325c:	20000a84 	.word	0x20000a84
 8003260:	42480000 	.word	0x42480000
 8003264:	42200000 	.word	0x42200000
 8003268:	c2200000 	.word	0xc2200000
 800326c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003270:	4b7d      	ldr	r3, [pc, #500]	; (8003468 <JoystickLocationState+0xcb0>)
 8003272:	edd3 7a00 	vldr	s15, [r3]
 8003276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <JoystickLocationState+0xcb0>)
 800327c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003280:	4b7a      	ldr	r3, [pc, #488]	; (800346c <JoystickLocationState+0xcb4>)
 8003282:	edd3 7a00 	vldr	s15, [r3]
 8003286:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800328a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800328e:	4b78      	ldr	r3, [pc, #480]	; (8003470 <JoystickLocationState+0xcb8>)
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	eddf 6a77 	vldr	s13, [pc, #476]	; 8003474 <JoystickLocationState+0xcbc>
 8003298:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800329c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a0:	4b71      	ldr	r3, [pc, #452]	; (8003468 <JoystickLocationState+0xcb0>)
 80032a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <JoystickLocationState+0xcb0>)
 80032ac:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <JoystickLocationState+0xcb8>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003478 <JoystickLocationState+0xcc0>
 80032ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032be:	4b6b      	ldr	r3, [pc, #428]	; (800346c <JoystickLocationState+0xcb4>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800347c <JoystickLocationState+0xcc4>
 80032c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d0:	4b65      	ldr	r3, [pc, #404]	; (8003468 <JoystickLocationState+0xcb0>)
 80032d2:	edd3 7a00 	vldr	s15, [r3]
 80032d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032da:	4b63      	ldr	r3, [pc, #396]	; (8003468 <JoystickLocationState+0xcb0>)
 80032dc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 80032e0:	4b62      	ldr	r3, [pc, #392]	; (800346c <JoystickLocationState+0xcb4>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8003478 <JoystickLocationState+0xcc0>
 80032ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032ee:	4b60      	ldr	r3, [pc, #384]	; (8003470 <JoystickLocationState+0xcb8>)
 80032f0:	edd3 7a00 	vldr	s15, [r3]
 80032f4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003474 <JoystickLocationState+0xcbc>
 80032f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <JoystickLocationState+0xcb0>)
 8003302:	edd3 7a01 	vldr	s15, [r3, #4]
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330a:	4b57      	ldr	r3, [pc, #348]	; (8003468 <JoystickLocationState+0xcb0>)
 800330c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 8003310:	4b55      	ldr	r3, [pc, #340]	; (8003468 <JoystickLocationState+0xcb0>)
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <JoystickLocationState+0xcb4>)
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8003478 <JoystickLocationState+0xcc0>
 8003320:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <JoystickLocationState+0xcb0>)
 800332a:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 800332e:	4b4e      	ldr	r3, [pc, #312]	; (8003468 <JoystickLocationState+0xcb0>)
 8003330:	ed93 7a01 	vldr	s14, [r3, #4]
 8003334:	4b4e      	ldr	r3, [pc, #312]	; (8003470 <JoystickLocationState+0xcb8>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003478 <JoystickLocationState+0xcc0>
 800333e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003346:	4b48      	ldr	r3, [pc, #288]	; (8003468 <JoystickLocationState+0xcb0>)
 8003348:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 800334c:	4b48      	ldr	r3, [pc, #288]	; (8003470 <JoystickLocationState+0xcb8>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	f00c fd17 	bl	800fd88 <acosf>
 800335a:	ee10 3a10 	vmov	r3, s0
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f8fa 	bl	8000558 <__aeabi_f2d>
 8003364:	a33e      	add	r3, pc, #248	; (adr r3, 8003460 <JoystickLocationState+0xca8>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd f94d 	bl	8000608 <__aeabi_dmul>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4610      	mov	r0, r2
 8003374:	4619      	mov	r1, r3
 8003376:	f7fd fc3f 	bl	8000bf8 <__aeabi_d2f>
 800337a:	4603      	mov	r3, r0
 800337c:	4a3a      	ldr	r2, [pc, #232]	; (8003468 <JoystickLocationState+0xcb0>)
 800337e:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003380:	4b39      	ldr	r3, [pc, #228]	; (8003468 <JoystickLocationState+0xcb0>)
 8003382:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003386:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800338a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800338e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003392:	ee17 3a90 	vmov	r3, s15
 8003396:	b29a      	uxth	r2, r3
 8003398:	4b39      	ldr	r3, [pc, #228]	; (8003480 <JoystickLocationState+0xcc8>)
 800339a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 800339e:	4b32      	ldr	r3, [pc, #200]	; (8003468 <JoystickLocationState+0xcb0>)
 80033a0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80033a4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b0:	ee17 3a90 	vmov	r3, s15
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	4b32      	ldr	r3, [pc, #200]	; (8003480 <JoystickLocationState+0xcc8>)
 80033b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 80033bc:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <JoystickLocationState+0xcb0>)
 80033be:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80033c2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003484 <JoystickLocationState+0xccc>
 80033c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ce:	ee17 3a90 	vmov	r3, s15
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <JoystickLocationState+0xcc8>)
 80033d6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <JoystickLocationState+0xcc8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80033e0:	e036      	b.n	8003450 <JoystickLocationState+0xc98>
		else if (ResetButton.flag == 1)
 80033e2:	4b29      	ldr	r3, [pc, #164]	; (8003488 <JoystickLocationState+0xcd0>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d132      	bne.n	8003450 <JoystickLocationState+0xc98>
			ResetButton.flag = 0;
 80033ea:	4b27      	ldr	r3, [pc, #156]	; (8003488 <JoystickLocationState+0xcd0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
			state = 1;
 80033f0:	4b26      	ldr	r3, [pc, #152]	; (800348c <JoystickLocationState+0xcd4>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
		break;
 80033f6:	e02b      	b.n	8003450 <JoystickLocationState+0xc98>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <JoystickLocationState+0xcd8>)
 80033fa:	2202      	movs	r2, #2
 80033fc:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <JoystickLocationState+0xcc8>)
 8003400:	2200      	movs	r2, #0
 8003402:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <JoystickLocationState+0xcdc>)
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]

		HAL_Delay(10);
 800340a:	200a      	movs	r0, #10
 800340c:	f001 fa2c 	bl	8004868 <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <JoystickLocationState+0xcd8>)
 8003412:	2203      	movs	r2, #3
 8003414:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <JoystickLocationState+0xcc8>)
 8003418:	2202      	movs	r2, #2
 800341a:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <JoystickLocationState+0xcdc>)
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]

		state = 1;
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <JoystickLocationState+0xcd4>)
 8003424:	2201      	movs	r2, #1
 8003426:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <JoystickLocationState+0xce0>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 800342e:	4b16      	ldr	r3, [pc, #88]	; (8003488 <JoystickLocationState+0xcd0>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10e      	bne.n	8003454 <JoystickLocationState+0xc9c>
		{
			ResetButton.flag = 0;
 8003436:	4b14      	ldr	r3, [pc, #80]	; (8003488 <JoystickLocationState+0xcd0>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
			state = 1;
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <JoystickLocationState+0xcd4>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
		}
		break;
 8003442:	e007      	b.n	8003454 <JoystickLocationState+0xc9c>
		break;
 8003444:	bf00      	nop
 8003446:	e006      	b.n	8003456 <JoystickLocationState+0xc9e>
		break;
 8003448:	bf00      	nop
 800344a:	e004      	b.n	8003456 <JoystickLocationState+0xc9e>
		break;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <JoystickLocationState+0xc9e>
		break;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <JoystickLocationState+0xc9e>
		break;
 8003454:	bf00      	nop
	}
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	1a63c1f8 	.word	0x1a63c1f8
 8003464:	404ca5dc 	.word	0x404ca5dc
 8003468:	20000a1c 	.word	0x20000a1c
 800346c:	20000a84 	.word	0x20000a84
 8003470:	20000a80 	.word	0x20000a80
 8003474:	c2200000 	.word	0xc2200000
 8003478:	42480000 	.word	0x42480000
 800347c:	42200000 	.word	0x42200000
 8003480:	20000fb4 	.word	0x20000fb4
 8003484:	42c80000 	.word	0x42c80000
 8003488:	20000a94 	.word	0x20000a94
 800348c:	20000218 	.word	0x20000218
 8003490:	20000ad4 	.word	0x20000ad4
 8003494:	20000ad0 	.word	0x20000ad0
 8003498:	20000930 	.word	0x20000930

0800349c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a06      	ldr	r2, [pc, #24]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d105      	bne.n	80034b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b03      	cmp	r3, #3
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 80034b4:	f000 f808 	bl	80034c8 <TrajectoryGenerator>
		}

	}
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000680 	.word	0x20000680
 80034c4:	20000930 	.word	0x20000930

080034c8 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80034c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034cc:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80034ce:	4b92      	ldr	r3, [pc, #584]	; (8003718 <TrajectoryGenerator+0x250>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f000 82cc 	beq.w	8003a70 <TrajectoryGenerator+0x5a8>
 80034d8:	2b02      	cmp	r3, #2
 80034da:	f300 84dd 	bgt.w	8003e98 <TrajectoryGenerator+0x9d0>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d004      	beq.n	80034ec <TrajectoryGenerator+0x24>
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	f000 813c 	beq.w	8003760 <TrajectoryGenerator+0x298>
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
		 time += 0.001;
	 }
	 break;
	}
}
 80034e8:	f000 bcd6 	b.w	8003e98 <TrajectoryGenerator+0x9d0>
		qi = position;
 80034ec:	4b8b      	ldr	r3, [pc, #556]	; (800371c <TrajectoryGenerator+0x254>)
 80034ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <TrajectoryGenerator+0x258>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]
		qdi = 0;
 8003500:	4b88      	ldr	r3, [pc, #544]	; (8003724 <TrajectoryGenerator+0x25c>)
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
		qd_max = 13333.33; //pulse/s
 8003508:	4b87      	ldr	r3, [pc, #540]	; (8003728 <TrajectoryGenerator+0x260>)
 800350a:	4a88      	ldr	r2, [pc, #544]	; (800372c <TrajectoryGenerator+0x264>)
 800350c:	601a      	str	r2, [r3, #0]
		qdd_max = 11111.11; //pulse/s^2
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <TrajectoryGenerator+0x268>)
 8003510:	4a88      	ldr	r2, [pc, #544]	; (8003734 <TrajectoryGenerator+0x26c>)
 8003512:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 8003514:	4b88      	ldr	r3, [pc, #544]	; (8003738 <TrajectoryGenerator+0x270>)
 8003516:	ed93 7a00 	vldr	s14, [r3]
 800351a:	4b81      	ldr	r3, [pc, #516]	; (8003720 <TrajectoryGenerator+0x258>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	dd16      	ble.n	8003558 <TrajectoryGenerator+0x90>
		  t_half = sqrtf((qf-qi)/qdd_max);
 800352a:	4b83      	ldr	r3, [pc, #524]	; (8003738 <TrajectoryGenerator+0x270>)
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <TrajectoryGenerator+0x258>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ee37 7a67 	vsub.f32	s14, s14, s15
 800353a:	4b7d      	ldr	r3, [pc, #500]	; (8003730 <TrajectoryGenerator+0x268>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003544:	eeb0 0a66 	vmov.f32	s0, s13
 8003548:	f00c fc4a 	bl	800fde0 <sqrtf>
 800354c:	eef0 7a40 	vmov.f32	s15, s0
 8003550:	4b7a      	ldr	r3, [pc, #488]	; (800373c <TrajectoryGenerator+0x274>)
 8003552:	edc3 7a00 	vstr	s15, [r3]
 8003556:	e022      	b.n	800359e <TrajectoryGenerator+0xd6>
	  else if(qf < qi)
 8003558:	4b77      	ldr	r3, [pc, #476]	; (8003738 <TrajectoryGenerator+0x270>)
 800355a:	ed93 7a00 	vldr	s14, [r3]
 800355e:	4b70      	ldr	r3, [pc, #448]	; (8003720 <TrajectoryGenerator+0x258>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356c:	d517      	bpl.n	800359e <TrajectoryGenerator+0xd6>
		  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 800356e:	4b72      	ldr	r3, [pc, #456]	; (8003738 <TrajectoryGenerator+0x270>)
 8003570:	ed93 7a00 	vldr	s14, [r3]
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <TrajectoryGenerator+0x258>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800357e:	eeb1 7a67 	vneg.f32	s14, s15
 8003582:	4b6b      	ldr	r3, [pc, #428]	; (8003730 <TrajectoryGenerator+0x268>)
 8003584:	edd3 7a00 	vldr	s15, [r3]
 8003588:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800358c:	eeb0 0a66 	vmov.f32	s0, s13
 8003590:	f00c fc26 	bl	800fde0 <sqrtf>
 8003594:	eef0 7a40 	vmov.f32	s15, s0
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <TrajectoryGenerator+0x274>)
 800359a:	edc3 7a00 	vstr	s15, [r3]
	  if(qf-qi < 0)
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <TrajectoryGenerator+0x270>)
 80035a0:	ed93 7a00 	vldr	s14, [r3]
 80035a4:	4b5e      	ldr	r3, [pc, #376]	; (8003720 <TrajectoryGenerator+0x258>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b6:	d50f      	bpl.n	80035d8 <TrajectoryGenerator+0x110>
		  qd_max = -1*qd_max;
 80035b8:	4b5b      	ldr	r3, [pc, #364]	; (8003728 <TrajectoryGenerator+0x260>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	eef1 7a67 	vneg.f32	s15, s15
 80035c2:	4b59      	ldr	r3, [pc, #356]	; (8003728 <TrajectoryGenerator+0x260>)
 80035c4:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 80035c8:	4b59      	ldr	r3, [pc, #356]	; (8003730 <TrajectoryGenerator+0x268>)
 80035ca:	edd3 7a00 	vldr	s15, [r3]
 80035ce:	eef1 7a67 	vneg.f32	s15, s15
 80035d2:	4b57      	ldr	r3, [pc, #348]	; (8003730 <TrajectoryGenerator+0x268>)
 80035d4:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <TrajectoryGenerator+0x260>)
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	4b51      	ldr	r3, [pc, #324]	; (8003724 <TrajectoryGenerator+0x25c>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80035e8:	4b51      	ldr	r3, [pc, #324]	; (8003730 <TrajectoryGenerator+0x268>)
 80035ea:	ed93 7a00 	vldr	s14, [r3]
 80035ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <TrajectoryGenerator+0x278>)
 80035f4:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <TrajectoryGenerator+0x25c>)
 80035fa:	ed93 7a00 	vldr	s14, [r3]
 80035fe:	4b50      	ldr	r3, [pc, #320]	; (8003740 <TrajectoryGenerator+0x278>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	ee17 0a90 	vmov	r0, s15
 800360c:	f7fc ffa4 	bl	8000558 <__aeabi_f2d>
 8003610:	4604      	mov	r4, r0
 8003612:	460d      	mov	r5, r1
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <TrajectoryGenerator+0x268>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fc ff9d 	bl	8000558 <__aeabi_f2d>
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	4b48      	ldr	r3, [pc, #288]	; (8003744 <TrajectoryGenerator+0x27c>)
 8003624:	f7fc fff0 	bl	8000608 <__aeabi_dmul>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4690      	mov	r8, r2
 800362e:	4699      	mov	r9, r3
 8003630:	4b43      	ldr	r3, [pc, #268]	; (8003740 <TrajectoryGenerator+0x278>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ff8f 	bl	8000558 <__aeabi_f2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4640      	mov	r0, r8
 8003640:	4649      	mov	r1, r9
 8003642:	f7fc ffe1 	bl	8000608 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4690      	mov	r8, r2
 800364c:	4699      	mov	r9, r3
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <TrajectoryGenerator+0x278>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff80 	bl	8000558 <__aeabi_f2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4640      	mov	r0, r8
 800365e:	4649      	mov	r1, r9
 8003660:	f7fc ffd2 	bl	8000608 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4620      	mov	r0, r4
 800366a:	4629      	mov	r1, r5
 800366c:	f7fc fe16 	bl	800029c <__adddf3>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f7fd fabe 	bl	8000bf8 <__aeabi_d2f>
 800367c:	4603      	mov	r3, r0
 800367e:	4a32      	ldr	r2, [pc, #200]	; (8003748 <TrajectoryGenerator+0x280>)
 8003680:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 8003682:	4b31      	ldr	r3, [pc, #196]	; (8003748 <TrajectoryGenerator+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a31      	ldr	r2, [pc, #196]	; (800374c <TrajectoryGenerator+0x284>)
 8003688:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 800368a:	4b2b      	ldr	r3, [pc, #172]	; (8003738 <TrajectoryGenerator+0x270>)
 800368c:	ed93 7a00 	vldr	s14, [r3]
 8003690:	4b23      	ldr	r3, [pc, #140]	; (8003720 <TrajectoryGenerator+0x258>)
 8003692:	edd3 7a00 	vldr	s15, [r3]
 8003696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <TrajectoryGenerator+0x280>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <TrajectoryGenerator+0x284>)
 80036a6:	edd3 7a00 	vldr	s15, [r3]
 80036aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <TrajectoryGenerator+0x260>)
 80036b0:	ed93 7a00 	vldr	s14, [r3]
 80036b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b8:	4b25      	ldr	r3, [pc, #148]	; (8003750 <TrajectoryGenerator+0x288>)
 80036ba:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <TrajectoryGenerator+0x278>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a24      	ldr	r2, [pc, #144]	; (8003754 <TrajectoryGenerator+0x28c>)
 80036c4:	6013      	str	r3, [r2, #0]
	  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <TrajectoryGenerator+0x268>)
 80036c8:	ed93 7a00 	vldr	s14, [r3]
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <TrajectoryGenerator+0x274>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036d6:	4b13      	ldr	r3, [pc, #76]	; (8003724 <TrajectoryGenerator+0x25c>)
 80036d8:	edd3 7a00 	vldr	s15, [r3]
 80036dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e0:	eeb0 7ae7 	vabs.f32	s14, s15
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <TrajectoryGenerator+0x260>)
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	eef0 7ae7 	vabs.f32	s15, s15
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	db07      	blt.n	8003708 <TrajectoryGenerator+0x240>
		  initime = time;
 80036f8:	4b17      	ldr	r3, [pc, #92]	; (8003758 <TrajectoryGenerator+0x290>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a17      	ldr	r2, [pc, #92]	; (800375c <TrajectoryGenerator+0x294>)
 80036fe:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <TrajectoryGenerator+0x250>)
 8003702:	2202      	movs	r2, #2
 8003704:	601a      	str	r2, [r3, #0]
	  break;
 8003706:	e3c7      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
		  initime = time;
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <TrajectoryGenerator+0x290>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a13      	ldr	r2, [pc, #76]	; (800375c <TrajectoryGenerator+0x294>)
 800370e:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 8003710:	4b01      	ldr	r3, [pc, #4]	; (8003718 <TrajectoryGenerator+0x250>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
	  break;
 8003716:	e3bf      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
 8003718:	2000093c 	.word	0x2000093c
 800371c:	2000097c 	.word	0x2000097c
 8003720:	20000948 	.word	0x20000948
 8003724:	2000094c 	.word	0x2000094c
 8003728:	2000020c 	.word	0x2000020c
 800372c:	46505552 	.word	0x46505552
 8003730:	20000210 	.word	0x20000210
 8003734:	462d9c71 	.word	0x462d9c71
 8003738:	20000944 	.word	0x20000944
 800373c:	20000954 	.word	0x20000954
 8003740:	20000968 	.word	0x20000968
 8003744:	3fe00000 	.word	0x3fe00000
 8003748:	2000096c 	.word	0x2000096c
 800374c:	20000970 	.word	0x20000970
 8003750:	20000974 	.word	0x20000974
 8003754:	20000978 	.word	0x20000978
 8003758:	20000940 	.word	0x20000940
 800375c:	20000950 	.word	0x20000950
	  if(time <= t_half + initime)
 8003760:	4bb7      	ldr	r3, [pc, #732]	; (8003a40 <TrajectoryGenerator+0x578>)
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	4bb7      	ldr	r3, [pc, #732]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003770:	4bb5      	ldr	r3, [pc, #724]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377e:	f2c0 8092 	blt.w	80038a6 <TrajectoryGenerator+0x3de>
		  setacc = qdd_max;
 8003782:	4bb2      	ldr	r3, [pc, #712]	; (8003a4c <TrajectoryGenerator+0x584>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4ab2      	ldr	r2, [pc, #712]	; (8003a50 <TrajectoryGenerator+0x588>)
 8003788:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 800378a:	4baf      	ldr	r3, [pc, #700]	; (8003a48 <TrajectoryGenerator+0x580>)
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	4bac      	ldr	r3, [pc, #688]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	ee37 7a67 	vsub.f32	s14, s14, s15
 800379a:	4bad      	ldr	r3, [pc, #692]	; (8003a50 <TrajectoryGenerator+0x588>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037a4:	4bab      	ldr	r3, [pc, #684]	; (8003a54 <TrajectoryGenerator+0x58c>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	4baa      	ldr	r3, [pc, #680]	; (8003a58 <TrajectoryGenerator+0x590>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80037b4:	4ba4      	ldr	r3, [pc, #656]	; (8003a48 <TrajectoryGenerator+0x580>)
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	4ba2      	ldr	r3, [pc, #648]	; (8003a44 <TrajectoryGenerator+0x57c>)
 80037bc:	edd3 7a00 	vldr	s15, [r3]
 80037c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037c4:	4ba3      	ldr	r3, [pc, #652]	; (8003a54 <TrajectoryGenerator+0x58c>)
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ce:	4ba3      	ldr	r3, [pc, #652]	; (8003a5c <TrajectoryGenerator+0x594>)
 80037d0:	edd3 7a00 	vldr	s15, [r3]
 80037d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d8:	ee17 0a90 	vmov	r0, s15
 80037dc:	f7fc febc 	bl	8000558 <__aeabi_f2d>
 80037e0:	4604      	mov	r4, r0
 80037e2:	460d      	mov	r5, r1
 80037e4:	4b9a      	ldr	r3, [pc, #616]	; (8003a50 <TrajectoryGenerator+0x588>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fc feb5 	bl	8000558 <__aeabi_f2d>
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	4b9b      	ldr	r3, [pc, #620]	; (8003a60 <TrajectoryGenerator+0x598>)
 80037f4:	f7fc ff08 	bl	8000608 <__aeabi_dmul>
 80037f8:	4602      	mov	r2, r0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4690      	mov	r8, r2
 80037fe:	4699      	mov	r9, r3
 8003800:	4b91      	ldr	r3, [pc, #580]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003802:	ed93 7a00 	vldr	s14, [r3]
 8003806:	4b8f      	ldr	r3, [pc, #572]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003808:	edd3 7a00 	vldr	s15, [r3]
 800380c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003810:	ee17 0a90 	vmov	r0, s15
 8003814:	f7fc fea0 	bl	8000558 <__aeabi_f2d>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4640      	mov	r0, r8
 800381e:	4649      	mov	r1, r9
 8003820:	f7fc fef2 	bl	8000608 <__aeabi_dmul>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4690      	mov	r8, r2
 800382a:	4699      	mov	r9, r3
 800382c:	4b86      	ldr	r3, [pc, #536]	; (8003a48 <TrajectoryGenerator+0x580>)
 800382e:	ed93 7a00 	vldr	s14, [r3]
 8003832:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383c:	ee17 0a90 	vmov	r0, s15
 8003840:	f7fc fe8a 	bl	8000558 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4640      	mov	r0, r8
 800384a:	4649      	mov	r1, r9
 800384c:	f7fc fedc 	bl	8000608 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fd20 	bl	800029c <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f9c8 	bl	8000bf8 <__aeabi_d2f>
 8003868:	4603      	mov	r3, r0
 800386a:	4a7e      	ldr	r2, [pc, #504]	; (8003a64 <TrajectoryGenerator+0x59c>)
 800386c:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 800386e:	4b7d      	ldr	r3, [pc, #500]	; (8003a64 <TrajectoryGenerator+0x59c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7d      	ldr	r2, [pc, #500]	; (8003a68 <TrajectoryGenerator+0x5a0>)
 8003874:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 8003876:	4b78      	ldr	r3, [pc, #480]	; (8003a58 <TrajectoryGenerator+0x590>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a7c      	ldr	r2, [pc, #496]	; (8003a6c <TrajectoryGenerator+0x5a4>)
 800387c:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 800387e:	4b72      	ldr	r3, [pc, #456]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe68 	bl	8000558 <__aeabi_f2d>
 8003888:	a36b      	add	r3, pc, #428	; (adr r3, 8003a38 <TrajectoryGenerator+0x570>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc fd05 	bl	800029c <__adddf3>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4610      	mov	r0, r2
 8003898:	4619      	mov	r1, r3
 800389a:	f7fd f9ad 	bl	8000bf8 <__aeabi_d2f>
 800389e:	4603      	mov	r3, r0
 80038a0:	4a69      	ldr	r2, [pc, #420]	; (8003a48 <TrajectoryGenerator+0x580>)
 80038a2:	6013      	str	r3, [r2, #0]
	break;
 80038a4:	e2f8      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80038a6:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <TrajectoryGenerator+0x578>)
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <TrajectoryGenerator+0x57c>)
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b6:	4b64      	ldr	r3, [pc, #400]	; (8003a48 <TrajectoryGenerator+0x580>)
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	d400      	bmi.n	80038c8 <TrajectoryGenerator+0x400>
	break;
 80038c6:	e2e7      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 80038c8:	4b5d      	ldr	r3, [pc, #372]	; (8003a40 <TrajectoryGenerator+0x578>)
 80038ca:	edd3 7a00 	vldr	s15, [r3]
 80038ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80038d2:	4b5c      	ldr	r3, [pc, #368]	; (8003a44 <TrajectoryGenerator+0x57c>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038dc:	4b5a      	ldr	r3, [pc, #360]	; (8003a48 <TrajectoryGenerator+0x580>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	da00      	bge.n	80038ee <TrajectoryGenerator+0x426>
	break;
 80038ec:	e2d4      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
		  setacc = -qdd_max;
 80038ee:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <TrajectoryGenerator+0x584>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	eef1 7a67 	vneg.f32	s15, s15
 80038f8:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <TrajectoryGenerator+0x588>)
 80038fa:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 80038fe:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
 800390a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <TrajectoryGenerator+0x578>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003918:	4b4d      	ldr	r3, [pc, #308]	; (8003a50 <TrajectoryGenerator+0x588>)
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003922:	4b52      	ldr	r3, [pc, #328]	; (8003a6c <TrajectoryGenerator+0x5a4>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392c:	4b4a      	ldr	r3, [pc, #296]	; (8003a58 <TrajectoryGenerator+0x590>)
 800392e:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8003932:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003934:	ed93 7a00 	vldr	s14, [r3]
 8003938:	4b42      	ldr	r3, [pc, #264]	; (8003a44 <TrajectoryGenerator+0x57c>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003942:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <TrajectoryGenerator+0x578>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	ee37 7a67 	vsub.f32	s14, s14, s15
 800394c:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <TrajectoryGenerator+0x5a4>)
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003956:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <TrajectoryGenerator+0x5a0>)
 8003958:	edd3 7a00 	vldr	s15, [r3]
 800395c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003960:	ee17 0a90 	vmov	r0, s15
 8003964:	f7fc fdf8 	bl	8000558 <__aeabi_f2d>
 8003968:	4604      	mov	r4, r0
 800396a:	460d      	mov	r5, r1
 800396c:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <TrajectoryGenerator+0x588>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fc fdf1 	bl	8000558 <__aeabi_f2d>
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <TrajectoryGenerator+0x598>)
 800397c:	f7fc fe44 	bl	8000608 <__aeabi_dmul>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4690      	mov	r8, r2
 8003986:	4699      	mov	r9, r3
 8003988:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <TrajectoryGenerator+0x580>)
 800398a:	ed93 7a00 	vldr	s14, [r3]
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <TrajectoryGenerator+0x57c>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003998:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <TrajectoryGenerator+0x578>)
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a2:	ee17 0a90 	vmov	r0, s15
 80039a6:	f7fc fdd7 	bl	8000558 <__aeabi_f2d>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4640      	mov	r0, r8
 80039b0:	4649      	mov	r1, r9
 80039b2:	f7fc fe29 	bl	8000608 <__aeabi_dmul>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4690      	mov	r8, r2
 80039bc:	4699      	mov	r9, r3
 80039be:	4b22      	ldr	r3, [pc, #136]	; (8003a48 <TrajectoryGenerator+0x580>)
 80039c0:	ed93 7a00 	vldr	s14, [r3]
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <TrajectoryGenerator+0x57c>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039ce:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <TrajectoryGenerator+0x578>)
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d8:	ee17 0a90 	vmov	r0, s15
 80039dc:	f7fc fdbc 	bl	8000558 <__aeabi_f2d>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4640      	mov	r0, r8
 80039e6:	4649      	mov	r1, r9
 80039e8:	f7fc fe0e 	bl	8000608 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4620      	mov	r0, r4
 80039f2:	4629      	mov	r1, r5
 80039f4:	f7fc fc52 	bl	800029c <__adddf3>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fd f8fa 	bl	8000bf8 <__aeabi_d2f>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <TrajectoryGenerator+0x59c>)
 8003a08:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fda2 	bl	8000558 <__aeabi_f2d>
 8003a14:	a308      	add	r3, pc, #32	; (adr r3, 8003a38 <TrajectoryGenerator+0x570>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fc3f 	bl	800029c <__adddf3>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f8e7 	bl	8000bf8 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a06      	ldr	r2, [pc, #24]	; (8003a48 <TrajectoryGenerator+0x580>)
 8003a2e:	6013      	str	r3, [r2, #0]
	break;
 8003a30:	e232      	b.n	8003e98 <TrajectoryGenerator+0x9d0>
 8003a32:	bf00      	nop
 8003a34:	f3af 8000 	nop.w
 8003a38:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a3c:	3f50624d 	.word	0x3f50624d
 8003a40:	20000954 	.word	0x20000954
 8003a44:	20000950 	.word	0x20000950
 8003a48:	20000940 	.word	0x20000940
 8003a4c:	20000210 	.word	0x20000210
 8003a50:	200009ac 	.word	0x200009ac
 8003a54:	2000094c 	.word	0x2000094c
 8003a58:	200009a8 	.word	0x200009a8
 8003a5c:	20000948 	.word	0x20000948
 8003a60:	3fe00000 	.word	0x3fe00000
 8003a64:	20000988 	.word	0x20000988
 8003a68:	20000960 	.word	0x20000960
 8003a6c:	20000958 	.word	0x20000958
	 if(time <= tacc + initime)
 8003a70:	4b9d      	ldr	r3, [pc, #628]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003a72:	ed93 7a00 	vldr	s14, [r3]
 8003a76:	4b9d      	ldr	r3, [pc, #628]	; (8003cec <TrajectoryGenerator+0x824>)
 8003a78:	edd3 7a00 	vldr	s15, [r3]
 8003a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a80:	4b9b      	ldr	r3, [pc, #620]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	f2c0 8092 	blt.w	8003bb6 <TrajectoryGenerator+0x6ee>
		 setacc = qdd_max;
 8003a92:	4b98      	ldr	r3, [pc, #608]	; (8003cf4 <TrajectoryGenerator+0x82c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a98      	ldr	r2, [pc, #608]	; (8003cf8 <TrajectoryGenerator+0x830>)
 8003a98:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 8003a9a:	4b95      	ldr	r3, [pc, #596]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003a9c:	ed93 7a00 	vldr	s14, [r3]
 8003aa0:	4b92      	ldr	r3, [pc, #584]	; (8003cec <TrajectoryGenerator+0x824>)
 8003aa2:	edd3 7a00 	vldr	s15, [r3]
 8003aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aaa:	4b93      	ldr	r3, [pc, #588]	; (8003cf8 <TrajectoryGenerator+0x830>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ab4:	4b91      	ldr	r3, [pc, #580]	; (8003cfc <TrajectoryGenerator+0x834>)
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	4b90      	ldr	r3, [pc, #576]	; (8003d00 <TrajectoryGenerator+0x838>)
 8003ac0:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003ac4:	4b8a      	ldr	r3, [pc, #552]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003ac6:	ed93 7a00 	vldr	s14, [r3]
 8003aca:	4b88      	ldr	r3, [pc, #544]	; (8003cec <TrajectoryGenerator+0x824>)
 8003acc:	edd3 7a00 	vldr	s15, [r3]
 8003ad0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ad4:	4b89      	ldr	r3, [pc, #548]	; (8003cfc <TrajectoryGenerator+0x834>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ade:	4b89      	ldr	r3, [pc, #548]	; (8003d04 <TrajectoryGenerator+0x83c>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae8:	ee17 0a90 	vmov	r0, s15
 8003aec:	f7fc fd34 	bl	8000558 <__aeabi_f2d>
 8003af0:	4604      	mov	r4, r0
 8003af2:	460d      	mov	r5, r1
 8003af4:	4b80      	ldr	r3, [pc, #512]	; (8003cf8 <TrajectoryGenerator+0x830>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd2d 	bl	8000558 <__aeabi_f2d>
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	4b81      	ldr	r3, [pc, #516]	; (8003d08 <TrajectoryGenerator+0x840>)
 8003b04:	f7fc fd80 	bl	8000608 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4690      	mov	r8, r2
 8003b0e:	4699      	mov	r9, r3
 8003b10:	4b77      	ldr	r3, [pc, #476]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003b12:	ed93 7a00 	vldr	s14, [r3]
 8003b16:	4b75      	ldr	r3, [pc, #468]	; (8003cec <TrajectoryGenerator+0x824>)
 8003b18:	edd3 7a00 	vldr	s15, [r3]
 8003b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b20:	ee17 0a90 	vmov	r0, s15
 8003b24:	f7fc fd18 	bl	8000558 <__aeabi_f2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	4649      	mov	r1, r9
 8003b30:	f7fc fd6a 	bl	8000608 <__aeabi_dmul>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4690      	mov	r8, r2
 8003b3a:	4699      	mov	r9, r3
 8003b3c:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <TrajectoryGenerator+0x824>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b4c:	ee17 0a90 	vmov	r0, s15
 8003b50:	f7fc fd02 	bl	8000558 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4640      	mov	r0, r8
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	f7fc fd54 	bl	8000608 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f7fc fb98 	bl	800029c <__adddf3>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	f7fd f840 	bl	8000bf8 <__aeabi_d2f>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4a64      	ldr	r2, [pc, #400]	; (8003d0c <TrajectoryGenerator+0x844>)
 8003b7c:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <TrajectoryGenerator+0x844>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <TrajectoryGenerator+0x848>)
 8003b84:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8003b86:	4b5e      	ldr	r3, [pc, #376]	; (8003d00 <TrajectoryGenerator+0x838>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a62      	ldr	r2, [pc, #392]	; (8003d14 <TrajectoryGenerator+0x84c>)
 8003b8c:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003b8e:	4b58      	ldr	r3, [pc, #352]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fc fce0 	bl	8000558 <__aeabi_f2d>
 8003b98:	a351      	add	r3, pc, #324	; (adr r3, 8003ce0 <TrajectoryGenerator+0x818>)
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f7fc fb7d 	bl	800029c <__adddf3>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7fd f825 	bl	8000bf8 <__aeabi_d2f>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4a4f      	ldr	r2, [pc, #316]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003bb2:	6013      	str	r3, [r2, #0]
	 break;
 8003bb4:	e16f      	b.n	8003e96 <TrajectoryGenerator+0x9ce>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8003bb6:	4b4c      	ldr	r3, [pc, #304]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003bb8:	ed93 7a00 	vldr	s14, [r3]
 8003bbc:	4b4b      	ldr	r3, [pc, #300]	; (8003cec <TrajectoryGenerator+0x824>)
 8003bbe:	edd3 7a00 	vldr	s15, [r3]
 8003bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc6:	4b4a      	ldr	r3, [pc, #296]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003bc8:	edd3 7a00 	vldr	s15, [r3]
 8003bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd4:	d552      	bpl.n	8003c7c <TrajectoryGenerator+0x7b4>
 8003bd6:	4b45      	ldr	r3, [pc, #276]	; (8003cec <TrajectoryGenerator+0x824>)
 8003bd8:	ed93 7a00 	vldr	s14, [r3]
 8003bdc:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003bde:	edd3 7a00 	vldr	s15, [r3]
 8003be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be6:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <TrajectoryGenerator+0x850>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf0:	4b3f      	ldr	r3, [pc, #252]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	db3d      	blt.n	8003c7c <TrajectoryGenerator+0x7b4>
		 setacc = 0;
 8003c00:	4b3d      	ldr	r3, [pc, #244]	; (8003cf8 <TrajectoryGenerator+0x830>)
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8003c08:	4b44      	ldr	r3, [pc, #272]	; (8003d1c <TrajectoryGenerator+0x854>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <TrajectoryGenerator+0x838>)
 8003c0e:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003c12:	ed93 7a00 	vldr	s14, [r3]
 8003c16:	4b35      	ldr	r3, [pc, #212]	; (8003cec <TrajectoryGenerator+0x824>)
 8003c18:	edd3 7a00 	vldr	s15, [r3]
 8003c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c20:	4b31      	ldr	r3, [pc, #196]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c2a:	4b3c      	ldr	r3, [pc, #240]	; (8003d1c <TrajectoryGenerator+0x854>)
 8003c2c:	edd3 7a00 	vldr	s15, [r3]
 8003c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c34:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <TrajectoryGenerator+0x848>)
 8003c36:	edd3 7a00 	vldr	s15, [r3]
 8003c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3e:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <TrajectoryGenerator+0x844>)
 8003c40:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8003c44:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <TrajectoryGenerator+0x844>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <TrajectoryGenerator+0x858>)
 8003c4a:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <TrajectoryGenerator+0x838>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <TrajectoryGenerator+0x85c>)
 8003c52:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003c54:	4b26      	ldr	r3, [pc, #152]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fc7d 	bl	8000558 <__aeabi_f2d>
 8003c5e:	a320      	add	r3, pc, #128	; (adr r3, 8003ce0 <TrajectoryGenerator+0x818>)
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f7fc fb1a 	bl	800029c <__adddf3>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f7fc ffc2 	bl	8000bf8 <__aeabi_d2f>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003c78:	6013      	str	r3, [r2, #0]
	 break;
 8003c7a:	e10c      	b.n	8003e96 <TrajectoryGenerator+0x9ce>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003c7e:	ed93 7a00 	vldr	s14, [r3]
 8003c82:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <TrajectoryGenerator+0x850>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <TrajectoryGenerator+0x824>)
 8003c8e:	edd3 7a00 	vldr	s15, [r3]
 8003c92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d400      	bmi.n	8003ca8 <TrajectoryGenerator+0x7e0>
	 break;
 8003ca6:	e0f6      	b.n	8003e96 <TrajectoryGenerator+0x9ce>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <TrajectoryGenerator+0x820>)
 8003caa:	ed93 7a00 	vldr	s14, [r3]
 8003cae:	4b1a      	ldr	r3, [pc, #104]	; (8003d18 <TrajectoryGenerator+0x850>)
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <TrajectoryGenerator+0x860>)
 8003cba:	edd3 7a00 	vldr	s15, [r3]
 8003cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <TrajectoryGenerator+0x824>)
 8003cc4:	edd3 7a00 	vldr	s15, [r3]
 8003cc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <TrajectoryGenerator+0x828>)
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cda:	da27      	bge.n	8003d2c <TrajectoryGenerator+0x864>
	 break;
 8003cdc:	e0db      	b.n	8003e96 <TrajectoryGenerator+0x9ce>
 8003cde:	bf00      	nop
 8003ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ce4:	3f50624d 	.word	0x3f50624d
 8003ce8:	20000968 	.word	0x20000968
 8003cec:	20000950 	.word	0x20000950
 8003cf0:	20000940 	.word	0x20000940
 8003cf4:	20000210 	.word	0x20000210
 8003cf8:	200009ac 	.word	0x200009ac
 8003cfc:	2000094c 	.word	0x2000094c
 8003d00:	200009a8 	.word	0x200009a8
 8003d04:	20000948 	.word	0x20000948
 8003d08:	3fe00000 	.word	0x3fe00000
 8003d0c:	20000988 	.word	0x20000988
 8003d10:	20000960 	.word	0x20000960
 8003d14:	20000958 	.word	0x20000958
 8003d18:	20000974 	.word	0x20000974
 8003d1c:	2000020c 	.word	0x2000020c
 8003d20:	20000964 	.word	0x20000964
 8003d24:	2000095c 	.word	0x2000095c
 8003d28:	20000978 	.word	0x20000978
		 setacc = -qdd_max;
 8003d2c:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <TrajectoryGenerator+0x9e0>)
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	eef1 7a67 	vneg.f32	s15, s15
 8003d36:	4b5d      	ldr	r3, [pc, #372]	; (8003eac <TrajectoryGenerator+0x9e4>)
 8003d38:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003d3e:	ed93 7a00 	vldr	s14, [r3]
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <TrajectoryGenerator+0x9ec>)
 8003d44:	edd3 7a00 	vldr	s15, [r3]
 8003d48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d4c:	4b5a      	ldr	r3, [pc, #360]	; (8003eb8 <TrajectoryGenerator+0x9f0>)
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d56:	4b59      	ldr	r3, [pc, #356]	; (8003ebc <TrajectoryGenerator+0x9f4>)
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d60:	4b52      	ldr	r3, [pc, #328]	; (8003eac <TrajectoryGenerator+0x9e4>)
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <TrajectoryGenerator+0x9f8>)
 8003d6c:	edd3 7a00 	vldr	s15, [r3]
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <TrajectoryGenerator+0x9fc>)
 8003d76:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8003d7a:	4b4d      	ldr	r3, [pc, #308]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003d7c:	ed93 7a00 	vldr	s14, [r3]
 8003d80:	4b4c      	ldr	r3, [pc, #304]	; (8003eb4 <TrajectoryGenerator+0x9ec>)
 8003d82:	edd3 7a00 	vldr	s15, [r3]
 8003d86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d8a:	4b4b      	ldr	r3, [pc, #300]	; (8003eb8 <TrajectoryGenerator+0x9f0>)
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d94:	4b49      	ldr	r3, [pc, #292]	; (8003ebc <TrajectoryGenerator+0x9f4>)
 8003d96:	edd3 7a00 	vldr	s15, [r3]
 8003d9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d9e:	4b48      	ldr	r3, [pc, #288]	; (8003ec0 <TrajectoryGenerator+0x9f8>)
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da8:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <TrajectoryGenerator+0xa00>)
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db2:	ee17 0a90 	vmov	r0, s15
 8003db6:	f7fc fbcf 	bl	8000558 <__aeabi_f2d>
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	4b3b      	ldr	r3, [pc, #236]	; (8003eac <TrajectoryGenerator+0x9e4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fbc8 	bl	8000558 <__aeabi_f2d>
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	4b3f      	ldr	r3, [pc, #252]	; (8003ecc <TrajectoryGenerator+0xa04>)
 8003dce:	f7fc fc1b 	bl	8000608 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4690      	mov	r8, r2
 8003dd8:	4699      	mov	r9, r3
 8003dda:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003ddc:	ed93 7a00 	vldr	s14, [r3]
 8003de0:	4b34      	ldr	r3, [pc, #208]	; (8003eb4 <TrajectoryGenerator+0x9ec>)
 8003de2:	edd3 7a00 	vldr	s15, [r3]
 8003de6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dea:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <TrajectoryGenerator+0x9f0>)
 8003dec:	edd3 7a00 	vldr	s15, [r3]
 8003df0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003df4:	4b31      	ldr	r3, [pc, #196]	; (8003ebc <TrajectoryGenerator+0x9f4>)
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfe:	ee17 0a90 	vmov	r0, s15
 8003e02:	f7fc fba9 	bl	8000558 <__aeabi_f2d>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	f7fc fbfb 	bl	8000608 <__aeabi_dmul>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4690      	mov	r8, r2
 8003e18:	4699      	mov	r9, r3
 8003e1a:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003e1c:	ed93 7a00 	vldr	s14, [r3]
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <TrajectoryGenerator+0x9ec>)
 8003e22:	edd3 7a00 	vldr	s15, [r3]
 8003e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <TrajectoryGenerator+0x9f0>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <TrajectoryGenerator+0x9f4>)
 8003e36:	edd3 7a00 	vldr	s15, [r3]
 8003e3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3e:	ee17 0a90 	vmov	r0, s15
 8003e42:	f7fc fb89 	bl	8000558 <__aeabi_f2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	f7fc fbdb 	bl	8000608 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4620      	mov	r0, r4
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7fc fa1f 	bl	800029c <__adddf3>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f7fc fec7 	bl	8000bf8 <__aeabi_d2f>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <TrajectoryGenerator+0xa08>)
 8003e6e:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003e70:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc fb6f 	bl	8000558 <__aeabi_f2d>
 8003e7a:	a309      	add	r3, pc, #36	; (adr r3, 8003ea0 <TrajectoryGenerator+0x9d8>)
 8003e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e80:	f7fc fa0c 	bl	800029c <__adddf3>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f7fc feb4 	bl	8000bf8 <__aeabi_d2f>
 8003e90:	4603      	mov	r3, r0
 8003e92:	4a07      	ldr	r2, [pc, #28]	; (8003eb0 <TrajectoryGenerator+0x9e8>)
 8003e94:	6013      	str	r3, [r2, #0]
	 break;
 8003e96:	bf00      	nop
}
 8003e98:	bf00      	nop
 8003e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e9e:	bf00      	nop
 8003ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ea4:	3f50624d 	.word	0x3f50624d
 8003ea8:	20000210 	.word	0x20000210
 8003eac:	200009ac 	.word	0x200009ac
 8003eb0:	20000940 	.word	0x20000940
 8003eb4:	20000950 	.word	0x20000950
 8003eb8:	20000968 	.word	0x20000968
 8003ebc:	20000974 	.word	0x20000974
 8003ec0:	2000095c 	.word	0x2000095c
 8003ec4:	200009a8 	.word	0x200009a8
 8003ec8:	20000964 	.word	0x20000964
 8003ecc:	3fe00000 	.word	0x3fe00000
 8003ed0:	20000988 	.word	0x20000988

08003ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ed8:	b672      	cpsid	i
}
 8003eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003edc:	e7fe      	b.n	8003edc <Error_Handler+0x8>
	...

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <HAL_MspInit+0x4c>)
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_MspInit+0x4c>)
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efe:	607b      	str	r3, [r7, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a08      	ldr	r2, [pc, #32]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_MspInit+0x4c>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003f1e:	2007      	movs	r0, #7
 8003f20:	f001 f998 	bl	8005254 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08a      	sub	sp, #40	; 0x28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <HAL_ADC_MspInit+0xdc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d157      	bne.n	8004002 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	4a2d      	ldr	r2, [pc, #180]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6453      	str	r3, [r2, #68]	; 0x44
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	4a26      	ldr	r2, [pc, #152]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7e:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_ADC_MspInit+0xe0>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	481d      	ldr	r0, [pc, #116]	; (8004014 <HAL_ADC_MspInit+0xe4>)
 8003f9e:	f001 fdb7 	bl	8005b10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003fa2:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_ADC_MspInit+0xec>)
 8003fa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fae:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fcc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fda:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe0:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fe6:	480c      	ldr	r0, [pc, #48]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003fe8:	f001 f976 	bl	80052d8 <HAL_DMA_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003ff2:	f7ff ff6f 	bl	8003ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a07      	ldr	r2, [pc, #28]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
 8003ffc:	4a06      	ldr	r2, [pc, #24]	; (8004018 <HAL_ADC_MspInit+0xe8>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004002:	bf00      	nop
 8004004:	3728      	adds	r7, #40	; 0x28
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40012000 	.word	0x40012000
 8004010:	40023800 	.word	0x40023800
 8004014:	40020000 	.word	0x40020000
 8004018:	20000464 	.word	0x20000464
 800401c:	40026410 	.word	0x40026410

08004020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	f107 0314 	add.w	r3, r7, #20
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	609a      	str	r2, [r3, #8]
 8004034:	60da      	str	r2, [r3, #12]
 8004036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <HAL_I2C_MspInit+0xa4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d13c      	bne.n	80040bc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	4b20      	ldr	r3, [pc, #128]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a1f      	ldr	r2, [pc, #124]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800405e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004064:	2312      	movs	r3, #18
 8004066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406c:	2303      	movs	r3, #3
 800406e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004070:	2304      	movs	r3, #4
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4814      	ldr	r0, [pc, #80]	; (80040cc <HAL_I2C_MspInit+0xac>)
 800407c:	f001 fd48 	bl	8005b10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 800408a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800408e:	6413      	str	r3, [r2, #64]	; 0x40
 8004090:	4b0d      	ldr	r3, [pc, #52]	; (80040c8 <HAL_I2C_MspInit+0xa8>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800409c:	2200      	movs	r2, #0
 800409e:	2100      	movs	r1, #0
 80040a0:	201f      	movs	r0, #31
 80040a2:	f001 f8e2 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80040a6:	201f      	movs	r0, #31
 80040a8:	f001 f8fb 	bl	80052a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80040ac:	2200      	movs	r2, #0
 80040ae:	2100      	movs	r1, #0
 80040b0:	2020      	movs	r0, #32
 80040b2:	f001 f8da 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80040b6:	2020      	movs	r0, #32
 80040b8:	f001 f8f3 	bl	80052a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040bc:	bf00      	nop
 80040be:	3728      	adds	r7, #40	; 0x28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40005400 	.word	0x40005400
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40020400 	.word	0x40020400

080040d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <HAL_TIM_PWM_MspInit+0x58>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d11d      	bne.n	800411e <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_TIM_PWM_MspInit+0x5c>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	4a10      	ldr	r2, [pc, #64]	; (800412c <HAL_TIM_PWM_MspInit+0x5c>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6453      	str	r3, [r2, #68]	; 0x44
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_TIM_PWM_MspInit+0x5c>)
 80040f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	2018      	movs	r0, #24
 8004104:	f001 f8b1 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004108:	2018      	movs	r0, #24
 800410a:	f001 f8ca 	bl	80052a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	201a      	movs	r0, #26
 8004114:	f001 f8a9 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004118:	201a      	movs	r0, #26
 800411a:	f001 f8c2 	bl	80052a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40023800 	.word	0x40023800

08004130 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	; 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d12b      	bne.n	80041aa <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800415c:	f043 0302 	orr.w	r3, r3, #2
 8004160:	6413      	str	r3, [r2, #64]	; 0x40
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	613b      	str	r3, [r7, #16]
 800416c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004176:	4a10      	ldr	r2, [pc, #64]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6313      	str	r3, [r2, #48]	; 0x30
 800417e:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800418a:	23c0      	movs	r3, #192	; 0xc0
 800418c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418e:	2302      	movs	r3, #2
 8004190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004192:	2300      	movs	r3, #0
 8004194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004196:	2300      	movs	r3, #0
 8004198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800419a:	2302      	movs	r3, #2
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419e:	f107 0314 	add.w	r3, r7, #20
 80041a2:	4619      	mov	r1, r3
 80041a4:	4805      	ldr	r0, [pc, #20]	; (80041bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80041a6:	f001 fcb3 	bl	8005b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80041aa:	bf00      	nop
 80041ac:	3728      	adds	r7, #40	; 0x28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000

080041c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a1c      	ldr	r2, [pc, #112]	; (8004240 <HAL_TIM_Base_MspInit+0x80>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d116      	bne.n	8004200 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 80041d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6453      	str	r3, [r2, #68]	; 0x44
 80041e2:	4b18      	ldr	r3, [pc, #96]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2100      	movs	r1, #0
 80041f2:	2018      	movs	r0, #24
 80041f4:	f001 f839 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80041f8:	2018      	movs	r0, #24
 80041fa:	f001 f852 	bl	80052a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80041fe:	e01a      	b.n	8004236 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_TIM_Base_MspInit+0x88>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d115      	bne.n	8004236 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 8004210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004212:	4a0c      	ldr	r2, [pc, #48]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6453      	str	r3, [r2, #68]	; 0x44
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_TIM_Base_MspInit+0x84>)
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004222:	60bb      	str	r3, [r7, #8]
 8004224:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	2100      	movs	r1, #0
 800422a:	201a      	movs	r0, #26
 800422c:	f001 f81d 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004230:	201a      	movs	r0, #26
 8004232:	f001 f836 	bl	80052a2 <HAL_NVIC_EnableIRQ>
}
 8004236:	bf00      	nop
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40014000 	.word	0x40014000
 8004244:	40023800 	.word	0x40023800
 8004248:	40014800 	.word	0x40014800

0800424c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 030c 	add.w	r3, r7, #12
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a12      	ldr	r2, [pc, #72]	; (80042b4 <HAL_TIM_MspPostInit+0x68>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d11e      	bne.n	80042ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <HAL_TIM_MspPostInit+0x6c>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a10      	ldr	r2, [pc, #64]	; (80042b8 <HAL_TIM_MspPostInit+0x6c>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_TIM_MspPostInit+0x6c>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800428a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800428e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004290:	2302      	movs	r3, #2
 8004292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800429c:	2301      	movs	r3, #1
 800429e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a0:	f107 030c 	add.w	r3, r7, #12
 80042a4:	4619      	mov	r1, r3
 80042a6:	4805      	ldr	r0, [pc, #20]	; (80042bc <HAL_TIM_MspPostInit+0x70>)
 80042a8:	f001 fc32 	bl	8005b10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042ac:	bf00      	nop
 80042ae:	3720      	adds	r7, #32
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020000 	.word	0x40020000

080042c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08c      	sub	sp, #48	; 0x30
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c8:	f107 031c 	add.w	r3, r7, #28
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	60da      	str	r2, [r3, #12]
 80042d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a60      	ldr	r2, [pc, #384]	; (8004460 <HAL_UART_MspInit+0x1a0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d153      	bne.n	800438a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	4b5f      	ldr	r3, [pc, #380]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4a5e      	ldr	r2, [pc, #376]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80042ec:	f043 0310 	orr.w	r3, r3, #16
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	4b5c      	ldr	r3, [pc, #368]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	4b58      	ldr	r3, [pc, #352]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	4a57      	ldr	r2, [pc, #348]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6313      	str	r3, [r2, #48]	; 0x30
 800430e:	4b55      	ldr	r3, [pc, #340]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	4b51      	ldr	r3, [pc, #324]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 8004324:	f043 0302 	orr.w	r3, r3, #2
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b4e      	ldr	r3, [pc, #312]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800433c:	2302      	movs	r3, #2
 800433e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004340:	2300      	movs	r3, #0
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004344:	2303      	movs	r3, #3
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004348:	2307      	movs	r3, #7
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800434c:	f107 031c 	add.w	r3, r7, #28
 8004350:	4619      	mov	r1, r3
 8004352:	4845      	ldr	r0, [pc, #276]	; (8004468 <HAL_UART_MspInit+0x1a8>)
 8004354:	f001 fbdc 	bl	8005b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004358:	2380      	movs	r3, #128	; 0x80
 800435a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004368:	2307      	movs	r3, #7
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	f107 031c 	add.w	r3, r7, #28
 8004370:	4619      	mov	r1, r3
 8004372:	483e      	ldr	r0, [pc, #248]	; (800446c <HAL_UART_MspInit+0x1ac>)
 8004374:	f001 fbcc 	bl	8005b10 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004378:	2200      	movs	r2, #0
 800437a:	2100      	movs	r1, #0
 800437c:	2025      	movs	r0, #37	; 0x25
 800437e:	f000 ff74 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004382:	2025      	movs	r0, #37	; 0x25
 8004384:	f000 ff8d 	bl	80052a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004388:	e066      	b.n	8004458 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a38      	ldr	r2, [pc, #224]	; (8004470 <HAL_UART_MspInit+0x1b0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d161      	bne.n	8004458 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	4b32      	ldr	r3, [pc, #200]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043a2:	6413      	str	r3, [r2, #64]	; 0x40
 80043a4:	4b2f      	ldr	r3, [pc, #188]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	6313      	str	r3, [r2, #48]	; 0x30
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <HAL_UART_MspInit+0x1a4>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80043cc:	230c      	movs	r3, #12
 80043ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	2302      	movs	r3, #2
 80043d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d8:	2303      	movs	r3, #3
 80043da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043dc:	2307      	movs	r3, #7
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e0:	f107 031c 	add.w	r3, r7, #28
 80043e4:	4619      	mov	r1, r3
 80043e6:	4820      	ldr	r0, [pc, #128]	; (8004468 <HAL_UART_MspInit+0x1a8>)
 80043e8:	f001 fb92 	bl	8005b10 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 80043ee:	4a22      	ldr	r2, [pc, #136]	; (8004478 <HAL_UART_MspInit+0x1b8>)
 80043f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80043f2:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 80043f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 80043fc:	2240      	movs	r2, #64	; 0x40
 80043fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004400:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004402:	2200      	movs	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800440c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004410:	2200      	movs	r2, #0
 8004412:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004414:	4b17      	ldr	r3, [pc, #92]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004416:	2200      	movs	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800441a:	4b16      	ldr	r3, [pc, #88]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 800441c:	2200      	movs	r2, #0
 800441e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004422:	2200      	movs	r2, #0
 8004424:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004426:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004428:	2200      	movs	r2, #0
 800442a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800442c:	4811      	ldr	r0, [pc, #68]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 800442e:	f000 ff53 	bl	80052d8 <HAL_DMA_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004438:	f7ff fd4c 	bl	8003ed4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004440:	635a      	str	r2, [r3, #52]	; 0x34
 8004442:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <HAL_UART_MspInit+0x1b4>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004448:	2200      	movs	r2, #0
 800444a:	2100      	movs	r1, #0
 800444c:	2026      	movs	r0, #38	; 0x26
 800444e:	f000 ff0c 	bl	800526a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004452:	2026      	movs	r0, #38	; 0x26
 8004454:	f000 ff25 	bl	80052a2 <HAL_NVIC_EnableIRQ>
}
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	; 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40011000 	.word	0x40011000
 8004464:	40023800 	.word	0x40023800
 8004468:	40020000 	.word	0x40020000
 800446c:	40020400 	.word	0x40020400
 8004470:	40004400 	.word	0x40004400
 8004474:	200008d0 	.word	0x200008d0
 8004478:	400260a0 	.word	0x400260a0

0800447c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004480:	e7fe      	b.n	8004480 <NMI_Handler+0x4>

08004482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004486:	e7fe      	b.n	8004486 <HardFault_Handler+0x4>

08004488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800448c:	e7fe      	b.n	800448c <MemManage_Handler+0x4>

0800448e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004492:	e7fe      	b.n	8004492 <BusFault_Handler+0x4>

08004494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004498:	e7fe      	b.n	8004498 <UsageFault_Handler+0x4>

0800449a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c8:	f000 f9ae 	bl	8004828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80044d4:	4802      	ldr	r0, [pc, #8]	; (80044e0 <DMA1_Stream6_IRQHandler+0x10>)
 80044d6:	f001 f897 	bl	8005608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	200008d0 	.word	0x200008d0

080044e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044e8:	4803      	ldr	r0, [pc, #12]	; (80044f8 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80044ea:	f004 fc19 	bl	8008d20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80044ee:	4803      	ldr	r0, [pc, #12]	; (80044fc <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80044f0:	f004 fc16 	bl	8008d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	20000518 	.word	0x20000518
 80044fc:	20000680 	.word	0x20000680

08004500 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004504:	4803      	ldr	r0, [pc, #12]	; (8004514 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004506:	f004 fc0b 	bl	8008d20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800450a:	4803      	ldr	r0, [pc, #12]	; (8004518 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800450c:	f004 fc08 	bl	8008d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000518 	.word	0x20000518
 8004518:	20000734 	.word	0x20000734

0800451c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <I2C1_EV_IRQHandler+0x10>)
 8004522:	f001 fdef 	bl	8006104 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200004c4 	.word	0x200004c4

08004530 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004534:	4802      	ldr	r0, [pc, #8]	; (8004540 <I2C1_ER_IRQHandler+0x10>)
 8004536:	f001 ff56 	bl	80063e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200004c4 	.word	0x200004c4

08004544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <USART1_IRQHandler+0x10>)
 800454a:	f005 ff37 	bl	800a3bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200007e8 	.word	0x200007e8

08004558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <USART2_IRQHandler+0x10>)
 800455e:	f005 ff2d 	bl	800a3bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	2000085c 	.word	0x2000085c

0800456c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <DMA2_Stream0_IRQHandler+0x10>)
 8004572:	f001 f849 	bl	8005608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000464 	.word	0x20000464

08004580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return 1;
 8004584:	2301      	movs	r3, #1
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <_kill>:

int _kill(int pid, int sig)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800459a:	f006 ff55 	bl	800b448 <__errno>
 800459e:	4603      	mov	r3, r0
 80045a0:	2216      	movs	r2, #22
 80045a2:	601a      	str	r2, [r3, #0]
  return -1;
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <_exit>:

void _exit (int status)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045b8:	f04f 31ff 	mov.w	r1, #4294967295
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ffe7 	bl	8004590 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045c2:	e7fe      	b.n	80045c2 <_exit+0x12>

080045c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	e00a      	b.n	80045ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045d6:	f3af 8000 	nop.w
 80045da:	4601      	mov	r1, r0
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	60ba      	str	r2, [r7, #8]
 80045e2:	b2ca      	uxtb	r2, r1
 80045e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	3301      	adds	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	dbf0      	blt.n	80045d6 <_read+0x12>
  }

  return len;
 80045f4:	687b      	ldr	r3, [r7, #4]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e009      	b.n	8004624 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	60ba      	str	r2, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	3301      	adds	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	dbf1      	blt.n	8004610 <_write+0x12>
  }
  return len;
 800462c:	687b      	ldr	r3, [r7, #4]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <_close>:

int _close(int file)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800463e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800465e:	605a      	str	r2, [r3, #4]
  return 0;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <_isatty>:

int _isatty(int file)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <_sbrk+0x5c>)
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <_sbrk+0x60>)
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046b4:	4b13      	ldr	r3, [pc, #76]	; (8004704 <_sbrk+0x64>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046bc:	4b11      	ldr	r3, [pc, #68]	; (8004704 <_sbrk+0x64>)
 80046be:	4a12      	ldr	r2, [pc, #72]	; (8004708 <_sbrk+0x68>)
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <_sbrk+0x64>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d207      	bcs.n	80046e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046d0:	f006 feba 	bl	800b448 <__errno>
 80046d4:	4603      	mov	r3, r0
 80046d6:	220c      	movs	r2, #12
 80046d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046da:	f04f 33ff 	mov.w	r3, #4294967295
 80046de:	e009      	b.n	80046f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_sbrk+0x64>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046e6:	4b07      	ldr	r3, [pc, #28]	; (8004704 <_sbrk+0x64>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4413      	add	r3, r2
 80046ee:	4a05      	ldr	r2, [pc, #20]	; (8004704 <_sbrk+0x64>)
 80046f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046f2:	68fb      	ldr	r3, [r7, #12]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	20020000 	.word	0x20020000
 8004700:	00000400 	.word	0x00000400
 8004704:	200010ac 	.word	0x200010ac
 8004708:	200010c8 	.word	0x200010c8

0800470c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <SystemInit+0x20>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	4a05      	ldr	r2, [pc, #20]	; (800472c <SystemInit+0x20>)
 8004718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800471c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	e000ed00 	.word	0xe000ed00

08004730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8004730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004768 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004734:	480d      	ldr	r0, [pc, #52]	; (800476c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004736:	490e      	ldr	r1, [pc, #56]	; (8004770 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004738:	4a0e      	ldr	r2, [pc, #56]	; (8004774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800473a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800473c:	e002      	b.n	8004744 <LoopCopyDataInit>

0800473e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800473e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004742:	3304      	adds	r3, #4

08004744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004748:	d3f9      	bcc.n	800473e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800474a:	4a0b      	ldr	r2, [pc, #44]	; (8004778 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800474c:	4c0b      	ldr	r4, [pc, #44]	; (800477c <LoopFillZerobss+0x26>)
  movs r3, #0
 800474e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004750:	e001      	b.n	8004756 <LoopFillZerobss>

08004752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004754:	3204      	adds	r2, #4

08004756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004758:	d3fb      	bcc.n	8004752 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800475a:	f7ff ffd7 	bl	800470c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800475e:	f006 fe79 	bl	800b454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004762:	f7fc ffa9 	bl	80016b8 <main>
  bx  lr    
 8004766:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 8004768:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800476c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004770:	200003fc 	.word	0x200003fc
  ldr r2, =_sidata
 8004774:	08010514 	.word	0x08010514
  ldr r2, =_sbss
 8004778:	200003fc 	.word	0x200003fc
  ldr r4, =_ebss
 800477c:	200010c4 	.word	0x200010c4

08004780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004780:	e7fe      	b.n	8004780 <ADC_IRQHandler>
	...

08004784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004788:	4b0e      	ldr	r3, [pc, #56]	; (80047c4 <HAL_Init+0x40>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <HAL_Init+0x40>)
 800478e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004792:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_Init+0x40>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_Init+0x40>)
 800479a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800479e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <HAL_Init+0x40>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <HAL_Init+0x40>)
 80047a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ac:	2003      	movs	r0, #3
 80047ae:	f000 fd51 	bl	8005254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047b2:	2000      	movs	r0, #0
 80047b4:	f000 f808 	bl	80047c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047b8:	f7ff fb92 	bl	8003ee0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023c00 	.word	0x40023c00

080047c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047d0:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_InitTick+0x54>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b12      	ldr	r3, [pc, #72]	; (8004820 <HAL_InitTick+0x58>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	4619      	mov	r1, r3
 80047da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047de:	fbb3 f3f1 	udiv	r3, r3, r1
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fd69 	bl	80052be <HAL_SYSTICK_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e00e      	b.n	8004814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d80a      	bhi.n	8004812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047fc:	2200      	movs	r2, #0
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	f04f 30ff 	mov.w	r0, #4294967295
 8004804:	f000 fd31 	bl	800526a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004808:	4a06      	ldr	r2, [pc, #24]	; (8004824 <HAL_InitTick+0x5c>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	2000021c 	.word	0x2000021c
 8004820:	20000224 	.word	0x20000224
 8004824:	20000220 	.word	0x20000220

08004828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800482c:	4b06      	ldr	r3, [pc, #24]	; (8004848 <HAL_IncTick+0x20>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	4b06      	ldr	r3, [pc, #24]	; (800484c <HAL_IncTick+0x24>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4413      	add	r3, r2
 8004838:	4a04      	ldr	r2, [pc, #16]	; (800484c <HAL_IncTick+0x24>)
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000224 	.word	0x20000224
 800484c:	200010b0 	.word	0x200010b0

08004850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  return uwTick;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_GetTick+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	200010b0 	.word	0x200010b0

08004868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004870:	f7ff ffee 	bl	8004850 <HAL_GetTick>
 8004874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d005      	beq.n	800488e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <HAL_Delay+0x44>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800488e:	bf00      	nop
 8004890:	f7ff ffde 	bl	8004850 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	429a      	cmp	r2, r3
 800489e:	d8f7      	bhi.n	8004890 <HAL_Delay+0x28>
  {
  }
}
 80048a0:	bf00      	nop
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000224 	.word	0x20000224

080048b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e033      	b.n	800492e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fb2e 	bl	8003f30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d118      	bne.n	8004920 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048f6:	f023 0302 	bic.w	r3, r3, #2
 80048fa:	f043 0202 	orr.w	r2, r3, #2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa58 	bl	8004db8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	f043 0201 	orr.w	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
 800491e:	e001      	b.n	8004924 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800492c:	7bfb      	ldrb	r3, [r7, #15]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADC_Start_DMA+0x1e>
 8004952:	2302      	movs	r3, #2
 8004954:	e0ce      	b.n	8004af4 <HAL_ADC_Start_DMA+0x1bc>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d018      	beq.n	800499e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800497c:	4b5f      	ldr	r3, [pc, #380]	; (8004afc <HAL_ADC_Start_DMA+0x1c4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5f      	ldr	r2, [pc, #380]	; (8004b00 <HAL_ADC_Start_DMA+0x1c8>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0c9a      	lsrs	r2, r3, #18
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004990:	e002      	b.n	8004998 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3b01      	subs	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ac:	d107      	bne.n	80049be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	f040 8086 	bne.w	8004ada <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a0c:	d106      	bne.n	8004a1c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f023 0206 	bic.w	r2, r3, #6
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
 8004a1a:	e002      	b.n	8004a22 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a2a:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_ADC_Start_DMA+0x1cc>)
 8004a2c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <HAL_ADC_Start_DMA+0x1d0>)
 8004a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_ADC_Start_DMA+0x1d4>)
 8004a3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	4a33      	ldr	r2, [pc, #204]	; (8004b10 <HAL_ADC_Start_DMA+0x1d8>)
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a4e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004a5e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a6e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	334c      	adds	r3, #76	; 0x4c
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f000 fcd8 	bl	8005434 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 031f 	and.w	r3, r3, #31
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10f      	bne.n	8004ab0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d129      	bne.n	8004af2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004aac:	609a      	str	r2, [r3, #8]
 8004aae:	e020      	b.n	8004af2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a17      	ldr	r2, [pc, #92]	; (8004b14 <HAL_ADC_Start_DMA+0x1dc>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d11b      	bne.n	8004af2 <HAL_ADC_Start_DMA+0x1ba>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d114      	bne.n	8004af2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	e00b      	b.n	8004af2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f043 0210 	orr.w	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f043 0201 	orr.w	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2000021c 	.word	0x2000021c
 8004b00:	431bde83 	.word	0x431bde83
 8004b04:	40012300 	.word	0x40012300
 8004b08:	08004fb1 	.word	0x08004fb1
 8004b0c:	0800506b 	.word	0x0800506b
 8004b10:	08005087 	.word	0x08005087
 8004b14:	40012000 	.word	0x40012000

08004b18 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x1c>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e113      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x244>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d925      	bls.n	8004bcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4613      	mov	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	3b1e      	subs	r3, #30
 8004b96:	2207      	movs	r2, #7
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	43da      	mvns	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	4603      	mov	r3, r0
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	4403      	add	r3, r0
 8004bbe:	3b1e      	subs	r3, #30
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e022      	b.n	8004c12 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4613      	mov	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4413      	add	r3, r2
 8004be0:	2207      	movs	r2, #7
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43da      	mvns	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	400a      	ands	r2, r1
 8004bee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6919      	ldr	r1, [r3, #16]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4618      	mov	r0, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	4403      	add	r3, r0
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b06      	cmp	r3, #6
 8004c18:	d824      	bhi.n	8004c64 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	3b05      	subs	r3, #5
 8004c2c:	221f      	movs	r2, #31
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43da      	mvns	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	400a      	ands	r2, r1
 8004c3a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4618      	mov	r0, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	3b05      	subs	r3, #5
 8004c56:	fa00 f203 	lsl.w	r2, r0, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34
 8004c62:	e04c      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	d824      	bhi.n	8004cb6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3b23      	subs	r3, #35	; 0x23
 8004c7e:	221f      	movs	r2, #31
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43da      	mvns	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	400a      	ands	r2, r1
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3b23      	subs	r3, #35	; 0x23
 8004ca8:	fa00 f203 	lsl.w	r2, r0, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004cb4:	e023      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	3b41      	subs	r3, #65	; 0x41
 8004cc8:	221f      	movs	r2, #31
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	3b41      	subs	r3, #65	; 0x41
 8004cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cfe:	4b29      	ldr	r3, [pc, #164]	; (8004da4 <HAL_ADC_ConfigChannel+0x250>)
 8004d00:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a28      	ldr	r2, [pc, #160]	; (8004da8 <HAL_ADC_ConfigChannel+0x254>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10f      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x1d8>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2b12      	cmp	r3, #18
 8004d12:	d10b      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1d      	ldr	r2, [pc, #116]	; (8004da8 <HAL_ADC_ConfigChannel+0x254>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d12b      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x23a>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_ADC_ConfigChannel+0x258>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <HAL_ADC_ConfigChannel+0x1f4>
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b11      	cmp	r3, #17
 8004d46:	d122      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a11      	ldr	r2, [pc, #68]	; (8004dac <HAL_ADC_ConfigChannel+0x258>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d111      	bne.n	8004d8e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d6a:	4b11      	ldr	r3, [pc, #68]	; (8004db0 <HAL_ADC_ConfigChannel+0x25c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a11      	ldr	r2, [pc, #68]	; (8004db4 <HAL_ADC_ConfigChannel+0x260>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	0c9a      	lsrs	r2, r3, #18
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d80:	e002      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f9      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	40012300 	.word	0x40012300
 8004da8:	40012000 	.word	0x40012000
 8004dac:	10000012 	.word	0x10000012
 8004db0:	2000021c 	.word	0x2000021c
 8004db4:	431bde83 	.word	0x431bde83

08004db8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dc0:	4b79      	ldr	r3, [pc, #484]	; (8004fa8 <ADC_Init+0x1f0>)
 8004dc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	021a      	lsls	r2, r3, #8
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6899      	ldr	r1, [r3, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	4a58      	ldr	r2, [pc, #352]	; (8004fac <ADC_Init+0x1f4>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d022      	beq.n	8004e96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6899      	ldr	r1, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	e00f      	b.n	8004eb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0202 	bic.w	r2, r2, #2
 8004ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6899      	ldr	r1, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	7e1b      	ldrb	r3, [r3, #24]
 8004ed0:	005a      	lsls	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01b      	beq.n	8004f1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004f02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	035a      	lsls	r2, r3, #13
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
 8004f1a:	e007      	b.n	8004f2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	051a      	lsls	r2, r3, #20
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	6899      	ldr	r1, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f6e:	025a      	lsls	r2, r3, #9
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6899      	ldr	r1, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	029a      	lsls	r2, r3, #10
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40012300 	.word	0x40012300
 8004fac:	0f000001 	.word	0x0f000001

08004fb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d13c      	bne.n	8005044 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d12b      	bne.n	800503c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d127      	bne.n	800503c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d006      	beq.n	8005008 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005004:	2b00      	cmp	r3, #0
 8005006:	d119      	bne.n	800503c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0220 	bic.w	r2, r2, #32
 8005016:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d105      	bne.n	800503c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	f043 0201 	orr.w	r2, r3, #1
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff fd6b 	bl	8004b18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005042:	e00e      	b.n	8005062 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff fd75 	bl	8004b40 <HAL_ADC_ErrorCallback>
}
 8005056:	e004      	b.n	8005062 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	4798      	blx	r3
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fd57 	bl	8004b2c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005092:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f043 0204 	orr.w	r2, r3, #4
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff fd4a 	bl	8004b40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <__NVIC_SetPriorityGrouping+0x44>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050e6:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <__NVIC_SetPriorityGrouping+0x44>)
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	60d3      	str	r3, [r2, #12]
}
 80050ec:	bf00      	nop
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <__NVIC_GetPriorityGrouping+0x18>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	0a1b      	lsrs	r3, r3, #8
 8005106:	f003 0307 	and.w	r3, r3, #7
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db0b      	blt.n	8005142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	f003 021f 	and.w	r2, r3, #31
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <__NVIC_EnableIRQ+0x38>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2001      	movs	r0, #1
 800513a:	fa00 f202 	lsl.w	r2, r0, r2
 800513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100

08005154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db0a      	blt.n	800517e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <__NVIC_SetPriority+0x4c>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	440b      	add	r3, r1
 8005178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800517c:	e00a      	b.n	8005194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4908      	ldr	r1, [pc, #32]	; (80051a4 <__NVIC_SetPriority+0x50>)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3b04      	subs	r3, #4
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	440b      	add	r3, r1
 8005192:	761a      	strb	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000e100 	.word	0xe000e100
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b089      	sub	sp, #36	; 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f1c3 0307 	rsb	r3, r3, #7
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	bf28      	it	cs
 80051c6:	2304      	movcs	r3, #4
 80051c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d902      	bls.n	80051d8 <NVIC_EncodePriority+0x30>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3b03      	subs	r3, #3
 80051d6:	e000      	b.n	80051da <NVIC_EncodePriority+0x32>
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051dc:	f04f 32ff 	mov.w	r2, #4294967295
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43da      	mvns	r2, r3
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	401a      	ands	r2, r3
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f0:	f04f 31ff 	mov.w	r1, #4294967295
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	43d9      	mvns	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	4313      	orrs	r3, r2
         );
}
 8005202:	4618      	mov	r0, r3
 8005204:	3724      	adds	r7, #36	; 0x24
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3b01      	subs	r3, #1
 800521c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005220:	d301      	bcc.n	8005226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005222:	2301      	movs	r3, #1
 8005224:	e00f      	b.n	8005246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <SysTick_Config+0x40>)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800522e:	210f      	movs	r1, #15
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	f7ff ff8e 	bl	8005154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <SysTick_Config+0x40>)
 800523a:	2200      	movs	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <SysTick_Config+0x40>)
 8005240:	2207      	movs	r2, #7
 8005242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	e000e010 	.word	0xe000e010

08005254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f7ff ff29 	bl	80050b4 <__NVIC_SetPriorityGrouping>
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	4603      	mov	r3, r0
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800527c:	f7ff ff3e 	bl	80050fc <__NVIC_GetPriorityGrouping>
 8005280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	6978      	ldr	r0, [r7, #20]
 8005288:	f7ff ff8e 	bl	80051a8 <NVIC_EncodePriority>
 800528c:	4602      	mov	r2, r0
 800528e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f7ff ff5d 	bl	8005154 <__NVIC_SetPriority>
}
 800529a:	bf00      	nop
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	4603      	mov	r3, r0
 80052aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff ff31 	bl	8005118 <__NVIC_EnableIRQ>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff ffa2 	bl	8005210 <SysTick_Config>
 80052cc:	4603      	mov	r3, r0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80052e4:	f7ff fab4 	bl	8004850 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e099      	b.n	8005428 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0201 	bic.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005314:	e00f      	b.n	8005336 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005316:	f7ff fa9b 	bl	8004850 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b05      	cmp	r3, #5
 8005322:	d908      	bls.n	8005336 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2203      	movs	r2, #3
 800532e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e078      	b.n	8005428 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e8      	bne.n	8005316 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4b38      	ldr	r3, [pc, #224]	; (8005430 <HAL_DMA_Init+0x158>)
 8005350:	4013      	ands	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005362:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800536e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	4313      	orrs	r3, r2
 8005386:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	2b04      	cmp	r3, #4
 800538e:	d107      	bne.n	80053a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	4313      	orrs	r3, r2
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d117      	bne.n	80053fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fb1b 	bl	8005a18 <DMA_CheckFifoParam>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2240      	movs	r2, #64	; 0x40
 80053ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80053f6:	2301      	movs	r3, #1
 80053f8:	e016      	b.n	8005428 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fad2 	bl	80059ac <DMA_CalcBaseAndBitshift>
 8005408:	4603      	mov	r3, r0
 800540a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005410:	223f      	movs	r2, #63	; 0x3f
 8005412:	409a      	lsls	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	f010803f 	.word	0xf010803f

08005434 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_DMA_Start_IT+0x26>
 8005456:	2302      	movs	r3, #2
 8005458:	e040      	b.n	80054dc <HAL_DMA_Start_IT+0xa8>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	d12f      	bne.n	80054ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2202      	movs	r2, #2
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa64 	bl	8005950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548c:	223f      	movs	r2, #63	; 0x3f
 800548e:	409a      	lsls	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0216 	orr.w	r2, r2, #22
 80054a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	e005      	b.n	80054da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80054d6:	2302      	movs	r3, #2
 80054d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80054f2:	f7ff f9ad 	bl	8004850 <HAL_GetTick>
 80054f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d008      	beq.n	8005516 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2280      	movs	r2, #128	; 0x80
 8005508:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e052      	b.n	80055bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0216 	bic.w	r2, r2, #22
 8005524:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005534:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d103      	bne.n	8005546 <HAL_DMA_Abort+0x62>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0208 	bic.w	r2, r2, #8
 8005554:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0201 	bic.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005566:	e013      	b.n	8005590 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005568:	f7ff f972 	bl	8004850 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b05      	cmp	r3, #5
 8005574:	d90c      	bls.n	8005590 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2203      	movs	r2, #3
 8005580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e015      	b.n	80055bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1e4      	bne.n	8005568 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a2:	223f      	movs	r2, #63	; 0x3f
 80055a4:	409a      	lsls	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d004      	beq.n	80055e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e00c      	b.n	80055fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2205      	movs	r2, #5
 80055e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005614:	4b8e      	ldr	r3, [pc, #568]	; (8005850 <HAL_DMA_IRQHandler+0x248>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a8e      	ldr	r2, [pc, #568]	; (8005854 <HAL_DMA_IRQHandler+0x24c>)
 800561a:	fba2 2303 	umull	r2, r3, r2, r3
 800561e:	0a9b      	lsrs	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	2208      	movs	r2, #8
 8005634:	409a      	lsls	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4013      	ands	r3, r2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01a      	beq.n	8005674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0204 	bic.w	r2, r2, #4
 800565a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005660:	2208      	movs	r2, #8
 8005662:	409a      	lsls	r2, r3
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566c:	f043 0201 	orr.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	2201      	movs	r2, #1
 800567a:	409a      	lsls	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4013      	ands	r3, r2
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005696:	2201      	movs	r2, #1
 8005698:	409a      	lsls	r2, r3
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	f043 0202 	orr.w	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	2204      	movs	r2, #4
 80056b0:	409a      	lsls	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d012      	beq.n	80056e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0302 	and.w	r3, r3, #2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056cc:	2204      	movs	r2, #4
 80056ce:	409a      	lsls	r2, r3
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e4:	2210      	movs	r2, #16
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d043      	beq.n	8005778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d03c      	beq.n	8005778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005702:	2210      	movs	r2, #16
 8005704:	409a      	lsls	r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d018      	beq.n	800574a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d108      	bne.n	8005738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b00      	cmp	r3, #0
 800572c:	d024      	beq.n	8005778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	4798      	blx	r3
 8005736:	e01f      	b.n	8005778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
 8005748:	e016      	b.n	8005778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005754:	2b00      	cmp	r3, #0
 8005756:	d107      	bne.n	8005768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0208 	bic.w	r2, r2, #8
 8005766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577c:	2220      	movs	r2, #32
 800577e:	409a      	lsls	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4013      	ands	r3, r2
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 808f 	beq.w	80058a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8087 	beq.w	80058a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800579e:	2220      	movs	r2, #32
 80057a0:	409a      	lsls	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d136      	bne.n	8005820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0216 	bic.w	r2, r2, #22
 80057c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <HAL_DMA_IRQHandler+0x1da>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0208 	bic.w	r2, r2, #8
 80057f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	223f      	movs	r2, #63	; 0x3f
 80057f8:	409a      	lsls	r2, r3
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005812:	2b00      	cmp	r3, #0
 8005814:	d07e      	beq.n	8005914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
        }
        return;
 800581e:	e079      	b.n	8005914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d01d      	beq.n	800586a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10d      	bne.n	8005858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	2b00      	cmp	r3, #0
 8005842:	d031      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
 800584c:	e02c      	b.n	80058a8 <HAL_DMA_IRQHandler+0x2a0>
 800584e:	bf00      	nop
 8005850:	2000021c 	.word	0x2000021c
 8005854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585c:	2b00      	cmp	r3, #0
 800585e:	d023      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
 8005868:	e01e      	b.n	80058a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0210 	bic.w	r2, r2, #16
 8005886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d032      	beq.n	8005916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d022      	beq.n	8005902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2205      	movs	r2, #5
 80058c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d307      	bcc.n	80058f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f2      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x2cc>
 80058ee:	e000      	b.n	80058f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80058f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d005      	beq.n	8005916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
 8005912:	e000      	b.n	8005916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005914:	bf00      	nop
    }
  }
}
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800592a:	b2db      	uxtb	r3, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	607a      	str	r2, [r7, #4]
 800595c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800596c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b40      	cmp	r3, #64	; 0x40
 800597c:	d108      	bne.n	8005990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800598e:	e007      	b.n	80059a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	60da      	str	r2, [r3, #12]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	3b10      	subs	r3, #16
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <DMA_CalcBaseAndBitshift+0x64>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <DMA_CalcBaseAndBitshift+0x68>)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d909      	bls.n	80059ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	659a      	str	r2, [r3, #88]	; 0x58
 80059ec:	e007      	b.n	80059fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80059f6:	f023 0303 	bic.w	r3, r3, #3
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	aaaaaaab 	.word	0xaaaaaaab
 8005a14:	08010058 	.word	0x08010058

08005a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d11f      	bne.n	8005a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d856      	bhi.n	8005ae6 <DMA_CheckFifoParam+0xce>
 8005a38:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <DMA_CheckFifoParam+0x28>)
 8005a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3e:	bf00      	nop
 8005a40:	08005a51 	.word	0x08005a51
 8005a44:	08005a63 	.word	0x08005a63
 8005a48:	08005a51 	.word	0x08005a51
 8005a4c:	08005ae7 	.word	0x08005ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d046      	beq.n	8005aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a60:	e043      	b.n	8005aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a6a:	d140      	bne.n	8005aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a70:	e03d      	b.n	8005aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a7a:	d121      	bne.n	8005ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d837      	bhi.n	8005af2 <DMA_CheckFifoParam+0xda>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <DMA_CheckFifoParam+0x70>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005a9f 	.word	0x08005a9f
 8005a90:	08005a99 	.word	0x08005a99
 8005a94:	08005ab1 	.word	0x08005ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a9c:	e030      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d025      	beq.n	8005af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aae:	e022      	b.n	8005af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ab8:	d11f      	bne.n	8005afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005abe:	e01c      	b.n	8005afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d903      	bls.n	8005ace <DMA_CheckFifoParam+0xb6>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d003      	beq.n	8005ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005acc:	e018      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad2:	e015      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ae4:	e00b      	b.n	8005afe <DMA_CheckFifoParam+0xe6>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e00a      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;
 8005aea:	bf00      	nop
 8005aec:	e008      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;
 8005aee:	bf00      	nop
 8005af0:	e006      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;
 8005af2:	bf00      	nop
 8005af4:	e004      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;
 8005af6:	bf00      	nop
 8005af8:	e002      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
      break;
 8005afe:	bf00      	nop
    }
  } 
  
  return status; 
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop

08005b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b089      	sub	sp, #36	; 0x24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b22:	2300      	movs	r3, #0
 8005b24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	e159      	b.n	8005de0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	f040 8148 	bne.w	8005dda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d005      	beq.n	8005b62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d130      	bne.n	8005bc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005b      	lsls	r3, r3, #1
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43db      	mvns	r3, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4013      	ands	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b98:	2201      	movs	r2, #1
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	69ba      	ldr	r2, [r7, #24]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	091b      	lsrs	r3, r3, #4
 8005bae:	f003 0201 	and.w	r2, r3, #1
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b03      	cmp	r3, #3
 8005bce:	d017      	beq.n	8005c00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	2203      	movs	r2, #3
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d123      	bne.n	8005c54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	08da      	lsrs	r2, r3, #3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	3208      	adds	r2, #8
 8005c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	220f      	movs	r2, #15
 8005c24:	fa02 f303 	lsl.w	r3, r2, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	691a      	ldr	r2, [r3, #16]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	08da      	lsrs	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3208      	adds	r2, #8
 8005c4e:	69b9      	ldr	r1, [r7, #24]
 8005c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	2203      	movs	r2, #3
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f003 0203 	and.w	r2, r3, #3
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a2 	beq.w	8005dda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
 8005c9a:	4b57      	ldr	r3, [pc, #348]	; (8005df8 <HAL_GPIO_Init+0x2e8>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	4a56      	ldr	r2, [pc, #344]	; (8005df8 <HAL_GPIO_Init+0x2e8>)
 8005ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ca6:	4b54      	ldr	r3, [pc, #336]	; (8005df8 <HAL_GPIO_Init+0x2e8>)
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cb2:	4a52      	ldr	r2, [pc, #328]	; (8005dfc <HAL_GPIO_Init+0x2ec>)
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	089b      	lsrs	r3, r3, #2
 8005cb8:	3302      	adds	r3, #2
 8005cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	220f      	movs	r2, #15
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a49      	ldr	r2, [pc, #292]	; (8005e00 <HAL_GPIO_Init+0x2f0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d019      	beq.n	8005d12 <HAL_GPIO_Init+0x202>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a48      	ldr	r2, [pc, #288]	; (8005e04 <HAL_GPIO_Init+0x2f4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_GPIO_Init+0x1fe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a47      	ldr	r2, [pc, #284]	; (8005e08 <HAL_GPIO_Init+0x2f8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_GPIO_Init+0x1fa>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a46      	ldr	r2, [pc, #280]	; (8005e0c <HAL_GPIO_Init+0x2fc>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d007      	beq.n	8005d06 <HAL_GPIO_Init+0x1f6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a45      	ldr	r2, [pc, #276]	; (8005e10 <HAL_GPIO_Init+0x300>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d101      	bne.n	8005d02 <HAL_GPIO_Init+0x1f2>
 8005cfe:	2304      	movs	r3, #4
 8005d00:	e008      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d02:	2307      	movs	r3, #7
 8005d04:	e006      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d06:	2303      	movs	r3, #3
 8005d08:	e004      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e002      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_GPIO_Init+0x204>
 8005d12:	2300      	movs	r3, #0
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	f002 0203 	and.w	r2, r2, #3
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	4093      	lsls	r3, r2
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d24:	4935      	ldr	r1, [pc, #212]	; (8005dfc <HAL_GPIO_Init+0x2ec>)
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	089b      	lsrs	r3, r3, #2
 8005d2a:	3302      	adds	r3, #2
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4013      	ands	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d56:	4a2f      	ldr	r2, [pc, #188]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d003      	beq.n	8005d80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d80:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d86:	4b23      	ldr	r3, [pc, #140]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4013      	ands	r3, r2
 8005d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d003      	beq.n	8005daa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005db0:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005dd4:	4a0f      	ldr	r2, [pc, #60]	; (8005e14 <HAL_GPIO_Init+0x304>)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	f67f aea2 	bls.w	8005b2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	3724      	adds	r7, #36	; 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40013800 	.word	0x40013800
 8005e00:	40020000 	.word	0x40020000
 8005e04:	40020400 	.word	0x40020400
 8005e08:	40020800 	.word	0x40020800
 8005e0c:	40020c00 	.word	0x40020c00
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40013c00 	.word	0x40013c00

08005e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	887b      	ldrh	r3, [r7, #2]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e30:	2301      	movs	r3, #1
 8005e32:	73fb      	strb	r3, [r7, #15]
 8005e34:	e001      	b.n	8005e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
 8005e54:	4613      	mov	r3, r2
 8005e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e58:	787b      	ldrb	r3, [r7, #1]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e64:	e003      	b.n	8005e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e66:	887b      	ldrh	r3, [r7, #2]
 8005e68:	041a      	lsls	r2, r3, #16
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	619a      	str	r2, [r3, #24]
}
 8005e6e:	bf00      	nop
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
	...

08005e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e12b      	b.n	80060e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fe f8bc 	bl	8004020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2224      	movs	r2, #36	; 0x24
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005ee0:	f002 fa5c 	bl	800839c <HAL_RCC_GetPCLK1Freq>
 8005ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	4a81      	ldr	r2, [pc, #516]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d807      	bhi.n	8005f00 <HAL_I2C_Init+0x84>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a80      	ldr	r2, [pc, #512]	; (80060f4 <HAL_I2C_Init+0x278>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	bf94      	ite	ls
 8005ef8:	2301      	movls	r3, #1
 8005efa:	2300      	movhi	r3, #0
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	e006      	b.n	8005f0e <HAL_I2C_Init+0x92>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a7d      	ldr	r2, [pc, #500]	; (80060f8 <HAL_I2C_Init+0x27c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bf94      	ite	ls
 8005f08:	2301      	movls	r3, #1
 8005f0a:	2300      	movhi	r3, #0
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0e7      	b.n	80060e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a78      	ldr	r2, [pc, #480]	; (80060fc <HAL_I2C_Init+0x280>)
 8005f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1e:	0c9b      	lsrs	r3, r3, #18
 8005f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a6a      	ldr	r2, [pc, #424]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d802      	bhi.n	8005f50 <HAL_I2C_Init+0xd4>
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	e009      	b.n	8005f64 <HAL_I2C_Init+0xe8>
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	4a69      	ldr	r2, [pc, #420]	; (8006100 <HAL_I2C_Init+0x284>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	099b      	lsrs	r3, r3, #6
 8005f62:	3301      	adds	r3, #1
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	430b      	orrs	r3, r1
 8005f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	495c      	ldr	r1, [pc, #368]	; (80060f0 <HAL_I2C_Init+0x274>)
 8005f80:	428b      	cmp	r3, r1
 8005f82:	d819      	bhi.n	8005fb8 <HAL_I2C_Init+0x13c>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1e59      	subs	r1, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f92:	1c59      	adds	r1, r3, #1
 8005f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f98:	400b      	ands	r3, r1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <HAL_I2C_Init+0x138>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1e59      	subs	r1, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fac:	3301      	adds	r3, #1
 8005fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb2:	e051      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	e04f      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d111      	bne.n	8005fe4 <HAL_I2C_Init+0x168>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	1e58      	subs	r0, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	440b      	add	r3, r1
 8005fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bf0c      	ite	eq
 8005fdc:	2301      	moveq	r3, #1
 8005fde:	2300      	movne	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e012      	b.n	800600a <HAL_I2C_Init+0x18e>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	1e58      	subs	r0, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6859      	ldr	r1, [r3, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	0099      	lsls	r1, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <HAL_I2C_Init+0x196>
 800600e:	2301      	movs	r3, #1
 8006010:	e022      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <HAL_I2C_Init+0x1bc>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1e58      	subs	r0, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6859      	ldr	r1, [r3, #4]
 8006022:	460b      	mov	r3, r1
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	440b      	add	r3, r1
 8006028:	fbb0 f3f3 	udiv	r3, r0, r3
 800602c:	3301      	adds	r3, #1
 800602e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006036:	e00f      	b.n	8006058 <HAL_I2C_Init+0x1dc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	1e58      	subs	r0, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6859      	ldr	r1, [r3, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	0099      	lsls	r1, r3, #2
 8006048:	440b      	add	r3, r1
 800604a:	fbb0 f3f3 	udiv	r3, r0, r3
 800604e:	3301      	adds	r3, #1
 8006050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	6809      	ldr	r1, [r1, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69da      	ldr	r2, [r3, #28]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6911      	ldr	r1, [r2, #16]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	68d2      	ldr	r2, [r2, #12]
 8006092:	4311      	orrs	r1, r2
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	430b      	orrs	r3, r1
 800609a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	000186a0 	.word	0x000186a0
 80060f4:	001e847f 	.word	0x001e847f
 80060f8:	003d08ff 	.word	0x003d08ff
 80060fc:	431bde83 	.word	0x431bde83
 8006100:	10624dd3 	.word	0x10624dd3

08006104 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b088      	sub	sp, #32
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006124:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800612e:	7bfb      	ldrb	r3, [r7, #15]
 8006130:	2b10      	cmp	r3, #16
 8006132:	d003      	beq.n	800613c <HAL_I2C_EV_IRQHandler+0x38>
 8006134:	7bfb      	ldrb	r3, [r7, #15]
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	f040 80c1 	bne.w	80062be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10d      	bne.n	8006172 <HAL_I2C_EV_IRQHandler+0x6e>
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800615c:	d003      	beq.n	8006166 <HAL_I2C_EV_IRQHandler+0x62>
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006164:	d101      	bne.n	800616a <HAL_I2C_EV_IRQHandler+0x66>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <HAL_I2C_EV_IRQHandler+0x68>
 800616a:	2300      	movs	r3, #0
 800616c:	2b01      	cmp	r3, #1
 800616e:	f000 8132 	beq.w	80063d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00c      	beq.n	8006196 <HAL_I2C_EV_IRQHandler+0x92>
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	0a5b      	lsrs	r3, r3, #9
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fc7b 	bl	8007a84 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fd83 	bl	8006c9a <I2C_Master_SB>
 8006194:	e092      	b.n	80062bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	08db      	lsrs	r3, r3, #3
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	0a5b      	lsrs	r3, r3, #9
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fdf9 	bl	8006da6 <I2C_Master_ADD10>
 80061b4:	e082      	b.n	80062bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	085b      	lsrs	r3, r3, #1
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	0a5b      	lsrs	r3, r3, #9
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fe13 	bl	8006dfa <I2C_Master_ADDR>
 80061d4:	e072      	b.n	80062bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	089b      	lsrs	r3, r3, #2
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d03b      	beq.n	800625a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	f000 80f3 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	09db      	lsrs	r3, r3, #7
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <HAL_I2C_EV_IRQHandler+0x11c>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	0a9b      	lsrs	r3, r3, #10
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_I2C_EV_IRQHandler+0x11c>
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d103      	bne.n	8006220 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f9f3 	bl	8006604 <I2C_MasterTransmit_TXE>
 800621e:	e04d      	b.n	80062bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80d6 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	f000 80cf 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800623c:	7bbb      	ldrb	r3, [r7, #14]
 800623e:	2b21      	cmp	r3, #33	; 0x21
 8006240:	d103      	bne.n	800624a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fa7a 	bl	800673c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006248:	e0c7      	b.n	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	f040 80c4 	bne.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fae8 	bl	8006828 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006258:	e0bf      	b.n	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006268:	f000 80b7 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	099b      	lsrs	r3, r3, #6
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00f      	beq.n	8006298 <HAL_I2C_EV_IRQHandler+0x194>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	0a9b      	lsrs	r3, r3, #10
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d009      	beq.n	8006298 <HAL_I2C_EV_IRQHandler+0x194>
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b00      	cmp	r3, #0
 800628e:	d103      	bne.n	8006298 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fb5d 	bl	8006950 <I2C_MasterReceive_RXNE>
 8006296:	e011      	b.n	80062bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	089b      	lsrs	r3, r3, #2
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 809a 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	0a5b      	lsrs	r3, r3, #9
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f000 8093 	beq.w	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 fc06 	bl	8006ac6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062ba:	e08e      	b.n	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
 80062bc:	e08d      	b.n	80063da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d004      	beq.n	80062d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	e007      	b.n	80062e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d012      	beq.n	8006312 <HAL_I2C_EV_IRQHandler+0x20e>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	0a5b      	lsrs	r3, r3, #9
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00c      	beq.n	8006312 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006308:	69b9      	ldr	r1, [r7, #24]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 ffc4 	bl	8007298 <I2C_Slave_ADDR>
 8006310:	e066      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	091b      	lsrs	r3, r3, #4
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <HAL_I2C_EV_IRQHandler+0x22e>
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	0a5b      	lsrs	r3, r3, #9
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fffe 	bl	800732c <I2C_Slave_STOPF>
 8006330:	e056      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	2b21      	cmp	r3, #33	; 0x21
 8006336:	d002      	beq.n	800633e <HAL_I2C_EV_IRQHandler+0x23a>
 8006338:	7bbb      	ldrb	r3, [r7, #14]
 800633a:	2b29      	cmp	r3, #41	; 0x29
 800633c:	d125      	bne.n	800638a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	09db      	lsrs	r3, r3, #7
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00f      	beq.n	800636a <HAL_I2C_EV_IRQHandler+0x266>
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	0a9b      	lsrs	r3, r3, #10
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_I2C_EV_IRQHandler+0x266>
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	089b      	lsrs	r3, r3, #2
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d103      	bne.n	800636a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 feda 	bl	800711c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006368:	e039      	b.n	80063de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d033      	beq.n	80063de <HAL_I2C_EV_IRQHandler+0x2da>
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	0a5b      	lsrs	r3, r3, #9
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d02d      	beq.n	80063de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 ff07 	bl	8007196 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006388:	e029      	b.n	80063de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	099b      	lsrs	r3, r3, #6
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00f      	beq.n	80063b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	0a9b      	lsrs	r3, r3, #10
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d009      	beq.n	80063b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d103      	bne.n	80063b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 ff12 	bl	80071d8 <I2C_SlaveReceive_RXNE>
 80063b4:	e014      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	089b      	lsrs	r3, r3, #2
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00e      	beq.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	0a5b      	lsrs	r3, r3, #9
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d008      	beq.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ff40 	bl	8007254 <I2C_SlaveReceive_BTF>
 80063d4:	e004      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80063d6:	bf00      	nop
 80063d8:	e002      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80063da:	bf00      	nop
 80063dc:	e000      	b.n	80063e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80063de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b08a      	sub	sp, #40	; 0x28
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80063fe:	2300      	movs	r3, #0
 8006400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006408:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	0a1b      	lsrs	r3, r3, #8
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00e      	beq.n	8006434 <HAL_I2C_ER_IRQHandler+0x4e>
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	0a1b      	lsrs	r3, r3, #8
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d008      	beq.n	8006434 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	f043 0301 	orr.w	r3, r3, #1
 8006428:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006432:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	0a5b      	lsrs	r3, r3, #9
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00e      	beq.n	800645e <HAL_I2C_ER_IRQHandler+0x78>
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d008      	beq.n	800645e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	f043 0302 	orr.w	r3, r3, #2
 8006452:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800645c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	0a9b      	lsrs	r3, r3, #10
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d03f      	beq.n	80064ea <HAL_I2C_ER_IRQHandler+0x104>
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	0a1b      	lsrs	r3, r3, #8
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	d039      	beq.n	80064ea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006476:	7efb      	ldrb	r3, [r7, #27]
 8006478:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006488:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006490:	7ebb      	ldrb	r3, [r7, #26]
 8006492:	2b20      	cmp	r3, #32
 8006494:	d112      	bne.n	80064bc <HAL_I2C_ER_IRQHandler+0xd6>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10f      	bne.n	80064bc <HAL_I2C_ER_IRQHandler+0xd6>
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b21      	cmp	r3, #33	; 0x21
 80064a0:	d008      	beq.n	80064b4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
 80064a4:	2b29      	cmp	r3, #41	; 0x29
 80064a6:	d005      	beq.n	80064b4 <HAL_I2C_ER_IRQHandler+0xce>
 80064a8:	7cfb      	ldrb	r3, [r7, #19]
 80064aa:	2b28      	cmp	r3, #40	; 0x28
 80064ac:	d106      	bne.n	80064bc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b21      	cmp	r3, #33	; 0x21
 80064b2:	d103      	bne.n	80064bc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f869 	bl	800758c <I2C_Slave_AF>
 80064ba:	e016      	b.n	80064ea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	f043 0304 	orr.w	r3, r3, #4
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80064ce:	7efb      	ldrb	r3, [r7, #27]
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d002      	beq.n	80064da <HAL_I2C_ER_IRQHandler+0xf4>
 80064d4:	7efb      	ldrb	r3, [r7, #27]
 80064d6:	2b40      	cmp	r3, #64	; 0x40
 80064d8:	d107      	bne.n	80064ea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	0adb      	lsrs	r3, r3, #11
 80064ee:	f003 0301 	and.w	r3, r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00e      	beq.n	8006514 <HAL_I2C_ER_IRQHandler+0x12e>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	0a1b      	lsrs	r3, r3, #8
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d008      	beq.n	8006514 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	f043 0308 	orr.w	r3, r3, #8
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006512:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d008      	beq.n	800652c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	431a      	orrs	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 f8a0 	bl	800766c <I2C_ITError>
  }
}
 800652c:	bf00      	nop
 800652e:	3728      	adds	r7, #40	; 0x28
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
 8006590:	4613      	mov	r3, r2
 8006592:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800661a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d150      	bne.n	80066cc <I2C_MasterTransmit_TXE+0xc8>
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b21      	cmp	r3, #33	; 0x21
 800662e:	d14d      	bne.n	80066cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b08      	cmp	r3, #8
 8006634:	d01d      	beq.n	8006672 <I2C_MasterTransmit_TXE+0x6e>
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b20      	cmp	r3, #32
 800663a:	d01a      	beq.n	8006672 <I2C_MasterTransmit_TXE+0x6e>
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006642:	d016      	beq.n	8006672 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006652:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2211      	movs	r2, #17
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7ff ff62 	bl	8006534 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006670:	e060      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006680:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006690:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d107      	bne.n	80066bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ff7d 	bl	80065b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066ba:	e03b      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff ff35 	bl	8006534 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066ca:	e033      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b21      	cmp	r3, #33	; 0x21
 80066d0:	d005      	beq.n	80066de <I2C_MasterTransmit_TXE+0xda>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d12d      	bne.n	8006734 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	2b22      	cmp	r3, #34	; 0x22
 80066dc:	d12a      	bne.n	8006734 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d108      	bne.n	80066fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80066f8:	e01c      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d103      	bne.n	800670e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f88e 	bl	8006828 <I2C_MemoryTransmit_TXE_BTF>
}
 800670c:	e012      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006732:	e7ff      	b.n	8006734 <I2C_MasterTransmit_TXE+0x130>
 8006734:	bf00      	nop
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b21      	cmp	r3, #33	; 0x21
 8006754:	d164      	bne.n	8006820 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d012      	beq.n	8006786 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	1c5a      	adds	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677a:	b29b      	uxth	r3, r3
 800677c:	3b01      	subs	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006784:	e04c      	b.n	8006820 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d01d      	beq.n	80067c8 <I2C_MasterTransmit_BTF+0x8c>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b20      	cmp	r3, #32
 8006790:	d01a      	beq.n	80067c8 <I2C_MasterTransmit_BTF+0x8c>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006798:	d016      	beq.n	80067c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2211      	movs	r2, #17
 80067ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f7ff feb7 	bl	8006534 <HAL_I2C_MasterTxCpltCallback>
}
 80067c6:	e02b      	b.n	8006820 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b40      	cmp	r3, #64	; 0x40
 8006800:	d107      	bne.n	8006812 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fed2 	bl	80065b4 <HAL_I2C_MemTxCpltCallback>
}
 8006810:	e006      	b.n	8006820 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fe8a 	bl	8006534 <HAL_I2C_MasterTxCpltCallback>
}
 8006820:	bf00      	nop
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683c:	2b00      	cmp	r3, #0
 800683e:	d11d      	bne.n	800687c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d10b      	bne.n	8006860 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684c:	b2da      	uxtb	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800685e:	e073      	b.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006864:	b29b      	uxth	r3, r3
 8006866:	121b      	asrs	r3, r3, #8
 8006868:	b2da      	uxtb	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	651a      	str	r2, [r3, #80]	; 0x50
}
 800687a:	e065      	b.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006880:	2b01      	cmp	r3, #1
 8006882:	d10b      	bne.n	800689c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	b2da      	uxtb	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	651a      	str	r2, [r3, #80]	; 0x50
}
 800689a:	e055      	b.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d151      	bne.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	d10d      	bne.n	80068c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80068c4:	e040      	b.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d015      	beq.n	80068fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b21      	cmp	r3, #33	; 0x21
 80068d4:	d112      	bne.n	80068fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068da:	781a      	ldrb	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	1c5a      	adds	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80068fa:	e025      	b.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006900:	b29b      	uxth	r3, r3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d120      	bne.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	2b21      	cmp	r3, #33	; 0x21
 800690a:	d11d      	bne.n	8006948 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800691a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800692a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f7ff fe36 	bl	80065b4 <HAL_I2C_MemTxCpltCallback>
}
 8006948:	bf00      	nop
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b22      	cmp	r3, #34	; 0x22
 8006962:	f040 80ac 	bne.w	8006abe <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b03      	cmp	r3, #3
 8006972:	d921      	bls.n	80069b8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006990:	b29b      	uxth	r3, r3
 8006992:	3b01      	subs	r3, #1
 8006994:	b29a      	uxth	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	f040 808c 	bne.w	8006abe <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80069b6:	e082      	b.n	8006abe <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d075      	beq.n	8006aac <I2C_MasterReceive_RXNE+0x15c>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d002      	beq.n	80069cc <I2C_MasterReceive_RXNE+0x7c>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16f      	bne.n	8006aac <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 f827 	bl	8007a20 <I2C_WaitOnSTOPRequestThroughIT>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d142      	bne.n	8006a5e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e6:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80069f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b40      	cmp	r3, #64	; 0x40
 8006a30:	d10a      	bne.n	8006a48 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff fdc1 	bl	80065c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a46:	e03a      	b.n	8006abe <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2212      	movs	r2, #18
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f7ff fd76 	bl	8006548 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006a5c:	e02f      	b.n	8006abe <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685a      	ldr	r2, [r3, #4]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a6c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	691a      	ldr	r2, [r3, #16]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fd99 	bl	80065dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006aaa:	e008      	b.n	8006abe <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aba:	605a      	str	r2, [r3, #4]
}
 8006abc:	e7ff      	b.n	8006abe <I2C_MasterReceive_RXNE+0x16e>
 8006abe:	bf00      	nop
 8006ac0:	3710      	adds	r7, #16
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b084      	sub	sp, #16
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b04      	cmp	r3, #4
 8006adc:	d11b      	bne.n	8006b16 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aec:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006b14:	e0bd      	b.n	8006c92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d129      	bne.n	8006b74 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d00a      	beq.n	8006b4c <I2C_MasterReceive_BTF+0x86>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d007      	beq.n	8006b4c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b4a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006b72:	e08e      	b.n	8006c92 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d176      	bne.n	8006c6c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d002      	beq.n	8006b8a <I2C_MasterReceive_BTF+0xc4>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b10      	cmp	r3, #16
 8006b88:	d108      	bne.n	8006b9c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e019      	b.n	8006bd0 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2b04      	cmp	r3, #4
 8006ba0:	d002      	beq.n	8006ba8 <I2C_MasterReceive_BTF+0xe2>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d108      	bne.n	8006bba <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e00a      	b.n	8006bd0 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d007      	beq.n	8006bd0 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c2a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b40      	cmp	r3, #64	; 0x40
 8006c3e:	d10a      	bne.n	8006c56 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7ff fcba 	bl	80065c8 <HAL_I2C_MemRxCpltCallback>
}
 8006c54:	e01d      	b.n	8006c92 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2212      	movs	r2, #18
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff fc6f 	bl	8006548 <HAL_I2C_MasterRxCpltCallback>
}
 8006c6a:	e012      	b.n	8006c92 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	b29a      	uxth	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b40      	cmp	r3, #64	; 0x40
 8006cac:	d117      	bne.n	8006cde <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cc6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006cc8:	e067      	b.n	8006d9a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f043 0301 	orr.w	r3, r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	611a      	str	r2, [r3, #16]
}
 8006cdc:	e05d      	b.n	8006d9a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ce6:	d133      	bne.n	8006d50 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b21      	cmp	r3, #33	; 0x21
 8006cf2:	d109      	bne.n	8006d08 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006d04:	611a      	str	r2, [r3, #16]
 8006d06:	e008      	b.n	8006d1a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d004      	beq.n	8006d2c <I2C_Master_SB+0x92>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d032      	beq.n	8006d9a <I2C_Master_SB+0x100>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d02d      	beq.n	8006d9a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d4c:	605a      	str	r2, [r3, #4]
}
 8006d4e:	e024      	b.n	8006d9a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10e      	bne.n	8006d76 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	11db      	asrs	r3, r3, #7
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	f003 0306 	and.w	r3, r3, #6
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f063 030f 	orn	r3, r3, #15
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	611a      	str	r2, [r3, #16]
}
 8006d74:	e011      	b.n	8006d9a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d10d      	bne.n	8006d9a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	11db      	asrs	r3, r3, #7
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 0306 	and.w	r3, r3, #6
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f063 030e 	orn	r3, r3, #14
 8006d92:	b2da      	uxtb	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b083      	sub	sp, #12
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <I2C_Master_ADD10+0x26>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d108      	bne.n	8006dde <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00c      	beq.n	8006dee <I2C_Master_ADD10+0x48>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dec:	605a      	str	r2, [r3, #4]
  }
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b091      	sub	sp, #68	; 0x44
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b22      	cmp	r3, #34	; 0x22
 8006e22:	f040 8169 	bne.w	80070f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <I2C_Master_ADDR+0x54>
 8006e2e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d10b      	bne.n	8006e4e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e36:	2300      	movs	r3, #0
 8006e38:	633b      	str	r3, [r7, #48]	; 0x30
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	633b      	str	r3, [r7, #48]	; 0x30
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	633b      	str	r3, [r7, #48]	; 0x30
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	e160      	b.n	8007110 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11d      	bne.n	8006e92 <I2C_Master_ADDR+0x98>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e5e:	d118      	bne.n	8006e92 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e60:	2300      	movs	r3, #0
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e84:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	651a      	str	r2, [r3, #80]	; 0x50
 8006e90:	e13e      	b.n	8007110 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d113      	bne.n	8006ec4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	e115      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	f040 808a 	bne.w	8006fe4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ed6:	d137      	bne.n	8006f48 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef6:	d113      	bne.n	8006f20 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f06:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	627b      	str	r3, [r7, #36]	; 0x24
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	e0e7      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f20:	2300      	movs	r3, #0
 8006f22:	623b      	str	r3, [r7, #32]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	623b      	str	r3, [r7, #32]
 8006f34:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	e0d3      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d02e      	beq.n	8006fac <I2C_Master_ADDR+0x1b2>
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b20      	cmp	r3, #32
 8006f52:	d02b      	beq.n	8006fac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	2b12      	cmp	r3, #18
 8006f58:	d102      	bne.n	8006f60 <I2C_Master_ADDR+0x166>
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d125      	bne.n	8006fac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d00e      	beq.n	8006f84 <I2C_Master_ADDR+0x18a>
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d00b      	beq.n	8006f84 <I2C_Master_ADDR+0x18a>
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d008      	beq.n	8006f84 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e007      	b.n	8006f94 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f92:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f94:	2300      	movs	r3, #0
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	61fb      	str	r3, [r7, #28]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	e0a1      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	61bb      	str	r3, [r7, #24]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	61bb      	str	r3, [r7, #24]
 8006fd0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e085      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d14d      	bne.n	800708a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	2b04      	cmp	r3, #4
 8006ff2:	d016      	beq.n	8007022 <I2C_Master_ADDR+0x228>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d013      	beq.n	8007022 <I2C_Master_ADDR+0x228>
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b10      	cmp	r3, #16
 8006ffe:	d010      	beq.n	8007022 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e007      	b.n	8007032 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007030:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800703c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007040:	d117      	bne.n	8007072 <I2C_Master_ADDR+0x278>
 8007042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007044:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007048:	d00b      	beq.n	8007062 <I2C_Master_ADDR+0x268>
 800704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704c:	2b01      	cmp	r3, #1
 800704e:	d008      	beq.n	8007062 <I2C_Master_ADDR+0x268>
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	2b08      	cmp	r3, #8
 8007054:	d005      	beq.n	8007062 <I2C_Master_ADDR+0x268>
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	2b10      	cmp	r3, #16
 800705a:	d002      	beq.n	8007062 <I2C_Master_ADDR+0x268>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	2b20      	cmp	r3, #32
 8007060:	d107      	bne.n	8007072 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007070:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	617b      	str	r3, [r7, #20]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	e032      	b.n	80070f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007098:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070a8:	d117      	bne.n	80070da <I2C_Master_ADDR+0x2e0>
 80070aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80070b0:	d00b      	beq.n	80070ca <I2C_Master_ADDR+0x2d0>
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d008      	beq.n	80070ca <I2C_Master_ADDR+0x2d0>
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d005      	beq.n	80070ca <I2C_Master_ADDR+0x2d0>
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d002      	beq.n	80070ca <I2C_Master_ADDR+0x2d0>
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	d107      	bne.n	80070da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070da:	2300      	movs	r3, #0
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80070f6:	e00b      	b.n	8007110 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
}
 800710e:	e7ff      	b.n	8007110 <I2C_Master_ADDR+0x316>
 8007110:	bf00      	nop
 8007112:	3744      	adds	r7, #68	; 0x44
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr

0800711c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007130:	b29b      	uxth	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d02b      	beq.n	800718e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007150:	b29b      	uxth	r3, r3
 8007152:	3b01      	subs	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715e:	b29b      	uxth	r3, r3
 8007160:	2b00      	cmp	r3, #0
 8007162:	d114      	bne.n	800718e <I2C_SlaveTransmit_TXE+0x72>
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	2b29      	cmp	r3, #41	; 0x29
 8007168:	d111      	bne.n	800718e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007178:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2228      	movs	r2, #40	; 0x28
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f7ff f9e7 	bl	800655c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d011      	beq.n	80071cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	781a      	ldrb	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d02c      	beq.n	800724c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691a      	ldr	r2, [r3, #16]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721c:	b29b      	uxth	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d114      	bne.n	800724c <I2C_SlaveReceive_RXNE+0x74>
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	2b2a      	cmp	r3, #42	; 0x2a
 8007226:	d111      	bne.n	800724c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007236:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2222      	movs	r2, #34	; 0x22
 800723c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2228      	movs	r2, #40	; 0x28
 8007242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff f992 	bl	8006570 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800724c:	bf00      	nop
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d012      	beq.n	800728c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80072a2:	2300      	movs	r3, #0
 80072a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80072b2:	2b28      	cmp	r3, #40	; 0x28
 80072b4:	d127      	bne.n	8007306 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	089b      	lsrs	r3, r3, #2
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80072d2:	2301      	movs	r3, #1
 80072d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	09db      	lsrs	r3, r3, #7
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	81bb      	strh	r3, [r7, #12]
 80072e8:	e002      	b.n	80072f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80072f8:	89ba      	ldrh	r2, [r7, #12]
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f940 	bl	8006584 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007304:	e00e      	b.n	8007324 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800734a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800734c:	2300      	movs	r3, #0
 800734e:	60bb      	str	r3, [r7, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007378:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007388:	d172      	bne.n	8007470 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b22      	cmp	r3, #34	; 0x22
 800738e:	d002      	beq.n	8007396 <I2C_Slave_STOPF+0x6a>
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d135      	bne.n	8007402 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe faa4 	bl	800591c <HAL_DMA_GetState>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d049      	beq.n	800746e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	4a69      	ldr	r2, [pc, #420]	; (8007584 <I2C_Slave_STOPF+0x258>)
 80073e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe f8ec 	bl	80055c4 <HAL_DMA_Abort_IT>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d03d      	beq.n	800746e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007400:	e035      	b.n	800746e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	b29a      	uxth	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007434:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fa6e 	bl	800591c <HAL_DMA_GetState>
 8007440:	4603      	mov	r3, r0
 8007442:	2b01      	cmp	r3, #1
 8007444:	d014      	beq.n	8007470 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744a:	4a4e      	ldr	r2, [pc, #312]	; (8007584 <I2C_Slave_STOPF+0x258>)
 800744c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	4618      	mov	r0, r3
 8007454:	f7fe f8b6 	bl	80055c4 <HAL_DMA_Abort_IT>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007468:	4610      	mov	r0, r2
 800746a:	4798      	blx	r3
 800746c:	e000      	b.n	8007470 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800746e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29b      	uxth	r3, r3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d03e      	beq.n	80074f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	695b      	ldr	r3, [r3, #20]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b04      	cmp	r3, #4
 8007486:	d112      	bne.n	80074ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691a      	ldr	r2, [r3, #16]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d112      	bne.n	80074e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d8:	b29b      	uxth	r3, r3
 80074da:	3b01      	subs	r3, #1
 80074dc:	b29a      	uxth	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f043 0204 	orr.w	r2, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f8b3 	bl	800766c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007506:	e039      	b.n	800757c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	2b2a      	cmp	r3, #42	; 0x2a
 800750c:	d109      	bne.n	8007522 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2228      	movs	r2, #40	; 0x28
 8007518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7ff f827 	bl	8006570 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b28      	cmp	r3, #40	; 0x28
 800752c:	d111      	bne.n	8007552 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <I2C_Slave_STOPF+0x25c>)
 8007532:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f7ff f828 	bl	80065a0 <HAL_I2C_ListenCpltCallback>
}
 8007550:	e014      	b.n	800757c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	2b22      	cmp	r3, #34	; 0x22
 8007558:	d002      	beq.n	8007560 <I2C_Slave_STOPF+0x234>
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	2b22      	cmp	r3, #34	; 0x22
 800755e:	d10d      	bne.n	800757c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fe fffa 	bl	8006570 <HAL_I2C_SlaveRxCpltCallback>
}
 800757c:	bf00      	nop
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	080078d1 	.word	0x080078d1
 8007588:	ffff0000 	.word	0xffff0000

0800758c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2b08      	cmp	r3, #8
 80075a6:	d002      	beq.n	80075ae <I2C_Slave_AF+0x22>
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d129      	bne.n	8007602 <I2C_Slave_AF+0x76>
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b28      	cmp	r3, #40	; 0x28
 80075b2:	d126      	bne.n	8007602 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a2c      	ldr	r2, [pc, #176]	; (8007668 <I2C_Slave_AF+0xdc>)
 80075b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fe ffd0 	bl	80065a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007600:	e02e      	b.n	8007660 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b21      	cmp	r3, #33	; 0x21
 8007606:	d126      	bne.n	8007656 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a17      	ldr	r2, [pc, #92]	; (8007668 <I2C_Slave_AF+0xdc>)
 800760c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2221      	movs	r2, #33	; 0x21
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2220      	movs	r2, #32
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	685a      	ldr	r2, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007632:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800763c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7fe ff84 	bl	800655c <HAL_I2C_SlaveTxCpltCallback>
}
 8007654:	e004      	b.n	8007660 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800765e:	615a      	str	r2, [r3, #20]
}
 8007660:	bf00      	nop
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	ffff0000 	.word	0xffff0000

0800766c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800767a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007682:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b10      	cmp	r3, #16
 8007688:	d002      	beq.n	8007690 <I2C_ITError+0x24>
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d10a      	bne.n	80076a6 <I2C_ITError+0x3a>
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b22      	cmp	r3, #34	; 0x22
 8007694:	d107      	bne.n	80076a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076ac:	2b28      	cmp	r3, #40	; 0x28
 80076ae:	d107      	bne.n	80076c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2228      	movs	r2, #40	; 0x28
 80076ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80076be:	e015      	b.n	80076ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ce:	d00a      	beq.n	80076e6 <I2C_ITError+0x7a>
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b60      	cmp	r3, #96	; 0x60
 80076d4:	d007      	beq.n	80076e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076fa:	d162      	bne.n	80077c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800770a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d020      	beq.n	800775c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	4a6a      	ldr	r2, [pc, #424]	; (80078c8 <I2C_ITError+0x25c>)
 8007720:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd ff4c 	bl	80055c4 <HAL_DMA_Abort_IT>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 8089 	beq.w	8007846 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0201 	bic.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007756:	4610      	mov	r0, r2
 8007758:	4798      	blx	r3
 800775a:	e074      	b.n	8007846 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007760:	4a59      	ldr	r2, [pc, #356]	; (80078c8 <I2C_ITError+0x25c>)
 8007762:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	4618      	mov	r0, r3
 800776a:	f7fd ff2b 	bl	80055c4 <HAL_DMA_Abort_IT>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d068      	beq.n	8007846 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d10b      	bne.n	800779a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	b2d2      	uxtb	r2, r2
 800778e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0201 	bic.w	r2, r2, #1
 80077a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2220      	movs	r2, #32
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077bc:	4610      	mov	r0, r2
 80077be:	4798      	blx	r3
 80077c0:	e041      	b.n	8007846 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b60      	cmp	r3, #96	; 0x60
 80077cc:	d125      	bne.n	800781a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d10b      	bne.n	8007802 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f022 0201 	bic.w	r2, r2, #1
 8007810:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7fe feec 	bl	80065f0 <HAL_I2C_AbortCpltCallback>
 8007818:	e015      	b.n	8007846 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b40      	cmp	r3, #64	; 0x40
 8007826:	d10b      	bne.n	8007840 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	b2d2      	uxtb	r2, r2
 8007834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	1c5a      	adds	r2, r3, #1
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe fecb 	bl	80065dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10e      	bne.n	8007874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007882:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800788a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	f003 0304 	and.w	r3, r3, #4
 8007894:	2b04      	cmp	r3, #4
 8007896:	d113      	bne.n	80078c0 <I2C_ITError+0x254>
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b28      	cmp	r3, #40	; 0x28
 800789c:	d110      	bne.n	80078c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a0a      	ldr	r2, [pc, #40]	; (80078cc <I2C_ITError+0x260>)
 80078a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fe fe70 	bl	80065a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	080078d1 	.word	0x080078d1
 80078cc:	ffff0000 	.word	0xffff0000

080078d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80078ea:	4b4b      	ldr	r3, [pc, #300]	; (8007a18 <I2C_DMAAbort+0x148>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	08db      	lsrs	r3, r3, #3
 80078f0:	4a4a      	ldr	r2, [pc, #296]	; (8007a1c <I2C_DMAAbort+0x14c>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	0a1a      	lsrs	r2, r3, #8
 80078f8:	4613      	mov	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	00da      	lsls	r2, r3, #3
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007916:	e00a      	b.n	800792e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3b01      	subs	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792c:	d0ea      	beq.n	8007904 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793a:	2200      	movs	r2, #0
 800793c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	2200      	movs	r2, #0
 800794c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2200      	movs	r2, #0
 8007962:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007970:	2200      	movs	r2, #0
 8007972:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007980:	2200      	movs	r2, #0
 8007982:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f022 0201 	bic.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b60      	cmp	r3, #96	; 0x60
 800799e:	d10e      	bne.n	80079be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079b6:	6978      	ldr	r0, [r7, #20]
 80079b8:	f7fe fe1a 	bl	80065f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079bc:	e027      	b.n	8007a0e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079be:	7cfb      	ldrb	r3, [r7, #19]
 80079c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079c4:	2b28      	cmp	r3, #40	; 0x28
 80079c6:	d117      	bne.n	80079f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f042 0201 	orr.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2228      	movs	r2, #40	; 0x28
 80079f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80079f6:	e007      	b.n	8007a08 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2220      	movs	r2, #32
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f7fe fde7 	bl	80065dc <HAL_I2C_ErrorCallback>
}
 8007a0e:	bf00      	nop
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	2000021c 	.word	0x2000021c
 8007a1c:	14f8b589 	.word	0x14f8b589

08007a20 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a2c:	4b13      	ldr	r3, [pc, #76]	; (8007a7c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	08db      	lsrs	r3, r3, #3
 8007a32:	4a13      	ldr	r2, [pc, #76]	; (8007a80 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007a34:	fba2 2303 	umull	r2, r3, r2, r3
 8007a38:	0a1a      	lsrs	r2, r3, #8
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d107      	bne.n	8007a5e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a52:	f043 0220 	orr.w	r2, r3, #32
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e008      	b.n	8007a70 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a6c:	d0e9      	beq.n	8007a42 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	2000021c 	.word	0x2000021c
 8007a80:	14f8b589 	.word	0x14f8b589

08007a84 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007a94:	d103      	bne.n	8007a9e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007a9c:	e007      	b.n	8007aae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007aa6:	d102      	bne.n	8007aae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2208      	movs	r2, #8
 8007aac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e267      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d075      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ada:	4b88      	ldr	r3, [pc, #544]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 030c 	and.w	r3, r3, #12
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d00c      	beq.n	8007b00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ae6:	4b85      	ldr	r3, [pc, #532]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d112      	bne.n	8007b18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007af2:	4b82      	ldr	r3, [pc, #520]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007afe:	d10b      	bne.n	8007b18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b00:	4b7e      	ldr	r3, [pc, #504]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d05b      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x108>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d157      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e242      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b20:	d106      	bne.n	8007b30 <HAL_RCC_OscConfig+0x74>
 8007b22:	4b76      	ldr	r3, [pc, #472]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a75      	ldr	r2, [pc, #468]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e01d      	b.n	8007b6c <HAL_RCC_OscConfig+0xb0>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b38:	d10c      	bne.n	8007b54 <HAL_RCC_OscConfig+0x98>
 8007b3a:	4b70      	ldr	r3, [pc, #448]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a6f      	ldr	r2, [pc, #444]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	4b6d      	ldr	r3, [pc, #436]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a6c      	ldr	r2, [pc, #432]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	e00b      	b.n	8007b6c <HAL_RCC_OscConfig+0xb0>
 8007b54:	4b69      	ldr	r3, [pc, #420]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a68      	ldr	r2, [pc, #416]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	4b66      	ldr	r3, [pc, #408]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a65      	ldr	r2, [pc, #404]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d013      	beq.n	8007b9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b74:	f7fc fe6c 	bl	8004850 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b7c:	f7fc fe68 	bl	8004850 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b64      	cmp	r3, #100	; 0x64
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e207      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b8e:	4b5b      	ldr	r3, [pc, #364]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d0f0      	beq.n	8007b7c <HAL_RCC_OscConfig+0xc0>
 8007b9a:	e014      	b.n	8007bc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b9c:	f7fc fe58 	bl	8004850 <HAL_GetTick>
 8007ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ba4:	f7fc fe54 	bl	8004850 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b64      	cmp	r3, #100	; 0x64
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e1f3      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bb6:	4b51      	ldr	r3, [pc, #324]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1f0      	bne.n	8007ba4 <HAL_RCC_OscConfig+0xe8>
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d063      	beq.n	8007c9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bd2:	4b4a      	ldr	r3, [pc, #296]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 030c 	and.w	r3, r3, #12
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bde:	4b47      	ldr	r3, [pc, #284]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d11c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bea:	4b44      	ldr	r3, [pc, #272]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d116      	bne.n	8007c24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf6:	4b41      	ldr	r3, [pc, #260]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x152>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d001      	beq.n	8007c0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e1c7      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4937      	ldr	r1, [pc, #220]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c22:	e03a      	b.n	8007c9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d020      	beq.n	8007c6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c2c:	4b34      	ldr	r3, [pc, #208]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c32:	f7fc fe0d 	bl	8004850 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c3a:	f7fc fe09 	bl	8004850 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e1a8      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c58:	4b28      	ldr	r3, [pc, #160]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4925      	ldr	r1, [pc, #148]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]
 8007c6c:	e015      	b.n	8007c9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c6e:	4b24      	ldr	r3, [pc, #144]	; (8007d00 <HAL_RCC_OscConfig+0x244>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7fc fdec 	bl	8004850 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c7c:	f7fc fde8 	bl	8004850 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e187      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d036      	beq.n	8007d14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cae:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <HAL_RCC_OscConfig+0x248>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb4:	f7fc fdcc 	bl	8004850 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cbc:	f7fc fdc8 	bl	8004850 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e167      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cce:	4b0b      	ldr	r3, [pc, #44]	; (8007cfc <HAL_RCC_OscConfig+0x240>)
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f0      	beq.n	8007cbc <HAL_RCC_OscConfig+0x200>
 8007cda:	e01b      	b.n	8007d14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cdc:	4b09      	ldr	r3, [pc, #36]	; (8007d04 <HAL_RCC_OscConfig+0x248>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ce2:	f7fc fdb5 	bl	8004850 <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ce8:	e00e      	b.n	8007d08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cea:	f7fc fdb1 	bl	8004850 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d907      	bls.n	8007d08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e150      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	42470000 	.word	0x42470000
 8007d04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d08:	4b88      	ldr	r3, [pc, #544]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ea      	bne.n	8007cea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8097 	beq.w	8007e50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d26:	4b81      	ldr	r3, [pc, #516]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10f      	bne.n	8007d52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	4b7d      	ldr	r3, [pc, #500]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	4a7c      	ldr	r2, [pc, #496]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d40:	6413      	str	r3, [r2, #64]	; 0x40
 8007d42:	4b7a      	ldr	r3, [pc, #488]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	60bb      	str	r3, [r7, #8]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d52:	4b77      	ldr	r3, [pc, #476]	; (8007f30 <HAL_RCC_OscConfig+0x474>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d118      	bne.n	8007d90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d5e:	4b74      	ldr	r3, [pc, #464]	; (8007f30 <HAL_RCC_OscConfig+0x474>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a73      	ldr	r2, [pc, #460]	; (8007f30 <HAL_RCC_OscConfig+0x474>)
 8007d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d6a:	f7fc fd71 	bl	8004850 <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d70:	e008      	b.n	8007d84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d72:	f7fc fd6d 	bl	8004850 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e10c      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d84:	4b6a      	ldr	r3, [pc, #424]	; (8007f30 <HAL_RCC_OscConfig+0x474>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0f0      	beq.n	8007d72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d106      	bne.n	8007da6 <HAL_RCC_OscConfig+0x2ea>
 8007d98:	4b64      	ldr	r3, [pc, #400]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4a63      	ldr	r2, [pc, #396]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	6713      	str	r3, [r2, #112]	; 0x70
 8007da4:	e01c      	b.n	8007de0 <HAL_RCC_OscConfig+0x324>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d10c      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x30c>
 8007dae:	4b5f      	ldr	r3, [pc, #380]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	4a5e      	ldr	r2, [pc, #376]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007db4:	f043 0304 	orr.w	r3, r3, #4
 8007db8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dba:	4b5c      	ldr	r3, [pc, #368]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	4a5b      	ldr	r2, [pc, #364]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCC_OscConfig+0x324>
 8007dc8:	4b58      	ldr	r3, [pc, #352]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dcc:	4a57      	ldr	r2, [pc, #348]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd4:	4b55      	ldr	r3, [pc, #340]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd8:	4a54      	ldr	r2, [pc, #336]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007dda:	f023 0304 	bic.w	r3, r3, #4
 8007dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d015      	beq.n	8007e14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de8:	f7fc fd32 	bl	8004850 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dee:	e00a      	b.n	8007e06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007df0:	f7fc fd2e 	bl	8004850 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e0cb      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e06:	4b49      	ldr	r3, [pc, #292]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0ee      	beq.n	8007df0 <HAL_RCC_OscConfig+0x334>
 8007e12:	e014      	b.n	8007e3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e14:	f7fc fd1c 	bl	8004850 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e1a:	e00a      	b.n	8007e32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e1c:	f7fc fd18 	bl	8004850 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e0b5      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e32:	4b3e      	ldr	r3, [pc, #248]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ee      	bne.n	8007e1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d105      	bne.n	8007e50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e44:	4b39      	ldr	r3, [pc, #228]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e48:	4a38      	ldr	r2, [pc, #224]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80a1 	beq.w	8007f9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e5a:	4b34      	ldr	r3, [pc, #208]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d05c      	beq.n	8007f20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d141      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e6e:	4b31      	ldr	r3, [pc, #196]	; (8007f34 <HAL_RCC_OscConfig+0x478>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e74:	f7fc fcec 	bl	8004850 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e7c:	f7fc fce8 	bl	8004850 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e087      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e8e:	4b27      	ldr	r3, [pc, #156]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69da      	ldr	r2, [r3, #28]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	491b      	ldr	r1, [pc, #108]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	; (8007f34 <HAL_RCC_OscConfig+0x478>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eca:	f7fc fcc1 	bl	8004850 <HAL_GetTick>
 8007ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ed2:	f7fc fcbd 	bl	8004850 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e05c      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d0f0      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x416>
 8007ef0:	e054      	b.n	8007f9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ef2:	4b10      	ldr	r3, [pc, #64]	; (8007f34 <HAL_RCC_OscConfig+0x478>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ef8:	f7fc fcaa 	bl	8004850 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fc fca6 	bl	8004850 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e045      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <HAL_RCC_OscConfig+0x470>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1f0      	bne.n	8007f00 <HAL_RCC_OscConfig+0x444>
 8007f1e:	e03d      	b.n	8007f9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d107      	bne.n	8007f38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e038      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
 8007f2c:	40023800 	.word	0x40023800
 8007f30:	40007000 	.word	0x40007000
 8007f34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f38:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <HAL_RCC_OscConfig+0x4ec>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d028      	beq.n	8007f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d121      	bne.n	8007f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d11a      	bne.n	8007f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f68:	4013      	ands	r3, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d111      	bne.n	8007f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	3b01      	subs	r3, #1
 8007f82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d107      	bne.n	8007f98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d001      	beq.n	8007f9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e000      	b.n	8007f9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	40023800 	.word	0x40023800

08007fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0cc      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007fc0:	4b68      	ldr	r3, [pc, #416]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d90c      	bls.n	8007fe8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fce:	4b65      	ldr	r3, [pc, #404]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fd6:	4b63      	ldr	r3, [pc, #396]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0307 	and.w	r3, r3, #7
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d001      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0b8      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d020      	beq.n	8008036 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008000:	4b59      	ldr	r3, [pc, #356]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4a58      	ldr	r2, [pc, #352]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800800a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008018:	4b53      	ldr	r3, [pc, #332]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	4a52      	ldr	r2, [pc, #328]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800801e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008022:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008024:	4b50      	ldr	r3, [pc, #320]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	494d      	ldr	r1, [pc, #308]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	2b00      	cmp	r3, #0
 8008040:	d044      	beq.n	80080cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d107      	bne.n	800805a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804a:	4b47      	ldr	r3, [pc, #284]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d119      	bne.n	800808a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e07f      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d003      	beq.n	800806a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008066:	2b03      	cmp	r3, #3
 8008068:	d107      	bne.n	800807a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806a:	4b3f      	ldr	r3, [pc, #252]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e06f      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800807a:	4b3b      	ldr	r3, [pc, #236]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e067      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800808a:	4b37      	ldr	r3, [pc, #220]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f023 0203 	bic.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	4934      	ldr	r1, [pc, #208]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008098:	4313      	orrs	r3, r2
 800809a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800809c:	f7fc fbd8 	bl	8004850 <HAL_GetTick>
 80080a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a2:	e00a      	b.n	80080ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080a4:	f7fc fbd4 	bl	8004850 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d901      	bls.n	80080ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e04f      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ba:	4b2b      	ldr	r3, [pc, #172]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 020c 	and.w	r2, r3, #12
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d1eb      	bne.n	80080a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080cc:	4b25      	ldr	r3, [pc, #148]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d20c      	bcs.n	80080f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e2:	4b20      	ldr	r3, [pc, #128]	; (8008164 <HAL_RCC_ClockConfig+0x1b8>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e032      	b.n	800815a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0304 	and.w	r3, r3, #4
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008100:	4b19      	ldr	r3, [pc, #100]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	4916      	ldr	r1, [pc, #88]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800810e:	4313      	orrs	r3, r2
 8008110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b00      	cmp	r3, #0
 800811c:	d009      	beq.n	8008132 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800811e:	4b12      	ldr	r3, [pc, #72]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	490e      	ldr	r1, [pc, #56]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800812e:	4313      	orrs	r3, r2
 8008130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008132:	f000 f821 	bl	8008178 <HAL_RCC_GetSysClockFreq>
 8008136:	4602      	mov	r2, r0
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <HAL_RCC_ClockConfig+0x1bc>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	091b      	lsrs	r3, r3, #4
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	490a      	ldr	r1, [pc, #40]	; (800816c <HAL_RCC_ClockConfig+0x1c0>)
 8008144:	5ccb      	ldrb	r3, [r1, r3]
 8008146:	fa22 f303 	lsr.w	r3, r2, r3
 800814a:	4a09      	ldr	r2, [pc, #36]	; (8008170 <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800814e:	4b09      	ldr	r3, [pc, #36]	; (8008174 <HAL_RCC_ClockConfig+0x1c8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7fc fb38 	bl	80047c8 <HAL_InitTick>

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40023c00 	.word	0x40023c00
 8008168:	40023800 	.word	0x40023800
 800816c:	08010040 	.word	0x08010040
 8008170:	2000021c 	.word	0x2000021c
 8008174:	20000220 	.word	0x20000220

08008178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800817c:	b094      	sub	sp, #80	; 0x50
 800817e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	647b      	str	r3, [r7, #68]	; 0x44
 8008184:	2300      	movs	r3, #0
 8008186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008188:	2300      	movs	r3, #0
 800818a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008190:	4b79      	ldr	r3, [pc, #484]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 030c 	and.w	r3, r3, #12
 8008198:	2b08      	cmp	r3, #8
 800819a:	d00d      	beq.n	80081b8 <HAL_RCC_GetSysClockFreq+0x40>
 800819c:	2b08      	cmp	r3, #8
 800819e:	f200 80e1 	bhi.w	8008364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d002      	beq.n	80081ac <HAL_RCC_GetSysClockFreq+0x34>
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d003      	beq.n	80081b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80081aa:	e0db      	b.n	8008364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081ac:	4b73      	ldr	r3, [pc, #460]	; (800837c <HAL_RCC_GetSysClockFreq+0x204>)
 80081ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80081b0:	e0db      	b.n	800836a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081b2:	4b73      	ldr	r3, [pc, #460]	; (8008380 <HAL_RCC_GetSysClockFreq+0x208>)
 80081b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081b6:	e0d8      	b.n	800836a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081b8:	4b6f      	ldr	r3, [pc, #444]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081c2:	4b6d      	ldr	r3, [pc, #436]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d063      	beq.n	8008296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ce:	4b6a      	ldr	r3, [pc, #424]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	099b      	lsrs	r3, r3, #6
 80081d4:	2200      	movs	r2, #0
 80081d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081e0:	633b      	str	r3, [r7, #48]	; 0x30
 80081e2:	2300      	movs	r3, #0
 80081e4:	637b      	str	r3, [r7, #52]	; 0x34
 80081e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f04f 0000 	mov.w	r0, #0
 80081f2:	f04f 0100 	mov.w	r1, #0
 80081f6:	0159      	lsls	r1, r3, #5
 80081f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081fc:	0150      	lsls	r0, r2, #5
 80081fe:	4602      	mov	r2, r0
 8008200:	460b      	mov	r3, r1
 8008202:	4621      	mov	r1, r4
 8008204:	1a51      	subs	r1, r2, r1
 8008206:	6139      	str	r1, [r7, #16]
 8008208:	4629      	mov	r1, r5
 800820a:	eb63 0301 	sbc.w	r3, r3, r1
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800821c:	4659      	mov	r1, fp
 800821e:	018b      	lsls	r3, r1, #6
 8008220:	4651      	mov	r1, sl
 8008222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008226:	4651      	mov	r1, sl
 8008228:	018a      	lsls	r2, r1, #6
 800822a:	4651      	mov	r1, sl
 800822c:	ebb2 0801 	subs.w	r8, r2, r1
 8008230:	4659      	mov	r1, fp
 8008232:	eb63 0901 	sbc.w	r9, r3, r1
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	f04f 0300 	mov.w	r3, #0
 800823e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800824a:	4690      	mov	r8, r2
 800824c:	4699      	mov	r9, r3
 800824e:	4623      	mov	r3, r4
 8008250:	eb18 0303 	adds.w	r3, r8, r3
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	462b      	mov	r3, r5
 8008258:	eb49 0303 	adc.w	r3, r9, r3
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800826a:	4629      	mov	r1, r5
 800826c:	024b      	lsls	r3, r1, #9
 800826e:	4621      	mov	r1, r4
 8008270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008274:	4621      	mov	r1, r4
 8008276:	024a      	lsls	r2, r1, #9
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800827e:	2200      	movs	r2, #0
 8008280:	62bb      	str	r3, [r7, #40]	; 0x28
 8008282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008288:	f7f8 fd06 	bl	8000c98 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008294:	e058      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008296:	4b38      	ldr	r3, [pc, #224]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	099b      	lsrs	r3, r3, #6
 800829c:	2200      	movs	r2, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	4611      	mov	r1, r2
 80082a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80082a6:	623b      	str	r3, [r7, #32]
 80082a8:	2300      	movs	r3, #0
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
 80082ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80082b0:	4642      	mov	r2, r8
 80082b2:	464b      	mov	r3, r9
 80082b4:	f04f 0000 	mov.w	r0, #0
 80082b8:	f04f 0100 	mov.w	r1, #0
 80082bc:	0159      	lsls	r1, r3, #5
 80082be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082c2:	0150      	lsls	r0, r2, #5
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4641      	mov	r1, r8
 80082ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80082ce:	4649      	mov	r1, r9
 80082d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082e8:	ebb2 040a 	subs.w	r4, r2, sl
 80082ec:	eb63 050b 	sbc.w	r5, r3, fp
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	00eb      	lsls	r3, r5, #3
 80082fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082fe:	00e2      	lsls	r2, r4, #3
 8008300:	4614      	mov	r4, r2
 8008302:	461d      	mov	r5, r3
 8008304:	4643      	mov	r3, r8
 8008306:	18e3      	adds	r3, r4, r3
 8008308:	603b      	str	r3, [r7, #0]
 800830a:	464b      	mov	r3, r9
 800830c:	eb45 0303 	adc.w	r3, r5, r3
 8008310:	607b      	str	r3, [r7, #4]
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800831e:	4629      	mov	r1, r5
 8008320:	028b      	lsls	r3, r1, #10
 8008322:	4621      	mov	r1, r4
 8008324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008328:	4621      	mov	r1, r4
 800832a:	028a      	lsls	r2, r1, #10
 800832c:	4610      	mov	r0, r2
 800832e:	4619      	mov	r1, r3
 8008330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008332:	2200      	movs	r2, #0
 8008334:	61bb      	str	r3, [r7, #24]
 8008336:	61fa      	str	r2, [r7, #28]
 8008338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800833c:	f7f8 fcac 	bl	8000c98 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4613      	mov	r3, r2
 8008346:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008348:	4b0b      	ldr	r3, [pc, #44]	; (8008378 <HAL_RCC_GetSysClockFreq+0x200>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	0c1b      	lsrs	r3, r3, #16
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	3301      	adds	r3, #1
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008358:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800835a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008360:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008362:	e002      	b.n	800836a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008364:	4b05      	ldr	r3, [pc, #20]	; (800837c <HAL_RCC_GetSysClockFreq+0x204>)
 8008366:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800836a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800836c:	4618      	mov	r0, r3
 800836e:	3750      	adds	r7, #80	; 0x50
 8008370:	46bd      	mov	sp, r7
 8008372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008376:	bf00      	nop
 8008378:	40023800 	.word	0x40023800
 800837c:	00f42400 	.word	0x00f42400
 8008380:	007a1200 	.word	0x007a1200

08008384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008388:	4b03      	ldr	r3, [pc, #12]	; (8008398 <HAL_RCC_GetHCLKFreq+0x14>)
 800838a:	681b      	ldr	r3, [r3, #0]
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	2000021c 	.word	0x2000021c

0800839c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80083a0:	f7ff fff0 	bl	8008384 <HAL_RCC_GetHCLKFreq>
 80083a4:	4602      	mov	r2, r0
 80083a6:	4b05      	ldr	r3, [pc, #20]	; (80083bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	0a9b      	lsrs	r3, r3, #10
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	4903      	ldr	r1, [pc, #12]	; (80083c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083b2:	5ccb      	ldrb	r3, [r1, r3]
 80083b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	40023800 	.word	0x40023800
 80083c0:	08010050 	.word	0x08010050

080083c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80083c8:	f7ff ffdc 	bl	8008384 <HAL_RCC_GetHCLKFreq>
 80083cc:	4602      	mov	r2, r0
 80083ce:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	0b5b      	lsrs	r3, r3, #13
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	4903      	ldr	r1, [pc, #12]	; (80083e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083da:	5ccb      	ldrb	r3, [r1, r3]
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40023800 	.word	0x40023800
 80083e8:	08010050 	.word	0x08010050

080083ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e04c      	b.n	8008498 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	d111      	bne.n	800842e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fc02 	bl	8009c1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1f      	ldr	r2, [pc, #124]	; (80084a0 <HAL_TIM_Base_Init+0xb4>)
 8008424:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f001 f91f 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	080041c1 	.word	0x080041c1

080084a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d001      	beq.n	80084bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e03c      	b.n	8008536 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2202      	movs	r2, #2
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a1e      	ldr	r2, [pc, #120]	; (8008544 <HAL_TIM_Base_Start+0xa0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d018      	beq.n	8008500 <HAL_TIM_Base_Start+0x5c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d6:	d013      	beq.n	8008500 <HAL_TIM_Base_Start+0x5c>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1a      	ldr	r2, [pc, #104]	; (8008548 <HAL_TIM_Base_Start+0xa4>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00e      	beq.n	8008500 <HAL_TIM_Base_Start+0x5c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a19      	ldr	r2, [pc, #100]	; (800854c <HAL_TIM_Base_Start+0xa8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_TIM_Base_Start+0x5c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a17      	ldr	r2, [pc, #92]	; (8008550 <HAL_TIM_Base_Start+0xac>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIM_Base_Start+0x5c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a16      	ldr	r2, [pc, #88]	; (8008554 <HAL_TIM_Base_Start+0xb0>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d111      	bne.n	8008524 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b06      	cmp	r3, #6
 8008510:	d010      	beq.n	8008534 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f042 0201 	orr.w	r2, r2, #1
 8008520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008522:	e007      	b.n	8008534 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0201 	orr.w	r2, r2, #1
 8008532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40010000 	.word	0x40010000
 8008548:	40000400 	.word	0x40000400
 800854c:	40000800 	.word	0x40000800
 8008550:	40000c00 	.word	0x40000c00
 8008554:	40014000 	.word	0x40014000

08008558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	d001      	beq.n	8008570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e044      	b.n	80085fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2202      	movs	r2, #2
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0201 	orr.w	r2, r2, #1
 8008586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1e      	ldr	r2, [pc, #120]	; (8008608 <HAL_TIM_Base_Start_IT+0xb0>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d018      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x6c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800859a:	d013      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x6c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1a      	ldr	r2, [pc, #104]	; (800860c <HAL_TIM_Base_Start_IT+0xb4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00e      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x6c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a19      	ldr	r2, [pc, #100]	; (8008610 <HAL_TIM_Base_Start_IT+0xb8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d009      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x6c>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <HAL_TIM_Base_Start_IT+0xbc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d004      	beq.n	80085c4 <HAL_TIM_Base_Start_IT+0x6c>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a16      	ldr	r2, [pc, #88]	; (8008618 <HAL_TIM_Base_Start_IT+0xc0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d111      	bne.n	80085e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689b      	ldr	r3, [r3, #8]
 80085ca:	f003 0307 	and.w	r3, r3, #7
 80085ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b06      	cmp	r3, #6
 80085d4:	d010      	beq.n	80085f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0201 	orr.w	r2, r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085e6:	e007      	b.n	80085f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0201 	orr.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	40010000 	.word	0x40010000
 800860c:	40000400 	.word	0x40000400
 8008610:	40000800 	.word	0x40000800
 8008614:	40000c00 	.word	0x40000c00
 8008618:	40014000 	.word	0x40014000

0800861c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d101      	bne.n	800862e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	e04c      	b.n	80086c8 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008634:	b2db      	uxtb	r3, r3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d111      	bne.n	800865e <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f001 faea 	bl	8009c1c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	2b00      	cmp	r3, #0
 800864e:	d102      	bne.n	8008656 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a1f      	ldr	r2, [pc, #124]	; (80086d0 <HAL_TIM_OC_Init+0xb4>)
 8008654:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2202      	movs	r2, #2
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	3304      	adds	r3, #4
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f001 f807 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2201      	movs	r2, #1
 80086a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	080086d5 	.word	0x080086d5

080086d4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80086dc:	bf00      	nop
 80086de:	370c      	adds	r7, #12
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e04c      	b.n	8008794 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b00      	cmp	r3, #0
 8008704:	d111      	bne.n	800872a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 fa84 	bl	8009c1c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	2b00      	cmp	r3, #0
 800871a:	d102      	bne.n	8008722 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a1f      	ldr	r2, [pc, #124]	; (800879c <HAL_TIM_PWM_Init+0xb4>)
 8008720:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3304      	adds	r3, #4
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f000 ffa1 	bl	8009684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	080040d1 	.word	0x080040d1

080087a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d109      	bne.n	80087c4 <HAL_TIM_PWM_Start+0x24>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	e022      	b.n	800880a <HAL_TIM_PWM_Start+0x6a>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d109      	bne.n	80087de <HAL_TIM_PWM_Start+0x3e>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	bf14      	ite	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	2300      	moveq	r3, #0
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	e015      	b.n	800880a <HAL_TIM_PWM_Start+0x6a>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d109      	bne.n	80087f8 <HAL_TIM_PWM_Start+0x58>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	bf14      	ite	ne
 80087f0:	2301      	movne	r3, #1
 80087f2:	2300      	moveq	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	e008      	b.n	800880a <HAL_TIM_PWM_Start+0x6a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	bf14      	ite	ne
 8008804:	2301      	movne	r3, #1
 8008806:	2300      	moveq	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e068      	b.n	80088e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <HAL_TIM_PWM_Start+0x82>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2202      	movs	r2, #2
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008820:	e013      	b.n	800884a <HAL_TIM_PWM_Start+0xaa>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b04      	cmp	r3, #4
 8008826:	d104      	bne.n	8008832 <HAL_TIM_PWM_Start+0x92>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008830:	e00b      	b.n	800884a <HAL_TIM_PWM_Start+0xaa>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b08      	cmp	r3, #8
 8008836:	d104      	bne.n	8008842 <HAL_TIM_PWM_Start+0xa2>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008840:	e003      	b.n	800884a <HAL_TIM_PWM_Start+0xaa>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2202      	movs	r2, #2
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2201      	movs	r2, #1
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f001 f9bc 	bl	8009bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a23      	ldr	r2, [pc, #140]	; (80088ec <HAL_TIM_PWM_Start+0x14c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d107      	bne.n	8008872 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a1d      	ldr	r2, [pc, #116]	; (80088ec <HAL_TIM_PWM_Start+0x14c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d018      	beq.n	80088ae <HAL_TIM_PWM_Start+0x10e>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d013      	beq.n	80088ae <HAL_TIM_PWM_Start+0x10e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a19      	ldr	r2, [pc, #100]	; (80088f0 <HAL_TIM_PWM_Start+0x150>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00e      	beq.n	80088ae <HAL_TIM_PWM_Start+0x10e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <HAL_TIM_PWM_Start+0x154>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d009      	beq.n	80088ae <HAL_TIM_PWM_Start+0x10e>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a16      	ldr	r2, [pc, #88]	; (80088f8 <HAL_TIM_PWM_Start+0x158>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d004      	beq.n	80088ae <HAL_TIM_PWM_Start+0x10e>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <HAL_TIM_PWM_Start+0x15c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d111      	bne.n	80088d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b06      	cmp	r3, #6
 80088be:	d010      	beq.n	80088e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0201 	orr.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d0:	e007      	b.n	80088e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f042 0201 	orr.w	r2, r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40014000 	.word	0x40014000

08008900 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d101      	bne.n	8008914 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e04c      	b.n	80089ae <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d111      	bne.n	8008944 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 f977 	bl	8009c1c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008932:	2b00      	cmp	r3, #0
 8008934:	d102      	bne.n	800893c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1f      	ldr	r2, [pc, #124]	; (80089b8 <HAL_TIM_OnePulse_Init+0xb8>)
 800893a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f000 fe94 	bl	8009684 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 0208 	bic.w	r2, r2, #8
 800896a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6819      	ldr	r1, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	080089bd 	.word	0x080089bd

080089bc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089f8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d108      	bne.n	8008a12 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d105      	bne.n	8008a12 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a06:	7b7b      	ldrb	r3, [r7, #13]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d102      	bne.n	8008a12 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a0c:	7b3b      	ldrb	r3, [r7, #12]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e03b      	b.n	8008a8e <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2202      	movs	r2, #2
 8008a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2202      	movs	r2, #2
 8008a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2202      	movs	r2, #2
 8008a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2202      	movs	r2, #2
 8008a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68da      	ldr	r2, [r3, #12]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0202 	orr.w	r2, r2, #2
 8008a44:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f042 0204 	orr.w	r2, r2, #4
 8008a54:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 f8b6 	bl	8009bd0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	2104      	movs	r1, #4
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f001 f8af 	bl	8009bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a08      	ldr	r2, [pc, #32]	; (8008a98 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d107      	bne.n	8008a8c <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	40010000 	.word	0x40010000

08008a9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e0a2      	b.n	8008bf6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d111      	bne.n	8008ae0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 f8a9 	bl	8009c1c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d102      	bne.n	8008ad8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a4a      	ldr	r2, [pc, #296]	; (8008c00 <HAL_TIM_Encoder_Init+0x164>)
 8008ad6:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	6812      	ldr	r2, [r2, #0]
 8008af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008af6:	f023 0307 	bic.w	r3, r3, #7
 8008afa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	3304      	adds	r3, #4
 8008b04:	4619      	mov	r1, r3
 8008b06:	4610      	mov	r0, r2
 8008b08:	f000 fdbc 	bl	8009684 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b34:	f023 0303 	bic.w	r3, r3, #3
 8008b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	4313      	orrs	r3, r2
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b52:	f023 030c 	bic.w	r3, r3, #12
 8008b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	021b      	lsls	r3, r3, #8
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	011a      	lsls	r2, r3, #4
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	031b      	lsls	r3, r3, #12
 8008b82:	4313      	orrs	r3, r2
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b90:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b98:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	685a      	ldr	r2, [r3, #4]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3718      	adds	r7, #24
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	08004131 	.word	0x08004131

08008c04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d110      	bne.n	8008c56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d102      	bne.n	8008c40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c3a:	7b7b      	ldrb	r3, [r7, #13]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d001      	beq.n	8008c44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008c40:	2301      	movs	r3, #1
 8008c42:	e069      	b.n	8008d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c54:	e031      	b.n	8008cba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d110      	bne.n	8008c7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d102      	bne.n	8008c68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c62:	7b3b      	ldrb	r3, [r7, #12]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d001      	beq.n	8008c6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e055      	b.n	8008d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c7c:	e01d      	b.n	8008cba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c7e:	7bfb      	ldrb	r3, [r7, #15]
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d108      	bne.n	8008c96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c84:	7bbb      	ldrb	r3, [r7, #14]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d105      	bne.n	8008c96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c8a:	7b7b      	ldrb	r3, [r7, #13]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d102      	bne.n	8008c96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c90:	7b3b      	ldrb	r3, [r7, #12]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d001      	beq.n	8008c9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e03e      	b.n	8008d18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2202      	movs	r2, #2
 8008ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d003      	beq.n	8008cc8 <HAL_TIM_Encoder_Start+0xc4>
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b04      	cmp	r3, #4
 8008cc4:	d008      	beq.n	8008cd8 <HAL_TIM_Encoder_Start+0xd4>
 8008cc6:	e00f      	b.n	8008ce8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	2100      	movs	r1, #0
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 ff7d 	bl	8009bd0 <TIM_CCxChannelCmd>
      break;
 8008cd6:	e016      	b.n	8008d06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	2104      	movs	r1, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 ff75 	bl	8009bd0 <TIM_CCxChannelCmd>
      break;
 8008ce6:	e00e      	b.n	8008d06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2201      	movs	r2, #1
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 ff6d 	bl	8009bd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	2104      	movs	r1, #4
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 ff66 	bl	8009bd0 <TIM_CCxChannelCmd>
      break;
 8008d04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f042 0201 	orr.w	r2, r2, #1
 8008d14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d128      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d121      	bne.n	8008d88 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f06f 0202 	mvn.w	r2, #2
 8008d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d005      	beq.n	8008d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	4798      	blx	r3
 8008d6c:	e009      	b.n	8008d82 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b04      	cmp	r3, #4
 8008d94:	d128      	bne.n	8008de8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f003 0304 	and.w	r3, r3, #4
 8008da0:	2b04      	cmp	r3, #4
 8008da2:	d121      	bne.n	8008de8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f06f 0204 	mvn.w	r2, #4
 8008dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2202      	movs	r2, #2
 8008db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
 8008dcc:	e009      	b.n	8008de2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0308 	and.w	r3, r3, #8
 8008df2:	2b08      	cmp	r3, #8
 8008df4:	d128      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d121      	bne.n	8008e48 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0208 	mvn.w	r2, #8
 8008e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2204      	movs	r2, #4
 8008e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	69db      	ldr	r3, [r3, #28]
 8008e1a:	f003 0303 	and.w	r3, r3, #3
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	4798      	blx	r3
 8008e2c:	e009      	b.n	8008e42 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	f003 0310 	and.w	r3, r3, #16
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d128      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f003 0310 	and.w	r3, r3, #16
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d121      	bne.n	8008ea8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f06f 0210 	mvn.w	r2, #16
 8008e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2208      	movs	r2, #8
 8008e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
 8008e8c:	e009      	b.n	8008ea2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d110      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f003 0301 	and.w	r3, r3, #1
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d109      	bne.n	8008ed8 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f06f 0201 	mvn.w	r2, #1
 8008ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee2:	2b80      	cmp	r3, #128	; 0x80
 8008ee4:	d110      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef0:	2b80      	cmp	r3, #128	; 0x80
 8008ef2:	d109      	bne.n	8008f08 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f12:	2b40      	cmp	r3, #64	; 0x40
 8008f14:	d110      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f20:	2b40      	cmp	r3, #64	; 0x40
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	d110      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	d109      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f06f 0220 	mvn.w	r2, #32
 8008f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_TIM_OC_ConfigChannel+0x1e>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e048      	b.n	8009020 <HAL_TIM_OC_ConfigChannel+0xb0>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2b0c      	cmp	r3, #12
 8008f9a:	d839      	bhi.n	8009010 <HAL_TIM_OC_ConfigChannel+0xa0>
 8008f9c:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa2:	bf00      	nop
 8008fa4:	08008fd9 	.word	0x08008fd9
 8008fa8:	08009011 	.word	0x08009011
 8008fac:	08009011 	.word	0x08009011
 8008fb0:	08009011 	.word	0x08009011
 8008fb4:	08008fe7 	.word	0x08008fe7
 8008fb8:	08009011 	.word	0x08009011
 8008fbc:	08009011 	.word	0x08009011
 8008fc0:	08009011 	.word	0x08009011
 8008fc4:	08008ff5 	.word	0x08008ff5
 8008fc8:	08009011 	.word	0x08009011
 8008fcc:	08009011 	.word	0x08009011
 8008fd0:	08009011 	.word	0x08009011
 8008fd4:	08009003 	.word	0x08009003
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68b9      	ldr	r1, [r7, #8]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fbd0 	bl	8009784 <TIM_OC1_SetConfig>
      break;
 8008fe4:	e017      	b.n	8009016 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68b9      	ldr	r1, [r7, #8]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fc2f 	bl	8009850 <TIM_OC2_SetConfig>
      break;
 8008ff2:	e010      	b.n	8009016 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68b9      	ldr	r1, [r7, #8]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fc94 	bl	8009928 <TIM_OC3_SetConfig>
      break;
 8009000:	e009      	b.n	8009016 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fcf7 	bl	80099fc <TIM_OC4_SetConfig>
      break;
 800900e:	e002      	b.n	8009016 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	75fb      	strb	r3, [r7, #23]
      break;
 8009014:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800901e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3718      	adds	r7, #24
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800903e:	2b01      	cmp	r3, #1
 8009040:	d101      	bne.n	8009046 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009042:	2302      	movs	r3, #2
 8009044:	e0ae      	b.n	80091a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b0c      	cmp	r3, #12
 8009052:	f200 809f 	bhi.w	8009194 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009091 	.word	0x08009091
 8009060:	08009195 	.word	0x08009195
 8009064:	08009195 	.word	0x08009195
 8009068:	08009195 	.word	0x08009195
 800906c:	080090d1 	.word	0x080090d1
 8009070:	08009195 	.word	0x08009195
 8009074:	08009195 	.word	0x08009195
 8009078:	08009195 	.word	0x08009195
 800907c:	08009113 	.word	0x08009113
 8009080:	08009195 	.word	0x08009195
 8009084:	08009195 	.word	0x08009195
 8009088:	08009195 	.word	0x08009195
 800908c:	08009153 	.word	0x08009153
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68b9      	ldr	r1, [r7, #8]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fb74 	bl	8009784 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	699a      	ldr	r2, [r3, #24]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0208 	orr.w	r2, r2, #8
 80090aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0204 	bic.w	r2, r2, #4
 80090ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	6999      	ldr	r1, [r3, #24]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	691a      	ldr	r2, [r3, #16]
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	619a      	str	r2, [r3, #24]
      break;
 80090ce:	e064      	b.n	800919a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f000 fbba 	bl	8009850 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6999      	ldr	r1, [r3, #24]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	021a      	lsls	r2, r3, #8
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	619a      	str	r2, [r3, #24]
      break;
 8009110:	e043      	b.n	800919a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fc05 	bl	8009928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	69da      	ldr	r2, [r3, #28]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f042 0208 	orr.w	r2, r2, #8
 800912c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f022 0204 	bic.w	r2, r2, #4
 800913c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69d9      	ldr	r1, [r3, #28]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	691a      	ldr	r2, [r3, #16]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	61da      	str	r2, [r3, #28]
      break;
 8009150:	e023      	b.n	800919a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fc4f 	bl	80099fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	69da      	ldr	r2, [r3, #28]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800916c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800917c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69d9      	ldr	r1, [r3, #28]
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	021a      	lsls	r2, r3, #8
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	430a      	orrs	r2, r1
 8009190:	61da      	str	r2, [r3, #28]
      break;
 8009192:	e002      	b.n	800919a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	75fb      	strb	r3, [r7, #23]
      break;
 8009198:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3718      	adds	r7, #24
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_TIM_ConfigClockSource+0x1c>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e0b4      	b.n	8009332 <HAL_TIM_ConfigClockSource+0x186>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80091e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68ba      	ldr	r2, [r7, #8]
 80091f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009200:	d03e      	beq.n	8009280 <HAL_TIM_ConfigClockSource+0xd4>
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009206:	f200 8087 	bhi.w	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 800920a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800920e:	f000 8086 	beq.w	800931e <HAL_TIM_ConfigClockSource+0x172>
 8009212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009216:	d87f      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009218:	2b70      	cmp	r3, #112	; 0x70
 800921a:	d01a      	beq.n	8009252 <HAL_TIM_ConfigClockSource+0xa6>
 800921c:	2b70      	cmp	r3, #112	; 0x70
 800921e:	d87b      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009220:	2b60      	cmp	r3, #96	; 0x60
 8009222:	d050      	beq.n	80092c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009224:	2b60      	cmp	r3, #96	; 0x60
 8009226:	d877      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009228:	2b50      	cmp	r3, #80	; 0x50
 800922a:	d03c      	beq.n	80092a6 <HAL_TIM_ConfigClockSource+0xfa>
 800922c:	2b50      	cmp	r3, #80	; 0x50
 800922e:	d873      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009230:	2b40      	cmp	r3, #64	; 0x40
 8009232:	d058      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009234:	2b40      	cmp	r3, #64	; 0x40
 8009236:	d86f      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009238:	2b30      	cmp	r3, #48	; 0x30
 800923a:	d064      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x15a>
 800923c:	2b30      	cmp	r3, #48	; 0x30
 800923e:	d86b      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009240:	2b20      	cmp	r3, #32
 8009242:	d060      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x15a>
 8009244:	2b20      	cmp	r3, #32
 8009246:	d867      	bhi.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
 8009248:	2b00      	cmp	r3, #0
 800924a:	d05c      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x15a>
 800924c:	2b10      	cmp	r3, #16
 800924e:	d05a      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x15a>
 8009250:	e062      	b.n	8009318 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	6899      	ldr	r1, [r3, #8]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f000 fc95 	bl	8009b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	609a      	str	r2, [r3, #8]
      break;
 800927e:	e04f      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	6899      	ldr	r1, [r3, #8]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f000 fc7e 	bl	8009b90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	689a      	ldr	r2, [r3, #8]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092a2:	609a      	str	r2, [r3, #8]
      break;
 80092a4:	e03c      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	6859      	ldr	r1, [r3, #4]
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	68db      	ldr	r3, [r3, #12]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f000 fbf2 	bl	8009a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2150      	movs	r1, #80	; 0x50
 80092be:	4618      	mov	r0, r3
 80092c0:	f000 fc4b 	bl	8009b5a <TIM_ITRx_SetConfig>
      break;
 80092c4:	e02c      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f000 fc11 	bl	8009afa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2160      	movs	r1, #96	; 0x60
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fc3b 	bl	8009b5a <TIM_ITRx_SetConfig>
      break;
 80092e4:	e01c      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 fbd2 	bl	8009a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2140      	movs	r1, #64	; 0x40
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fc2b 	bl	8009b5a <TIM_ITRx_SetConfig>
      break;
 8009304:	e00c      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4619      	mov	r1, r3
 8009310:	4610      	mov	r0, r2
 8009312:	f000 fc22 	bl	8009b5a <TIM_ITRx_SetConfig>
      break;
 8009316:	e003      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	73fb      	strb	r3, [r7, #15]
      break;
 800931c:	e000      	b.n	8009320 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800931e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009330:	7bfb      	ldrb	r3, [r7, #15]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800936a:	bf00      	nop
 800936c:	370c      	adds	r7, #12
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr

08009376 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009376:	b480      	push	{r7}
 8009378:	b083      	sub	sp, #12
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800937e:	bf00      	nop
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009392:	bf00      	nop
 8009394:	370c      	adds	r7, #12
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800939e:	b480      	push	{r7}
 80093a0:	b083      	sub	sp, #12
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093ba:	bf00      	nop
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80093e2:	bf00      	nop
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
	...

080093f0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b087      	sub	sp, #28
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	460b      	mov	r3, r1
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e135      	b.n	8009678 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <HAL_TIM_RegisterCallback+0x2a>
 8009416:	2302      	movs	r3, #2
 8009418:	e12e      	b.n	8009678 <HAL_TIM_RegisterCallback+0x288>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b01      	cmp	r3, #1
 800942c:	f040 80ba 	bne.w	80095a4 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009430:	7afb      	ldrb	r3, [r7, #11]
 8009432:	2b1a      	cmp	r3, #26
 8009434:	f200 80b3 	bhi.w	800959e <HAL_TIM_RegisterCallback+0x1ae>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <HAL_TIM_RegisterCallback+0x50>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	080094ad 	.word	0x080094ad
 8009444:	080094b5 	.word	0x080094b5
 8009448:	080094bd 	.word	0x080094bd
 800944c:	080094c5 	.word	0x080094c5
 8009450:	080094cd 	.word	0x080094cd
 8009454:	080094d5 	.word	0x080094d5
 8009458:	080094dd 	.word	0x080094dd
 800945c:	080094e5 	.word	0x080094e5
 8009460:	080094ed 	.word	0x080094ed
 8009464:	080094f5 	.word	0x080094f5
 8009468:	080094fd 	.word	0x080094fd
 800946c:	08009505 	.word	0x08009505
 8009470:	0800950d 	.word	0x0800950d
 8009474:	08009515 	.word	0x08009515
 8009478:	0800951d 	.word	0x0800951d
 800947c:	08009527 	.word	0x08009527
 8009480:	08009531 	.word	0x08009531
 8009484:	0800953b 	.word	0x0800953b
 8009488:	08009545 	.word	0x08009545
 800948c:	0800954f 	.word	0x0800954f
 8009490:	08009559 	.word	0x08009559
 8009494:	08009563 	.word	0x08009563
 8009498:	0800956d 	.word	0x0800956d
 800949c:	08009577 	.word	0x08009577
 80094a0:	08009581 	.word	0x08009581
 80094a4:	0800958b 	.word	0x0800958b
 80094a8:	08009595 	.word	0x08009595
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80094b2:	e0dc      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80094ba:	e0d8      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80094c2:	e0d4      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80094ca:	e0d0      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80094d2:	e0cc      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80094da:	e0c8      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80094e2:	e0c4      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80094ea:	e0c0      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80094f2:	e0bc      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80094fa:	e0b8      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009502:	e0b4      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800950a:	e0b0      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009512:	e0ac      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800951a:	e0a8      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009524:	e0a3      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800952e:	e09e      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009538:	e099      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009542:	e094      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800954c:	e08f      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009556:	e08a      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009560:	e085      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800956a:	e080      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009574:	e07b      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800957e:	e076      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009588:	e071      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009592:	e06c      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800959c:	e067      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	75fb      	strb	r3, [r7, #23]
        break;
 80095a2:	e064      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d15c      	bne.n	800966a <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	2b0d      	cmp	r3, #13
 80095b4:	d856      	bhi.n	8009664 <HAL_TIM_RegisterCallback+0x274>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <HAL_TIM_RegisterCallback+0x1cc>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095f5 	.word	0x080095f5
 80095c0:	080095fd 	.word	0x080095fd
 80095c4:	08009605 	.word	0x08009605
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	08009615 	.word	0x08009615
 80095d0:	0800961d 	.word	0x0800961d
 80095d4:	08009625 	.word	0x08009625
 80095d8:	0800962d 	.word	0x0800962d
 80095dc:	08009635 	.word	0x08009635
 80095e0:	0800963d 	.word	0x0800963d
 80095e4:	08009645 	.word	0x08009645
 80095e8:	0800964d 	.word	0x0800964d
 80095ec:	08009655 	.word	0x08009655
 80095f0:	0800965d 	.word	0x0800965d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 80095fa:	e038      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009602:	e034      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800960a:	e030      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009612:	e02c      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800961a:	e028      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009622:	e024      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800962a:	e020      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009632:	e01c      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800963a:	e018      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009642:	e014      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800964a:	e010      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009652:	e00c      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	687a      	ldr	r2, [r7, #4]
 8009658:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800965a:	e008      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009662:	e004      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
        break;
 8009668:	e001      	b.n	800966e <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
}
 8009678:	4618      	mov	r0, r3
 800967a:	371c      	adds	r7, #28
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009684:	b480      	push	{r7}
 8009686:	b085      	sub	sp, #20
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a34      	ldr	r2, [pc, #208]	; (8009768 <TIM_Base_SetConfig+0xe4>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d00f      	beq.n	80096bc <TIM_Base_SetConfig+0x38>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a2:	d00b      	beq.n	80096bc <TIM_Base_SetConfig+0x38>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a31      	ldr	r2, [pc, #196]	; (800976c <TIM_Base_SetConfig+0xe8>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d007      	beq.n	80096bc <TIM_Base_SetConfig+0x38>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a30      	ldr	r2, [pc, #192]	; (8009770 <TIM_Base_SetConfig+0xec>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d003      	beq.n	80096bc <TIM_Base_SetConfig+0x38>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a2f      	ldr	r2, [pc, #188]	; (8009774 <TIM_Base_SetConfig+0xf0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d108      	bne.n	80096ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	4313      	orrs	r3, r2
 80096cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a25      	ldr	r2, [pc, #148]	; (8009768 <TIM_Base_SetConfig+0xe4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d01b      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096dc:	d017      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a22      	ldr	r2, [pc, #136]	; (800976c <TIM_Base_SetConfig+0xe8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d013      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a21      	ldr	r2, [pc, #132]	; (8009770 <TIM_Base_SetConfig+0xec>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00f      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a20      	ldr	r2, [pc, #128]	; (8009774 <TIM_Base_SetConfig+0xf0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00b      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a1f      	ldr	r2, [pc, #124]	; (8009778 <TIM_Base_SetConfig+0xf4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a1e      	ldr	r2, [pc, #120]	; (800977c <TIM_Base_SetConfig+0xf8>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_Base_SetConfig+0x8a>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a1d      	ldr	r2, [pc, #116]	; (8009780 <TIM_Base_SetConfig+0xfc>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d108      	bne.n	8009720 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a08      	ldr	r2, [pc, #32]	; (8009768 <TIM_Base_SetConfig+0xe4>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d103      	bne.n	8009754 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	615a      	str	r2, [r3, #20]
}
 800975a:	bf00      	nop
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	40010000 	.word	0x40010000
 800976c:	40000400 	.word	0x40000400
 8009770:	40000800 	.word	0x40000800
 8009774:	40000c00 	.word	0x40000c00
 8009778:	40014000 	.word	0x40014000
 800977c:	40014400 	.word	0x40014400
 8009780:	40014800 	.word	0x40014800

08009784 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	f023 0201 	bic.w	r2, r3, #1
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f023 0303 	bic.w	r3, r3, #3
 80097ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f023 0302 	bic.w	r3, r3, #2
 80097cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a1c      	ldr	r2, [pc, #112]	; (800984c <TIM_OC1_SetConfig+0xc8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d10c      	bne.n	80097fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f023 0308 	bic.w	r3, r3, #8
 80097e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f023 0304 	bic.w	r3, r3, #4
 80097f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a13      	ldr	r2, [pc, #76]	; (800984c <TIM_OC1_SetConfig+0xc8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d111      	bne.n	8009826 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	695b      	ldr	r3, [r3, #20]
 8009816:	693a      	ldr	r2, [r7, #16]
 8009818:	4313      	orrs	r3, r2
 800981a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	621a      	str	r2, [r3, #32]
}
 8009840:	bf00      	nop
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	40010000 	.word	0x40010000

08009850 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0210 	bic.w	r2, r3, #16
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800987e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	021b      	lsls	r3, r3, #8
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	4313      	orrs	r3, r2
 8009892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	f023 0320 	bic.w	r3, r3, #32
 800989a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	011b      	lsls	r3, r3, #4
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	4313      	orrs	r3, r2
 80098a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a1e      	ldr	r2, [pc, #120]	; (8009924 <TIM_OC2_SetConfig+0xd4>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10d      	bne.n	80098cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a15      	ldr	r2, [pc, #84]	; (8009924 <TIM_OC2_SetConfig+0xd4>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d113      	bne.n	80098fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	685a      	ldr	r2, [r3, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	621a      	str	r2, [r3, #32]
}
 8009916:	bf00      	nop
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40010000 	.word	0x40010000

08009928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f023 0303 	bic.w	r3, r3, #3
 800995e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	021b      	lsls	r3, r3, #8
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <TIM_OC3_SetConfig+0xd0>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10d      	bne.n	80099a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800998c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	4313      	orrs	r3, r2
 8009998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a14      	ldr	r2, [pc, #80]	; (80099f8 <TIM_OC3_SetConfig+0xd0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d113      	bne.n	80099d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	011b      	lsls	r3, r3, #4
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	621a      	str	r2, [r3, #32]
}
 80099ec:	bf00      	nop
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	40010000 	.word	0x40010000

080099fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b087      	sub	sp, #28
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	021b      	lsls	r3, r3, #8
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	031b      	lsls	r3, r3, #12
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <TIM_OC4_SetConfig+0x9c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d109      	bne.n	8009a70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	695b      	ldr	r3, [r3, #20]
 8009a68:	019b      	lsls	r3, r3, #6
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685a      	ldr	r2, [r3, #4]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	621a      	str	r2, [r3, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	40010000 	.word	0x40010000

08009a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a1b      	ldr	r3, [r3, #32]
 8009aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	f023 0201 	bic.w	r2, r3, #1
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	011b      	lsls	r3, r3, #4
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f023 030a 	bic.w	r3, r3, #10
 8009ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	621a      	str	r2, [r3, #32]
}
 8009aee:	bf00      	nop
 8009af0:	371c      	adds	r7, #28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009afa:	b480      	push	{r7}
 8009afc:	b087      	sub	sp, #28
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	f023 0210 	bic.w	r2, r3, #16
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	699b      	ldr	r3, [r3, #24]
 8009b16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a1b      	ldr	r3, [r3, #32]
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	031b      	lsls	r3, r3, #12
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	011b      	lsls	r3, r3, #4
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	697a      	ldr	r2, [r7, #20]
 8009b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	621a      	str	r2, [r3, #32]
}
 8009b4e:	bf00      	nop
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b085      	sub	sp, #20
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f043 0307 	orr.w	r3, r3, #7
 8009b7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	609a      	str	r2, [r3, #8]
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b087      	sub	sp, #28
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009baa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	021a      	lsls	r2, r3, #8
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	609a      	str	r2, [r3, #8]
}
 8009bc4:	bf00      	nop
 8009bc6:	371c      	adds	r7, #28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f003 031f 	and.w	r3, r3, #31
 8009be2:	2201      	movs	r2, #1
 8009be4:	fa02 f303 	lsl.w	r3, r2, r3
 8009be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1a      	ldr	r2, [r3, #32]
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	43db      	mvns	r3, r3
 8009bf2:	401a      	ands	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6a1a      	ldr	r2, [r3, #32]
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	f003 031f 	and.w	r3, r3, #31
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	fa01 f303 	lsl.w	r3, r1, r3
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	621a      	str	r2, [r3, #32]
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
	...

08009c1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a1c      	ldr	r2, [pc, #112]	; (8009c98 <TIM_ResetCallback+0x7c>)
 8009c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a1b      	ldr	r2, [pc, #108]	; (8009c9c <TIM_ResetCallback+0x80>)
 8009c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a1a      	ldr	r2, [pc, #104]	; (8009ca0 <TIM_ResetCallback+0x84>)
 8009c38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a19      	ldr	r2, [pc, #100]	; (8009ca4 <TIM_ResetCallback+0x88>)
 8009c40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	4a18      	ldr	r2, [pc, #96]	; (8009ca8 <TIM_ResetCallback+0x8c>)
 8009c48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a17      	ldr	r2, [pc, #92]	; (8009cac <TIM_ResetCallback+0x90>)
 8009c50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a16      	ldr	r2, [pc, #88]	; (8009cb0 <TIM_ResetCallback+0x94>)
 8009c58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a15      	ldr	r2, [pc, #84]	; (8009cb4 <TIM_ResetCallback+0x98>)
 8009c60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a14      	ldr	r2, [pc, #80]	; (8009cb8 <TIM_ResetCallback+0x9c>)
 8009c68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a13      	ldr	r2, [pc, #76]	; (8009cbc <TIM_ResetCallback+0xa0>)
 8009c70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a12      	ldr	r2, [pc, #72]	; (8009cc0 <TIM_ResetCallback+0xa4>)
 8009c78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <TIM_ResetCallback+0xa8>)
 8009c80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a10      	ldr	r2, [pc, #64]	; (8009cc8 <TIM_ResetCallback+0xac>)
 8009c88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr
 8009c98:	0800349d 	.word	0x0800349d
 8009c9c:	0800933b 	.word	0x0800933b
 8009ca0:	080093b3 	.word	0x080093b3
 8009ca4:	080093c7 	.word	0x080093c7
 8009ca8:	08009363 	.word	0x08009363
 8009cac:	08009377 	.word	0x08009377
 8009cb0:	0800934f 	.word	0x0800934f
 8009cb4:	0800938b 	.word	0x0800938b
 8009cb8:	0800939f 	.word	0x0800939f
 8009cbc:	080093db 	.word	0x080093db
 8009cc0:	08009e4d 	.word	0x08009e4d
 8009cc4:	08009e61 	.word	0x08009e61
 8009cc8:	08009e75 	.word	0x08009e75

08009ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e050      	b.n	8009d86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	4313      	orrs	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d018      	beq.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d30:	d013      	beq.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a18      	ldr	r2, [pc, #96]	; (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00e      	beq.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a16      	ldr	r2, [pc, #88]	; (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d009      	beq.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a15      	ldr	r2, [pc, #84]	; (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d004      	beq.n	8009d5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a13      	ldr	r2, [pc, #76]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d10c      	bne.n	8009d74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	40010000 	.word	0x40010000
 8009d98:	40000400 	.word	0x40000400
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	40000c00 	.word	0x40000c00
 8009da4:	40014000 	.word	0x40014000

08009da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e03d      	b.n	8009e40 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e04a      	b.n	8009f30 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d111      	bne.n	8009eca <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fd72 	bl	800a998 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	; (8009f38 <HAL_UART_Init+0xb0>)
 8009ec0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2224      	movs	r2, #36	; 0x24
 8009ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ee0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 f83c 	bl	800af60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691a      	ldr	r2, [r3, #16]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ef6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	695a      	ldr	r2, [r3, #20]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2220      	movs	r2, #32
 8009f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2220      	movs	r2, #32
 8009f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	080042c1 	.word	0x080042c1

08009f3c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	60f8      	str	r0, [r7, #12]
 8009f44:	460b      	mov	r3, r1
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d107      	bne.n	8009f64 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	f043 0220 	orr.w	r2, r3, #32
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e08c      	b.n	800a07e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <HAL_UART_RegisterCallback+0x36>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e085      	b.n	800a07e <HAL_UART_RegisterCallback+0x142>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b20      	cmp	r3, #32
 8009f84:	d151      	bne.n	800a02a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	2b0c      	cmp	r3, #12
 8009f8a:	d845      	bhi.n	800a018 <HAL_UART_RegisterCallback+0xdc>
 8009f8c:	a201      	add	r2, pc, #4	; (adr r2, 8009f94 <HAL_UART_RegisterCallback+0x58>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fc9 	.word	0x08009fc9
 8009f98:	08009fd1 	.word	0x08009fd1
 8009f9c:	08009fd9 	.word	0x08009fd9
 8009fa0:	08009fe1 	.word	0x08009fe1
 8009fa4:	08009fe9 	.word	0x08009fe9
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009ff9 	.word	0x08009ff9
 8009fb0:	0800a001 	.word	0x0800a001
 8009fb4:	0800a019 	.word	0x0800a019
 8009fb8:	0800a019 	.word	0x0800a019
 8009fbc:	0800a019 	.word	0x0800a019
 8009fc0:	0800a009 	.word	0x0800a009
 8009fc4:	0800a011 	.word	0x0800a011
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 8009fce:	e051      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009fd6:	e04d      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009fde:	e049      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009fe6:	e045      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009fee:	e041      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009ff6:	e03d      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009ffe:	e039      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a006:	e035      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a00e:	e031      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a016:	e02d      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	f043 0220 	orr.w	r2, r3, #32
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	75fb      	strb	r3, [r7, #23]
        break;
 800a028:	e024      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a030:	b2db      	uxtb	r3, r3
 800a032:	2b00      	cmp	r3, #0
 800a034:	d116      	bne.n	800a064 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a036:	7afb      	ldrb	r3, [r7, #11]
 800a038:	2b0b      	cmp	r3, #11
 800a03a:	d002      	beq.n	800a042 <HAL_UART_RegisterCallback+0x106>
 800a03c:	2b0c      	cmp	r3, #12
 800a03e:	d004      	beq.n	800a04a <HAL_UART_RegisterCallback+0x10e>
 800a040:	e007      	b.n	800a052 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a048:	e014      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a050:	e010      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f043 0220 	orr.w	r2, r3, #32
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	75fb      	strb	r3, [r7, #23]
        break;
 800a062:	e007      	b.n	800a074 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a068:	f043 0220 	orr.w	r2, r3, #32
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop

0800a08c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b20      	cmp	r3, #32
 800a0a4:	d130      	bne.n	800a108 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <HAL_UART_Transmit_IT+0x26>
 800a0ac:	88fb      	ldrh	r3, [r7, #6]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d101      	bne.n	800a0b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e029      	b.n	800a10a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d101      	bne.n	800a0c4 <HAL_UART_Transmit_IT+0x38>
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	e022      	b.n	800a10a <HAL_UART_Transmit_IT+0x7e>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	88fa      	ldrh	r2, [r7, #6]
 800a0d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	88fa      	ldrh	r2, [r7, #6]
 800a0dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2221      	movs	r2, #33	; 0x21
 800a0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68da      	ldr	r2, [r3, #12]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a102:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	e000      	b.n	800a10a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a108:	2302      	movs	r3, #2
  }
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	4613      	mov	r3, r2
 800a122:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b20      	cmp	r3, #32
 800a12e:	d11d      	bne.n	800a16c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d002      	beq.n	800a13c <HAL_UART_Receive_IT+0x26>
 800a136:	88fb      	ldrh	r3, [r7, #6]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d101      	bne.n	800a140 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e016      	b.n	800a16e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a146:	2b01      	cmp	r3, #1
 800a148:	d101      	bne.n	800a14e <HAL_UART_Receive_IT+0x38>
 800a14a:	2302      	movs	r3, #2
 800a14c:	e00f      	b.n	800a16e <HAL_UART_Receive_IT+0x58>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2201      	movs	r2, #1
 800a152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a15c:	88fb      	ldrh	r3, [r7, #6]
 800a15e:	461a      	mov	r2, r3
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fcf8 	bl	800ab58 <UART_Start_Receive_IT>
 800a168:	4603      	mov	r3, r0
 800a16a:	e000      	b.n	800a16e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08c      	sub	sp, #48	; 0x30
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b20      	cmp	r3, #32
 800a190:	d165      	bne.n	800a25e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <HAL_UART_Transmit_DMA+0x26>
 800a198:	88fb      	ldrh	r3, [r7, #6]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e05e      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d101      	bne.n	800a1b0 <HAL_UART_Transmit_DMA+0x38>
 800a1ac:	2302      	movs	r3, #2
 800a1ae:	e057      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe8>
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	88fa      	ldrh	r2, [r7, #6]
 800a1c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	88fa      	ldrh	r2, [r7, #6]
 800a1c8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2221      	movs	r2, #33	; 0x21
 800a1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1dc:	4a22      	ldr	r2, [pc, #136]	; (800a268 <HAL_UART_Transmit_DMA+0xf0>)
 800a1de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e4:	4a21      	ldr	r2, [pc, #132]	; (800a26c <HAL_UART_Transmit_DMA+0xf4>)
 800a1e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ec:	4a20      	ldr	r2, [pc, #128]	; (800a270 <HAL_UART_Transmit_DMA+0xf8>)
 800a1ee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	3304      	adds	r3, #4
 800a20c:	461a      	mov	r2, r3
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	f7fb f910 	bl	8005434 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a21c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	3314      	adds	r3, #20
 800a22c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	617b      	str	r3, [r7, #20]
   return(result);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3314      	adds	r3, #20
 800a244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a246:	627a      	str	r2, [r7, #36]	; 0x24
 800a248:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6a39      	ldr	r1, [r7, #32]
 800a24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	61fb      	str	r3, [r7, #28]
   return(result);
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e5      	bne.n	800a226 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e000      	b.n	800a260 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a25e:	2302      	movs	r3, #2
  }
}
 800a260:	4618      	mov	r0, r3
 800a262:	3730      	adds	r7, #48	; 0x30
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	0800aa09 	.word	0x0800aa09
 800a26c:	0800aaa5 	.word	0x0800aaa5
 800a270:	0800aac3 	.word	0x0800aac3

0800a274 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b09a      	sub	sp, #104	; 0x68
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a284:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a286:	e853 3f00 	ldrex	r3, [r3]
 800a28a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a28e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a292:	667b      	str	r3, [r7, #100]	; 0x64
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	330c      	adds	r3, #12
 800a29a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a29c:	657a      	str	r2, [r7, #84]	; 0x54
 800a29e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2a4:	e841 2300 	strex	r3, r2, [r1]
 800a2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1e5      	bne.n	800a27c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	f023 0301 	bic.w	r3, r3, #1
 800a2c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3314      	adds	r3, #20
 800a2ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2d0:	643a      	str	r2, [r7, #64]	; 0x40
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a2d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e5      	bne.n	800a2b0 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d119      	bne.n	800a320 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f4:	6a3b      	ldr	r3, [r7, #32]
 800a2f6:	e853 3f00 	ldrex	r3, [r3]
 800a2fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f023 0310 	bic.w	r3, r3, #16
 800a302:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	330c      	adds	r3, #12
 800a30a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a30c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a314:	e841 2300 	strex	r3, r2, [r1]
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1e5      	bne.n	800a2ec <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b40      	cmp	r3, #64	; 0x40
 800a32c:	d136      	bne.n	800a39c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3314      	adds	r3, #20
 800a334:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a344:	65bb      	str	r3, [r7, #88]	; 0x58
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3314      	adds	r3, #20
 800a34c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a34e:	61ba      	str	r2, [r7, #24]
 800a350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	6979      	ldr	r1, [r7, #20]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	e841 2300 	strex	r3, r2, [r1]
 800a35a:	613b      	str	r3, [r7, #16]
   return(result);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e5      	bne.n	800a32e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	2b00      	cmp	r3, #0
 800a368:	d018      	beq.n	800a39c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	2200      	movs	r2, #0
 800a370:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a376:	4618      	mov	r0, r3
 800a378:	f7fb f8b4 	bl	80054e4 <HAL_DMA_Abort>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00c      	beq.n	800a39c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a386:	4618      	mov	r0, r3
 800a388:	f7fb fad6 	bl	8005938 <HAL_DMA_GetError>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b20      	cmp	r3, #32
 800a390:	d104      	bne.n	800a39c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2210      	movs	r2, #16
 800a396:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e00a      	b.n	800a3b2 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3768      	adds	r7, #104	; 0x68
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
	...

0800a3bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b0ba      	sub	sp, #232	; 0xe8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3f2:	f003 030f 	and.w	r3, r3, #15
 800a3f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a3fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10f      	bne.n	800a422 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a406:	f003 0320 	and.w	r3, r3, #32
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <HAL_UART_IRQHandler+0x66>
 800a40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fce3 	bl	800ade6 <UART_Receive_IT>
      return;
 800a420:	e25b      	b.n	800a8da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a426:	2b00      	cmp	r3, #0
 800a428:	f000 80e1 	beq.w	800a5ee <HAL_UART_IRQHandler+0x232>
 800a42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a430:	f003 0301 	and.w	r3, r3, #1
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a43c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 80d4 	beq.w	800a5ee <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00b      	beq.n	800a46a <HAL_UART_IRQHandler+0xae>
 800a452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a462:	f043 0201 	orr.w	r2, r3, #1
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a46e:	f003 0304 	and.w	r3, r3, #4
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <HAL_UART_IRQHandler+0xd2>
 800a476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f043 0202 	orr.w	r2, r3, #2
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <HAL_UART_IRQHandler+0xf6>
 800a49a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	f043 0204 	orr.w	r2, r3, #4
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d011      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x126>
 800a4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4c2:	f003 0320 	and.w	r3, r3, #32
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d105      	bne.n	800a4d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a4ce:	f003 0301 	and.w	r3, r3, #1
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d005      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4da:	f043 0208 	orr.w	r2, r3, #8
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 81f2 	beq.w	800a8d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d008      	beq.n	800a50a <HAL_UART_IRQHandler+0x14e>
 800a4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4fc:	f003 0320 	and.w	r3, r3, #32
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fc6e 	bl	800ade6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	695b      	ldr	r3, [r3, #20]
 800a510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a514:	2b40      	cmp	r3, #64	; 0x40
 800a516:	bf0c      	ite	eq
 800a518:	2301      	moveq	r3, #1
 800a51a:	2300      	movne	r3, #0
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d103      	bne.n	800a536 <HAL_UART_IRQHandler+0x17a>
 800a52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a532:	2b00      	cmp	r3, #0
 800a534:	d051      	beq.n	800a5da <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fb74 	bl	800ac24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a546:	2b40      	cmp	r3, #64	; 0x40
 800a548:	d142      	bne.n	800a5d0 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3314      	adds	r3, #20
 800a550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3314      	adds	r3, #20
 800a572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a576:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a57a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a586:	e841 2300 	strex	r3, r2, [r1]
 800a58a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a58e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1d9      	bne.n	800a54a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d013      	beq.n	800a5c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	4a7f      	ldr	r2, [pc, #508]	; (800a7a0 <HAL_UART_IRQHandler+0x3e4>)
 800a5a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fb f80a 	bl	80055c4 <HAL_DMA_Abort_IT>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d019      	beq.n	800a5ea <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c4:	e011      	b.n	800a5ea <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ce:	e00c      	b.n	800a5ea <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d8:	e007      	b.n	800a5ea <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a5e8:	e172      	b.n	800a8d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ea:	bf00      	nop
    return;
 800a5ec:	e170      	b.n	800a8d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	f040 814c 	bne.w	800a890 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8145 	beq.w	800a890 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a60a:	f003 0310 	and.w	r3, r3, #16
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f000 813e 	beq.w	800a890 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a614:	2300      	movs	r3, #0
 800a616:	60bb      	str	r3, [r7, #8]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	60bb      	str	r3, [r7, #8]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	60bb      	str	r3, [r7, #8]
 800a628:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a634:	2b40      	cmp	r3, #64	; 0x40
 800a636:	f040 80b5 	bne.w	800a7a4 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a646:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 8142 	beq.w	800a8d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a654:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a658:	429a      	cmp	r2, r3
 800a65a:	f080 813b 	bcs.w	800a8d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a664:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	69db      	ldr	r3, [r3, #28]
 800a66c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a670:	f000 8088 	beq.w	800a784 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a682:	e853 3f00 	ldrex	r3, [r3]
 800a686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a68a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a68e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a692:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	330c      	adds	r3, #12
 800a69c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a6a0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a6a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a6ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a6b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1d9      	bne.n	800a674 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	3314      	adds	r3, #20
 800a6c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6ca:	e853 3f00 	ldrex	r3, [r3]
 800a6ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a6d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6d2:	f023 0301 	bic.w	r3, r3, #1
 800a6d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3314      	adds	r3, #20
 800a6e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a6e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a6e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a6ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a6f0:	e841 2300 	strex	r3, r2, [r1]
 800a6f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a6f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e1      	bne.n	800a6c0 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	3314      	adds	r3, #20
 800a702:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a706:	e853 3f00 	ldrex	r3, [r3]
 800a70a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a70e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a712:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3314      	adds	r3, #20
 800a71c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a720:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a722:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a724:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a726:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a728:	e841 2300 	strex	r3, r2, [r1]
 800a72c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a72e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a730:	2b00      	cmp	r3, #0
 800a732:	d1e3      	bne.n	800a6fc <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	330c      	adds	r3, #12
 800a748:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a754:	f023 0310 	bic.w	r3, r3, #16
 800a758:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	330c      	adds	r3, #12
 800a762:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a766:	65ba      	str	r2, [r7, #88]	; 0x58
 800a768:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a76c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a76e:	e841 2300 	strex	r3, r2, [r1]
 800a772:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e3      	bne.n	800a742 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77e:	4618      	mov	r0, r3
 800a780:	f7fa feb0 	bl	80054e4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800a790:	b292      	uxth	r2, r2
 800a792:	1a8a      	subs	r2, r1, r2
 800a794:	b292      	uxth	r2, r2
 800a796:	4611      	mov	r1, r2
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a79c:	e09a      	b.n	800a8d4 <HAL_UART_IRQHandler+0x518>
 800a79e:	bf00      	nop
 800a7a0:	0800aceb 	.word	0x0800aceb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 808c 	beq.w	800a8d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800a7c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 8087 	beq.w	800a8d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	330c      	adds	r3, #12
 800a7d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	330c      	adds	r3, #12
 800a7ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a7ee:	647a      	str	r2, [r7, #68]	; 0x44
 800a7f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e3      	bne.n	800a7ca <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3314      	adds	r3, #20
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	623b      	str	r3, [r7, #32]
   return(result);
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	f023 0301 	bic.w	r3, r3, #1
 800a818:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3314      	adds	r3, #20
 800a822:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a826:	633a      	str	r2, [r7, #48]	; 0x30
 800a828:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e3      	bne.n	800a802 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	330c      	adds	r3, #12
 800a84e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	e853 3f00 	ldrex	r3, [r3]
 800a856:	60fb      	str	r3, [r7, #12]
   return(result);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0310 	bic.w	r3, r3, #16
 800a85e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	330c      	adds	r3, #12
 800a868:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a86c:	61fa      	str	r2, [r7, #28]
 800a86e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	69fa      	ldr	r2, [r7, #28]
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	617b      	str	r3, [r7, #20]
   return(result);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e3      	bne.n	800a848 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a884:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800a888:	4611      	mov	r1, r2
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a88e:	e023      	b.n	800a8d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d009      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x4f4>
 800a89c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d003      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fa33 	bl	800ad14 <UART_Transmit_IT>
    return;
 800a8ae:	e014      	b.n	800a8da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00e      	beq.n	800a8da <HAL_UART_IRQHandler+0x51e>
 800a8bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d008      	beq.n	800a8da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fa73 	bl	800adb4 <UART_EndTransmit_IT>
    return;
 800a8ce:	e004      	b.n	800a8da <HAL_UART_IRQHandler+0x51e>
    return;
 800a8d0:	bf00      	nop
 800a8d2:	e002      	b.n	800a8da <HAL_UART_IRQHandler+0x51e>
      return;
 800a8d4:	bf00      	nop
 800a8d6:	e000      	b.n	800a8da <HAL_UART_IRQHandler+0x51e>
      return;
 800a8d8:	bf00      	nop
  }
}
 800a8da:	37e8      	adds	r7, #232	; 0xe8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a980:	b480      	push	{r7}
 800a982:	b083      	sub	sp, #12
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a10      	ldr	r2, [pc, #64]	; (800a9e4 <UART_InitCallbacksToDefault+0x4c>)
 800a9a4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a0f      	ldr	r2, [pc, #60]	; (800a9e8 <UART_InitCallbacksToDefault+0x50>)
 800a9aa:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a0f      	ldr	r2, [pc, #60]	; (800a9ec <UART_InitCallbacksToDefault+0x54>)
 800a9b0:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a0e      	ldr	r2, [pc, #56]	; (800a9f0 <UART_InitCallbacksToDefault+0x58>)
 800a9b6:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a0e      	ldr	r2, [pc, #56]	; (800a9f4 <UART_InitCallbacksToDefault+0x5c>)
 800a9bc:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <UART_InitCallbacksToDefault+0x60>)
 800a9c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	4a0d      	ldr	r2, [pc, #52]	; (800a9fc <UART_InitCallbacksToDefault+0x64>)
 800a9c8:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	4a0c      	ldr	r2, [pc, #48]	; (800aa00 <UART_InitCallbacksToDefault+0x68>)
 800a9ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a0c      	ldr	r2, [pc, #48]	; (800aa04 <UART_InitCallbacksToDefault+0x6c>)
 800a9d4:	669a      	str	r2, [r3, #104]	; 0x68

}
 800a9d6:	bf00      	nop
 800a9d8:	370c      	adds	r7, #12
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	0800a8f5 	.word	0x0800a8f5
 800a9e8:	0800a8e1 	.word	0x0800a8e1
 800a9ec:	0800a91d 	.word	0x0800a91d
 800a9f0:	0800a909 	.word	0x0800a909
 800a9f4:	0800a931 	.word	0x0800a931
 800a9f8:	0800a945 	.word	0x0800a945
 800a9fc:	0800a959 	.word	0x0800a959
 800aa00:	0800a96d 	.word	0x0800a96d
 800aa04:	0800a981 	.word	0x0800a981

0800aa08 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b090      	sub	sp, #64	; 0x40
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d137      	bne.n	800aa94 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800aa24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa26:	2200      	movs	r2, #0
 800aa28:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3314      	adds	r3, #20
 800aa30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	623b      	str	r3, [r7, #32]
   return(result);
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa40:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3314      	adds	r3, #20
 800aa48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa4a:	633a      	str	r2, [r7, #48]	; 0x30
 800aa4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e5      	bne.n	800aa2a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	330c      	adds	r3, #12
 800aa64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
 800aa76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	330c      	adds	r3, #12
 800aa7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa7e:	61fa      	str	r2, [r7, #28]
 800aa80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	69b9      	ldr	r1, [r7, #24]
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	617b      	str	r3, [r7, #20]
   return(result);
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e5      	bne.n	800aa5e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aa92:	e003      	b.n	800aa9c <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800aa94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800aa9a:	4798      	blx	r3
}
 800aa9c:	bf00      	nop
 800aa9e:	3740      	adds	r7, #64	; 0x40
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}

0800aaa4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	695b      	ldr	r3, [r3, #20]
 800aada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aade:	2b80      	cmp	r3, #128	; 0x80
 800aae0:	bf0c      	ite	eq
 800aae2:	2301      	moveq	r3, #1
 800aae4:	2300      	movne	r3, #0
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	2b21      	cmp	r3, #33	; 0x21
 800aaf4:	d108      	bne.n	800ab08 <UART_DMAError+0x46>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d005      	beq.n	800ab08 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	2200      	movs	r2, #0
 800ab00:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ab02:	68b8      	ldr	r0, [r7, #8]
 800ab04:	f000 f866 	bl	800abd4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	695b      	ldr	r3, [r3, #20]
 800ab0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab12:	2b40      	cmp	r3, #64	; 0x40
 800ab14:	bf0c      	ite	eq
 800ab16:	2301      	moveq	r3, #1
 800ab18:	2300      	movne	r3, #0
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b22      	cmp	r3, #34	; 0x22
 800ab28:	d108      	bne.n	800ab3c <UART_DMAError+0x7a>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	2200      	movs	r2, #0
 800ab34:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800ab36:	68b8      	ldr	r0, [r7, #8]
 800ab38:	f000 f874 	bl	800ac24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab40:	f043 0210 	orr.w	r2, r3, #16
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4c:	68b8      	ldr	r0, [r7, #8]
 800ab4e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	4613      	mov	r3, r2
 800ab64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	68ba      	ldr	r2, [r7, #8]
 800ab6a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	88fa      	ldrh	r2, [r7, #6]
 800ab70:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	88fa      	ldrh	r2, [r7, #6]
 800ab76:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2222      	movs	r2, #34	; 0x22
 800ab82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d007      	beq.n	800aba6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aba4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	695a      	ldr	r2, [r3, #20]
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f042 0201 	orr.w	r2, r2, #1
 800abb4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68da      	ldr	r2, [r3, #12]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f042 0220 	orr.w	r2, r2, #32
 800abc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	330c      	adds	r3, #12
 800abe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	60bb      	str	r3, [r7, #8]
   return(result);
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800abf2:	61fb      	str	r3, [r7, #28]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	330c      	adds	r3, #12
 800abfa:	69fa      	ldr	r2, [r7, #28]
 800abfc:	61ba      	str	r2, [r7, #24]
 800abfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac00:	6979      	ldr	r1, [r7, #20]
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	e841 2300 	strex	r3, r2, [r1]
 800ac08:	613b      	str	r3, [r7, #16]
   return(result);
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e5      	bne.n	800abdc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2220      	movs	r2, #32
 800ac14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800ac18:	bf00      	nop
 800ac1a:	3724      	adds	r7, #36	; 0x24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b095      	sub	sp, #84	; 0x54
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	330c      	adds	r3, #12
 800ac32:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac36:	e853 3f00 	ldrex	r3, [r3]
 800ac3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac42:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	330c      	adds	r3, #12
 800ac4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ac4c:	643a      	str	r2, [r7, #64]	; 0x40
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac54:	e841 2300 	strex	r3, r2, [r1]
 800ac58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d1e5      	bne.n	800ac2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	3314      	adds	r3, #20
 800ac66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	e853 3f00 	ldrex	r3, [r3]
 800ac6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f023 0301 	bic.w	r3, r3, #1
 800ac76:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3314      	adds	r3, #20
 800ac7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac80:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac88:	e841 2300 	strex	r3, r2, [r1]
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e5      	bne.n	800ac60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d119      	bne.n	800acd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	330c      	adds	r3, #12
 800aca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	e853 3f00 	ldrex	r3, [r3]
 800acaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f023 0310 	bic.w	r3, r3, #16
 800acb2:	647b      	str	r3, [r7, #68]	; 0x44
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	330c      	adds	r3, #12
 800acba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acbc:	61ba      	str	r2, [r7, #24]
 800acbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc0:	6979      	ldr	r1, [r7, #20]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	e841 2300 	strex	r3, r2, [r1]
 800acc8:	613b      	str	r3, [r7, #16]
   return(result);
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e5      	bne.n	800ac9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2220      	movs	r2, #32
 800acd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800acde:	bf00      	nop
 800ace0:	3754      	adds	r7, #84	; 0x54
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b21      	cmp	r3, #33	; 0x21
 800ad26:	d13e      	bne.n	800ada6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad30:	d114      	bne.n	800ad5c <UART_Transmit_IT+0x48>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d110      	bne.n	800ad5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a1b      	ldr	r3, [r3, #32]
 800ad3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	1c9a      	adds	r2, r3, #2
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	621a      	str	r2, [r3, #32]
 800ad5a:	e008      	b.n	800ad6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6a1b      	ldr	r3, [r3, #32]
 800ad60:	1c59      	adds	r1, r3, #1
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6211      	str	r1, [r2, #32]
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	3b01      	subs	r3, #1
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d10f      	bne.n	800ada2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68da      	ldr	r2, [r3, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ada0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ada2:	2300      	movs	r3, #0
 800ada4:	e000      	b.n	800ada8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ada6:	2302      	movs	r3, #2
  }
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2220      	movs	r2, #32
 800add0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b08c      	sub	sp, #48	; 0x30
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b22      	cmp	r3, #34	; 0x22
 800adf8:	f040 80ad 	bne.w	800af56 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae04:	d117      	bne.n	800ae36 <UART_Receive_IT+0x50>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	691b      	ldr	r3, [r3, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d113      	bne.n	800ae36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	1c9a      	adds	r2, r3, #2
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	629a      	str	r2, [r3, #40]	; 0x28
 800ae34:	e026      	b.n	800ae84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae48:	d007      	beq.n	800ae5a <UART_Receive_IT+0x74>
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d10a      	bne.n	800ae68 <UART_Receive_IT+0x82>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d106      	bne.n	800ae68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	e008      	b.n	800ae7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	687a      	ldr	r2, [r7, #4]
 800ae90:	4619      	mov	r1, r3
 800ae92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d15c      	bne.n	800af52 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68da      	ldr	r2, [r3, #12]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 0220 	bic.w	r2, r2, #32
 800aea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68da      	ldr	r2, [r3, #12]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aeb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	695a      	ldr	r2, [r3, #20]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f022 0201 	bic.w	r2, r2, #1
 800aec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2220      	movs	r2, #32
 800aecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed4:	2b01      	cmp	r3, #1
 800aed6:	d136      	bne.n	800af46 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	330c      	adds	r3, #12
 800aee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	613b      	str	r3, [r7, #16]
   return(result);
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f023 0310 	bic.w	r3, r3, #16
 800aef4:	627b      	str	r3, [r7, #36]	; 0x24
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	330c      	adds	r3, #12
 800aefc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aefe:	623a      	str	r2, [r7, #32]
 800af00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	69f9      	ldr	r1, [r7, #28]
 800af04:	6a3a      	ldr	r2, [r7, #32]
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	61bb      	str	r3, [r7, #24]
   return(result);
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e5      	bne.n	800aede <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d10a      	bne.n	800af36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800af3e:	4611      	mov	r1, r2
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	4798      	blx	r3
 800af44:	e003      	b.n	800af4e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	e002      	b.n	800af58 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	e000      	b.n	800af58 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800af56:	2302      	movs	r3, #2
  }
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3730      	adds	r7, #48	; 0x30
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af64:	b0c0      	sub	sp, #256	; 0x100
 800af66:	af00      	add	r7, sp, #0
 800af68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af7c:	68d9      	ldr	r1, [r3, #12]
 800af7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	ea40 0301 	orr.w	r3, r0, r1
 800af88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	431a      	orrs	r2, r3
 800af98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	431a      	orrs	r2, r3
 800afa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800afac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800afb8:	f021 010c 	bic.w	r1, r1, #12
 800afbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800afc6:	430b      	orrs	r3, r1
 800afc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800afca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800afd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afda:	6999      	ldr	r1, [r3, #24]
 800afdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	ea40 0301 	orr.w	r3, r0, r1
 800afe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800afe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b8f      	ldr	r3, [pc, #572]	; (800b22c <UART_SetConfig+0x2cc>)
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d005      	beq.n	800b000 <UART_SetConfig+0xa0>
 800aff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b8d      	ldr	r3, [pc, #564]	; (800b230 <UART_SetConfig+0x2d0>)
 800affc:	429a      	cmp	r2, r3
 800affe:	d104      	bne.n	800b00a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b000:	f7fd f9e0 	bl	80083c4 <HAL_RCC_GetPCLK2Freq>
 800b004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b008:	e003      	b.n	800b012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b00a:	f7fd f9c7 	bl	800839c <HAL_RCC_GetPCLK1Freq>
 800b00e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01c:	f040 810c 	bne.w	800b238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b024:	2200      	movs	r2, #0
 800b026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b02a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b02e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	1891      	adds	r1, r2, r2
 800b038:	65b9      	str	r1, [r7, #88]	; 0x58
 800b03a:	415b      	adcs	r3, r3
 800b03c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b03e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b042:	4621      	mov	r1, r4
 800b044:	eb12 0801 	adds.w	r8, r2, r1
 800b048:	4629      	mov	r1, r5
 800b04a:	eb43 0901 	adc.w	r9, r3, r1
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b05a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b05e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b062:	4690      	mov	r8, r2
 800b064:	4699      	mov	r9, r3
 800b066:	4623      	mov	r3, r4
 800b068:	eb18 0303 	adds.w	r3, r8, r3
 800b06c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b070:	462b      	mov	r3, r5
 800b072:	eb49 0303 	adc.w	r3, r9, r3
 800b076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b08a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b08e:	460b      	mov	r3, r1
 800b090:	18db      	adds	r3, r3, r3
 800b092:	653b      	str	r3, [r7, #80]	; 0x50
 800b094:	4613      	mov	r3, r2
 800b096:	eb42 0303 	adc.w	r3, r2, r3
 800b09a:	657b      	str	r3, [r7, #84]	; 0x54
 800b09c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b0a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b0a4:	f7f5 fdf8 	bl	8000c98 <__aeabi_uldivmod>
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	4b61      	ldr	r3, [pc, #388]	; (800b234 <UART_SetConfig+0x2d4>)
 800b0ae:	fba3 2302 	umull	r2, r3, r3, r2
 800b0b2:	095b      	lsrs	r3, r3, #5
 800b0b4:	011c      	lsls	r4, r3, #4
 800b0b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b0c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b0c8:	4642      	mov	r2, r8
 800b0ca:	464b      	mov	r3, r9
 800b0cc:	1891      	adds	r1, r2, r2
 800b0ce:	64b9      	str	r1, [r7, #72]	; 0x48
 800b0d0:	415b      	adcs	r3, r3
 800b0d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b0d8:	4641      	mov	r1, r8
 800b0da:	eb12 0a01 	adds.w	sl, r2, r1
 800b0de:	4649      	mov	r1, r9
 800b0e0:	eb43 0b01 	adc.w	fp, r3, r1
 800b0e4:	f04f 0200 	mov.w	r2, #0
 800b0e8:	f04f 0300 	mov.w	r3, #0
 800b0ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b0f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b0f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b0f8:	4692      	mov	sl, r2
 800b0fa:	469b      	mov	fp, r3
 800b0fc:	4643      	mov	r3, r8
 800b0fe:	eb1a 0303 	adds.w	r3, sl, r3
 800b102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b106:	464b      	mov	r3, r9
 800b108:	eb4b 0303 	adc.w	r3, fp, r3
 800b10c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b114:	685b      	ldr	r3, [r3, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b11c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b124:	460b      	mov	r3, r1
 800b126:	18db      	adds	r3, r3, r3
 800b128:	643b      	str	r3, [r7, #64]	; 0x40
 800b12a:	4613      	mov	r3, r2
 800b12c:	eb42 0303 	adc.w	r3, r2, r3
 800b130:	647b      	str	r3, [r7, #68]	; 0x44
 800b132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b13a:	f7f5 fdad 	bl	8000c98 <__aeabi_uldivmod>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4611      	mov	r1, r2
 800b144:	4b3b      	ldr	r3, [pc, #236]	; (800b234 <UART_SetConfig+0x2d4>)
 800b146:	fba3 2301 	umull	r2, r3, r3, r1
 800b14a:	095b      	lsrs	r3, r3, #5
 800b14c:	2264      	movs	r2, #100	; 0x64
 800b14e:	fb02 f303 	mul.w	r3, r2, r3
 800b152:	1acb      	subs	r3, r1, r3
 800b154:	00db      	lsls	r3, r3, #3
 800b156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b15a:	4b36      	ldr	r3, [pc, #216]	; (800b234 <UART_SetConfig+0x2d4>)
 800b15c:	fba3 2302 	umull	r2, r3, r3, r2
 800b160:	095b      	lsrs	r3, r3, #5
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b168:	441c      	add	r4, r3
 800b16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b16e:	2200      	movs	r2, #0
 800b170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b17c:	4642      	mov	r2, r8
 800b17e:	464b      	mov	r3, r9
 800b180:	1891      	adds	r1, r2, r2
 800b182:	63b9      	str	r1, [r7, #56]	; 0x38
 800b184:	415b      	adcs	r3, r3
 800b186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b18c:	4641      	mov	r1, r8
 800b18e:	1851      	adds	r1, r2, r1
 800b190:	6339      	str	r1, [r7, #48]	; 0x30
 800b192:	4649      	mov	r1, r9
 800b194:	414b      	adcs	r3, r1
 800b196:	637b      	str	r3, [r7, #52]	; 0x34
 800b198:	f04f 0200 	mov.w	r2, #0
 800b19c:	f04f 0300 	mov.w	r3, #0
 800b1a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b1a4:	4659      	mov	r1, fp
 800b1a6:	00cb      	lsls	r3, r1, #3
 800b1a8:	4651      	mov	r1, sl
 800b1aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1ae:	4651      	mov	r1, sl
 800b1b0:	00ca      	lsls	r2, r1, #3
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	189b      	adds	r3, r3, r2
 800b1bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1c0:	464b      	mov	r3, r9
 800b1c2:	460a      	mov	r2, r1
 800b1c4:	eb42 0303 	adc.w	r3, r2, r3
 800b1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b1dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	18db      	adds	r3, r3, r3
 800b1e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	eb42 0303 	adc.w	r3, r2, r3
 800b1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b1f6:	f7f5 fd4f 	bl	8000c98 <__aeabi_uldivmod>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <UART_SetConfig+0x2d4>)
 800b200:	fba3 1302 	umull	r1, r3, r3, r2
 800b204:	095b      	lsrs	r3, r3, #5
 800b206:	2164      	movs	r1, #100	; 0x64
 800b208:	fb01 f303 	mul.w	r3, r1, r3
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	3332      	adds	r3, #50	; 0x32
 800b212:	4a08      	ldr	r2, [pc, #32]	; (800b234 <UART_SetConfig+0x2d4>)
 800b214:	fba2 2303 	umull	r2, r3, r2, r3
 800b218:	095b      	lsrs	r3, r3, #5
 800b21a:	f003 0207 	and.w	r2, r3, #7
 800b21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4422      	add	r2, r4
 800b226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b228:	e105      	b.n	800b436 <UART_SetConfig+0x4d6>
 800b22a:	bf00      	nop
 800b22c:	40011000 	.word	0x40011000
 800b230:	40011400 	.word	0x40011400
 800b234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b23c:	2200      	movs	r2, #0
 800b23e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b24a:	4642      	mov	r2, r8
 800b24c:	464b      	mov	r3, r9
 800b24e:	1891      	adds	r1, r2, r2
 800b250:	6239      	str	r1, [r7, #32]
 800b252:	415b      	adcs	r3, r3
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
 800b256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b25a:	4641      	mov	r1, r8
 800b25c:	1854      	adds	r4, r2, r1
 800b25e:	4649      	mov	r1, r9
 800b260:	eb43 0501 	adc.w	r5, r3, r1
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	f04f 0300 	mov.w	r3, #0
 800b26c:	00eb      	lsls	r3, r5, #3
 800b26e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b272:	00e2      	lsls	r2, r4, #3
 800b274:	4614      	mov	r4, r2
 800b276:	461d      	mov	r5, r3
 800b278:	4643      	mov	r3, r8
 800b27a:	18e3      	adds	r3, r4, r3
 800b27c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b280:	464b      	mov	r3, r9
 800b282:	eb45 0303 	adc.w	r3, r5, r3
 800b286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b28a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b2a6:	4629      	mov	r1, r5
 800b2a8:	008b      	lsls	r3, r1, #2
 800b2aa:	4621      	mov	r1, r4
 800b2ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	008a      	lsls	r2, r1, #2
 800b2b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b2b8:	f7f5 fcee 	bl	8000c98 <__aeabi_uldivmod>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4b60      	ldr	r3, [pc, #384]	; (800b444 <UART_SetConfig+0x4e4>)
 800b2c2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	011c      	lsls	r4, r3, #4
 800b2ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b2d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b2d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b2dc:	4642      	mov	r2, r8
 800b2de:	464b      	mov	r3, r9
 800b2e0:	1891      	adds	r1, r2, r2
 800b2e2:	61b9      	str	r1, [r7, #24]
 800b2e4:	415b      	adcs	r3, r3
 800b2e6:	61fb      	str	r3, [r7, #28]
 800b2e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	1851      	adds	r1, r2, r1
 800b2f0:	6139      	str	r1, [r7, #16]
 800b2f2:	4649      	mov	r1, r9
 800b2f4:	414b      	adcs	r3, r1
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	f04f 0300 	mov.w	r3, #0
 800b300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b304:	4659      	mov	r1, fp
 800b306:	00cb      	lsls	r3, r1, #3
 800b308:	4651      	mov	r1, sl
 800b30a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b30e:	4651      	mov	r1, sl
 800b310:	00ca      	lsls	r2, r1, #3
 800b312:	4610      	mov	r0, r2
 800b314:	4619      	mov	r1, r3
 800b316:	4603      	mov	r3, r0
 800b318:	4642      	mov	r2, r8
 800b31a:	189b      	adds	r3, r3, r2
 800b31c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b320:	464b      	mov	r3, r9
 800b322:	460a      	mov	r2, r1
 800b324:	eb42 0303 	adc.w	r3, r2, r3
 800b328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	67bb      	str	r3, [r7, #120]	; 0x78
 800b336:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b338:	f04f 0200 	mov.w	r2, #0
 800b33c:	f04f 0300 	mov.w	r3, #0
 800b340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b344:	4649      	mov	r1, r9
 800b346:	008b      	lsls	r3, r1, #2
 800b348:	4641      	mov	r1, r8
 800b34a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b34e:	4641      	mov	r1, r8
 800b350:	008a      	lsls	r2, r1, #2
 800b352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b356:	f7f5 fc9f 	bl	8000c98 <__aeabi_uldivmod>
 800b35a:	4602      	mov	r2, r0
 800b35c:	460b      	mov	r3, r1
 800b35e:	4b39      	ldr	r3, [pc, #228]	; (800b444 <UART_SetConfig+0x4e4>)
 800b360:	fba3 1302 	umull	r1, r3, r3, r2
 800b364:	095b      	lsrs	r3, r3, #5
 800b366:	2164      	movs	r1, #100	; 0x64
 800b368:	fb01 f303 	mul.w	r3, r1, r3
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	011b      	lsls	r3, r3, #4
 800b370:	3332      	adds	r3, #50	; 0x32
 800b372:	4a34      	ldr	r2, [pc, #208]	; (800b444 <UART_SetConfig+0x4e4>)
 800b374:	fba2 2303 	umull	r2, r3, r2, r3
 800b378:	095b      	lsrs	r3, r3, #5
 800b37a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b37e:	441c      	add	r4, r3
 800b380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b384:	2200      	movs	r2, #0
 800b386:	673b      	str	r3, [r7, #112]	; 0x70
 800b388:	677a      	str	r2, [r7, #116]	; 0x74
 800b38a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b38e:	4642      	mov	r2, r8
 800b390:	464b      	mov	r3, r9
 800b392:	1891      	adds	r1, r2, r2
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	415b      	adcs	r3, r3
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b39e:	4641      	mov	r1, r8
 800b3a0:	1851      	adds	r1, r2, r1
 800b3a2:	6039      	str	r1, [r7, #0]
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	414b      	adcs	r3, r1
 800b3a8:	607b      	str	r3, [r7, #4]
 800b3aa:	f04f 0200 	mov.w	r2, #0
 800b3ae:	f04f 0300 	mov.w	r3, #0
 800b3b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b3b6:	4659      	mov	r1, fp
 800b3b8:	00cb      	lsls	r3, r1, #3
 800b3ba:	4651      	mov	r1, sl
 800b3bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3c0:	4651      	mov	r1, sl
 800b3c2:	00ca      	lsls	r2, r1, #3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	189b      	adds	r3, r3, r2
 800b3ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	eb42 0303 	adc.w	r3, r2, r3
 800b3d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b3da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	663b      	str	r3, [r7, #96]	; 0x60
 800b3e4:	667a      	str	r2, [r7, #100]	; 0x64
 800b3e6:	f04f 0200 	mov.w	r2, #0
 800b3ea:	f04f 0300 	mov.w	r3, #0
 800b3ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	008b      	lsls	r3, r1, #2
 800b3f6:	4641      	mov	r1, r8
 800b3f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	008a      	lsls	r2, r1, #2
 800b400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b404:	f7f5 fc48 	bl	8000c98 <__aeabi_uldivmod>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <UART_SetConfig+0x4e4>)
 800b40e:	fba3 1302 	umull	r1, r3, r3, r2
 800b412:	095b      	lsrs	r3, r3, #5
 800b414:	2164      	movs	r1, #100	; 0x64
 800b416:	fb01 f303 	mul.w	r3, r1, r3
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	3332      	adds	r3, #50	; 0x32
 800b420:	4a08      	ldr	r2, [pc, #32]	; (800b444 <UART_SetConfig+0x4e4>)
 800b422:	fba2 2303 	umull	r2, r3, r2, r3
 800b426:	095b      	lsrs	r3, r3, #5
 800b428:	f003 020f 	and.w	r2, r3, #15
 800b42c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4422      	add	r2, r4
 800b434:	609a      	str	r2, [r3, #8]
}
 800b436:	bf00      	nop
 800b438:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b43c:	46bd      	mov	sp, r7
 800b43e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b442:	bf00      	nop
 800b444:	51eb851f 	.word	0x51eb851f

0800b448 <__errno>:
 800b448:	4b01      	ldr	r3, [pc, #4]	; (800b450 <__errno+0x8>)
 800b44a:	6818      	ldr	r0, [r3, #0]
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	20000228 	.word	0x20000228

0800b454 <__libc_init_array>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4d0d      	ldr	r5, [pc, #52]	; (800b48c <__libc_init_array+0x38>)
 800b458:	4c0d      	ldr	r4, [pc, #52]	; (800b490 <__libc_init_array+0x3c>)
 800b45a:	1b64      	subs	r4, r4, r5
 800b45c:	10a4      	asrs	r4, r4, #2
 800b45e:	2600      	movs	r6, #0
 800b460:	42a6      	cmp	r6, r4
 800b462:	d109      	bne.n	800b478 <__libc_init_array+0x24>
 800b464:	4d0b      	ldr	r5, [pc, #44]	; (800b494 <__libc_init_array+0x40>)
 800b466:	4c0c      	ldr	r4, [pc, #48]	; (800b498 <__libc_init_array+0x44>)
 800b468:	f004 fdda 	bl	8010020 <_init>
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	2600      	movs	r6, #0
 800b472:	42a6      	cmp	r6, r4
 800b474:	d105      	bne.n	800b482 <__libc_init_array+0x2e>
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47c:	4798      	blx	r3
 800b47e:	3601      	adds	r6, #1
 800b480:	e7ee      	b.n	800b460 <__libc_init_array+0xc>
 800b482:	f855 3b04 	ldr.w	r3, [r5], #4
 800b486:	4798      	blx	r3
 800b488:	3601      	adds	r6, #1
 800b48a:	e7f2      	b.n	800b472 <__libc_init_array+0x1e>
 800b48c:	0801050c 	.word	0x0801050c
 800b490:	0801050c 	.word	0x0801050c
 800b494:	0801050c 	.word	0x0801050c
 800b498:	08010510 	.word	0x08010510

0800b49c <memcpy>:
 800b49c:	440a      	add	r2, r1
 800b49e:	4291      	cmp	r1, r2
 800b4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4a4:	d100      	bne.n	800b4a8 <memcpy+0xc>
 800b4a6:	4770      	bx	lr
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	d1f9      	bne.n	800b4aa <memcpy+0xe>
 800b4b6:	bd10      	pop	{r4, pc}

0800b4b8 <memset>:
 800b4b8:	4402      	add	r2, r0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d100      	bne.n	800b4c2 <memset+0xa>
 800b4c0:	4770      	bx	lr
 800b4c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4c6:	e7f9      	b.n	800b4bc <memset+0x4>

0800b4c8 <__cvt>:
 800b4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	ec55 4b10 	vmov	r4, r5, d0
 800b4d0:	2d00      	cmp	r5, #0
 800b4d2:	460e      	mov	r6, r1
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	462b      	mov	r3, r5
 800b4d8:	bfbb      	ittet	lt
 800b4da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b4de:	461d      	movlt	r5, r3
 800b4e0:	2300      	movge	r3, #0
 800b4e2:	232d      	movlt	r3, #45	; 0x2d
 800b4e4:	700b      	strb	r3, [r1, #0]
 800b4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b4ec:	4691      	mov	r9, r2
 800b4ee:	f023 0820 	bic.w	r8, r3, #32
 800b4f2:	bfbc      	itt	lt
 800b4f4:	4622      	movlt	r2, r4
 800b4f6:	4614      	movlt	r4, r2
 800b4f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b4fc:	d005      	beq.n	800b50a <__cvt+0x42>
 800b4fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b502:	d100      	bne.n	800b506 <__cvt+0x3e>
 800b504:	3601      	adds	r6, #1
 800b506:	2102      	movs	r1, #2
 800b508:	e000      	b.n	800b50c <__cvt+0x44>
 800b50a:	2103      	movs	r1, #3
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	ab02      	add	r3, sp, #8
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	ec45 4b10 	vmov	d0, r4, r5
 800b518:	4653      	mov	r3, sl
 800b51a:	4632      	mov	r2, r6
 800b51c:	f001 fdac 	bl	800d078 <_dtoa_r>
 800b520:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b524:	4607      	mov	r7, r0
 800b526:	d102      	bne.n	800b52e <__cvt+0x66>
 800b528:	f019 0f01 	tst.w	r9, #1
 800b52c:	d022      	beq.n	800b574 <__cvt+0xac>
 800b52e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b532:	eb07 0906 	add.w	r9, r7, r6
 800b536:	d110      	bne.n	800b55a <__cvt+0x92>
 800b538:	783b      	ldrb	r3, [r7, #0]
 800b53a:	2b30      	cmp	r3, #48	; 0x30
 800b53c:	d10a      	bne.n	800b554 <__cvt+0x8c>
 800b53e:	2200      	movs	r2, #0
 800b540:	2300      	movs	r3, #0
 800b542:	4620      	mov	r0, r4
 800b544:	4629      	mov	r1, r5
 800b546:	f7f5 fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800b54a:	b918      	cbnz	r0, 800b554 <__cvt+0x8c>
 800b54c:	f1c6 0601 	rsb	r6, r6, #1
 800b550:	f8ca 6000 	str.w	r6, [sl]
 800b554:	f8da 3000 	ldr.w	r3, [sl]
 800b558:	4499      	add	r9, r3
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f5 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b566:	b108      	cbz	r0, 800b56c <__cvt+0xa4>
 800b568:	f8cd 900c 	str.w	r9, [sp, #12]
 800b56c:	2230      	movs	r2, #48	; 0x30
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	454b      	cmp	r3, r9
 800b572:	d307      	bcc.n	800b584 <__cvt+0xbc>
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b578:	1bdb      	subs	r3, r3, r7
 800b57a:	4638      	mov	r0, r7
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	b004      	add	sp, #16
 800b580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b584:	1c59      	adds	r1, r3, #1
 800b586:	9103      	str	r1, [sp, #12]
 800b588:	701a      	strb	r2, [r3, #0]
 800b58a:	e7f0      	b.n	800b56e <__cvt+0xa6>

0800b58c <__exponent>:
 800b58c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b58e:	4603      	mov	r3, r0
 800b590:	2900      	cmp	r1, #0
 800b592:	bfb8      	it	lt
 800b594:	4249      	neglt	r1, r1
 800b596:	f803 2b02 	strb.w	r2, [r3], #2
 800b59a:	bfb4      	ite	lt
 800b59c:	222d      	movlt	r2, #45	; 0x2d
 800b59e:	222b      	movge	r2, #43	; 0x2b
 800b5a0:	2909      	cmp	r1, #9
 800b5a2:	7042      	strb	r2, [r0, #1]
 800b5a4:	dd2a      	ble.n	800b5fc <__exponent+0x70>
 800b5a6:	f10d 0407 	add.w	r4, sp, #7
 800b5aa:	46a4      	mov	ip, r4
 800b5ac:	270a      	movs	r7, #10
 800b5ae:	46a6      	mov	lr, r4
 800b5b0:	460a      	mov	r2, r1
 800b5b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b5b6:	fb07 1516 	mls	r5, r7, r6, r1
 800b5ba:	3530      	adds	r5, #48	; 0x30
 800b5bc:	2a63      	cmp	r2, #99	; 0x63
 800b5be:	f104 34ff 	add.w	r4, r4, #4294967295
 800b5c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	dcf1      	bgt.n	800b5ae <__exponent+0x22>
 800b5ca:	3130      	adds	r1, #48	; 0x30
 800b5cc:	f1ae 0502 	sub.w	r5, lr, #2
 800b5d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b5d4:	1c44      	adds	r4, r0, #1
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4561      	cmp	r1, ip
 800b5da:	d30a      	bcc.n	800b5f2 <__exponent+0x66>
 800b5dc:	f10d 0209 	add.w	r2, sp, #9
 800b5e0:	eba2 020e 	sub.w	r2, r2, lr
 800b5e4:	4565      	cmp	r5, ip
 800b5e6:	bf88      	it	hi
 800b5e8:	2200      	movhi	r2, #0
 800b5ea:	4413      	add	r3, r2
 800b5ec:	1a18      	subs	r0, r3, r0
 800b5ee:	b003      	add	sp, #12
 800b5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b5fa:	e7ed      	b.n	800b5d8 <__exponent+0x4c>
 800b5fc:	2330      	movs	r3, #48	; 0x30
 800b5fe:	3130      	adds	r1, #48	; 0x30
 800b600:	7083      	strb	r3, [r0, #2]
 800b602:	70c1      	strb	r1, [r0, #3]
 800b604:	1d03      	adds	r3, r0, #4
 800b606:	e7f1      	b.n	800b5ec <__exponent+0x60>

0800b608 <_printf_float>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	ed2d 8b02 	vpush	{d8}
 800b610:	b08d      	sub	sp, #52	; 0x34
 800b612:	460c      	mov	r4, r1
 800b614:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b618:	4616      	mov	r6, r2
 800b61a:	461f      	mov	r7, r3
 800b61c:	4605      	mov	r5, r0
 800b61e:	f002 fe89 	bl	800e334 <_localeconv_r>
 800b622:	f8d0 a000 	ldr.w	sl, [r0]
 800b626:	4650      	mov	r0, sl
 800b628:	f7f4 fdda 	bl	80001e0 <strlen>
 800b62c:	2300      	movs	r3, #0
 800b62e:	930a      	str	r3, [sp, #40]	; 0x28
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	9305      	str	r3, [sp, #20]
 800b634:	f8d8 3000 	ldr.w	r3, [r8]
 800b638:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b63c:	3307      	adds	r3, #7
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	f103 0208 	add.w	r2, r3, #8
 800b646:	f8c8 2000 	str.w	r2, [r8]
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b652:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b656:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b65a:	9307      	str	r3, [sp, #28]
 800b65c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b660:	ee08 0a10 	vmov	s16, r0
 800b664:	4b9f      	ldr	r3, [pc, #636]	; (800b8e4 <_printf_float+0x2dc>)
 800b666:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b66a:	f04f 32ff 	mov.w	r2, #4294967295
 800b66e:	f7f5 fa65 	bl	8000b3c <__aeabi_dcmpun>
 800b672:	bb88      	cbnz	r0, 800b6d8 <_printf_float+0xd0>
 800b674:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b678:	4b9a      	ldr	r3, [pc, #616]	; (800b8e4 <_printf_float+0x2dc>)
 800b67a:	f04f 32ff 	mov.w	r2, #4294967295
 800b67e:	f7f5 fa3f 	bl	8000b00 <__aeabi_dcmple>
 800b682:	bb48      	cbnz	r0, 800b6d8 <_printf_float+0xd0>
 800b684:	2200      	movs	r2, #0
 800b686:	2300      	movs	r3, #0
 800b688:	4640      	mov	r0, r8
 800b68a:	4649      	mov	r1, r9
 800b68c:	f7f5 fa2e 	bl	8000aec <__aeabi_dcmplt>
 800b690:	b110      	cbz	r0, 800b698 <_printf_float+0x90>
 800b692:	232d      	movs	r3, #45	; 0x2d
 800b694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b698:	4b93      	ldr	r3, [pc, #588]	; (800b8e8 <_printf_float+0x2e0>)
 800b69a:	4894      	ldr	r0, [pc, #592]	; (800b8ec <_printf_float+0x2e4>)
 800b69c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b6a0:	bf94      	ite	ls
 800b6a2:	4698      	movls	r8, r3
 800b6a4:	4680      	movhi	r8, r0
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	6123      	str	r3, [r4, #16]
 800b6aa:	9b05      	ldr	r3, [sp, #20]
 800b6ac:	f023 0204 	bic.w	r2, r3, #4
 800b6b0:	6022      	str	r2, [r4, #0]
 800b6b2:	f04f 0900 	mov.w	r9, #0
 800b6b6:	9700      	str	r7, [sp, #0]
 800b6b8:	4633      	mov	r3, r6
 800b6ba:	aa0b      	add	r2, sp, #44	; 0x2c
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f000 f9d8 	bl	800ba74 <_printf_common>
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	f040 8090 	bne.w	800b7ea <_printf_float+0x1e2>
 800b6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ce:	b00d      	add	sp, #52	; 0x34
 800b6d0:	ecbd 8b02 	vpop	{d8}
 800b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	4642      	mov	r2, r8
 800b6da:	464b      	mov	r3, r9
 800b6dc:	4640      	mov	r0, r8
 800b6de:	4649      	mov	r1, r9
 800b6e0:	f7f5 fa2c 	bl	8000b3c <__aeabi_dcmpun>
 800b6e4:	b140      	cbz	r0, 800b6f8 <_printf_float+0xf0>
 800b6e6:	464b      	mov	r3, r9
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bfbc      	itt	lt
 800b6ec:	232d      	movlt	r3, #45	; 0x2d
 800b6ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b6f2:	487f      	ldr	r0, [pc, #508]	; (800b8f0 <_printf_float+0x2e8>)
 800b6f4:	4b7f      	ldr	r3, [pc, #508]	; (800b8f4 <_printf_float+0x2ec>)
 800b6f6:	e7d1      	b.n	800b69c <_printf_float+0x94>
 800b6f8:	6863      	ldr	r3, [r4, #4]
 800b6fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b6fe:	9206      	str	r2, [sp, #24]
 800b700:	1c5a      	adds	r2, r3, #1
 800b702:	d13f      	bne.n	800b784 <_printf_float+0x17c>
 800b704:	2306      	movs	r3, #6
 800b706:	6063      	str	r3, [r4, #4]
 800b708:	9b05      	ldr	r3, [sp, #20]
 800b70a:	6861      	ldr	r1, [r4, #4]
 800b70c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b710:	2300      	movs	r3, #0
 800b712:	9303      	str	r3, [sp, #12]
 800b714:	ab0a      	add	r3, sp, #40	; 0x28
 800b716:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b71a:	ab09      	add	r3, sp, #36	; 0x24
 800b71c:	ec49 8b10 	vmov	d0, r8, r9
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b728:	4628      	mov	r0, r5
 800b72a:	f7ff fecd 	bl	800b4c8 <__cvt>
 800b72e:	9b06      	ldr	r3, [sp, #24]
 800b730:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b732:	2b47      	cmp	r3, #71	; 0x47
 800b734:	4680      	mov	r8, r0
 800b736:	d108      	bne.n	800b74a <_printf_float+0x142>
 800b738:	1cc8      	adds	r0, r1, #3
 800b73a:	db02      	blt.n	800b742 <_printf_float+0x13a>
 800b73c:	6863      	ldr	r3, [r4, #4]
 800b73e:	4299      	cmp	r1, r3
 800b740:	dd41      	ble.n	800b7c6 <_printf_float+0x1be>
 800b742:	f1ab 0b02 	sub.w	fp, fp, #2
 800b746:	fa5f fb8b 	uxtb.w	fp, fp
 800b74a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b74e:	d820      	bhi.n	800b792 <_printf_float+0x18a>
 800b750:	3901      	subs	r1, #1
 800b752:	465a      	mov	r2, fp
 800b754:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b758:	9109      	str	r1, [sp, #36]	; 0x24
 800b75a:	f7ff ff17 	bl	800b58c <__exponent>
 800b75e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b760:	1813      	adds	r3, r2, r0
 800b762:	2a01      	cmp	r2, #1
 800b764:	4681      	mov	r9, r0
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	dc02      	bgt.n	800b770 <_printf_float+0x168>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	07d2      	lsls	r2, r2, #31
 800b76e:	d501      	bpl.n	800b774 <_printf_float+0x16c>
 800b770:	3301      	adds	r3, #1
 800b772:	6123      	str	r3, [r4, #16]
 800b774:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d09c      	beq.n	800b6b6 <_printf_float+0xae>
 800b77c:	232d      	movs	r3, #45	; 0x2d
 800b77e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b782:	e798      	b.n	800b6b6 <_printf_float+0xae>
 800b784:	9a06      	ldr	r2, [sp, #24]
 800b786:	2a47      	cmp	r2, #71	; 0x47
 800b788:	d1be      	bne.n	800b708 <_printf_float+0x100>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1bc      	bne.n	800b708 <_printf_float+0x100>
 800b78e:	2301      	movs	r3, #1
 800b790:	e7b9      	b.n	800b706 <_printf_float+0xfe>
 800b792:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b796:	d118      	bne.n	800b7ca <_printf_float+0x1c2>
 800b798:	2900      	cmp	r1, #0
 800b79a:	6863      	ldr	r3, [r4, #4]
 800b79c:	dd0b      	ble.n	800b7b6 <_printf_float+0x1ae>
 800b79e:	6121      	str	r1, [r4, #16]
 800b7a0:	b913      	cbnz	r3, 800b7a8 <_printf_float+0x1a0>
 800b7a2:	6822      	ldr	r2, [r4, #0]
 800b7a4:	07d0      	lsls	r0, r2, #31
 800b7a6:	d502      	bpl.n	800b7ae <_printf_float+0x1a6>
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	440b      	add	r3, r1
 800b7ac:	6123      	str	r3, [r4, #16]
 800b7ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800b7b0:	f04f 0900 	mov.w	r9, #0
 800b7b4:	e7de      	b.n	800b774 <_printf_float+0x16c>
 800b7b6:	b913      	cbnz	r3, 800b7be <_printf_float+0x1b6>
 800b7b8:	6822      	ldr	r2, [r4, #0]
 800b7ba:	07d2      	lsls	r2, r2, #31
 800b7bc:	d501      	bpl.n	800b7c2 <_printf_float+0x1ba>
 800b7be:	3302      	adds	r3, #2
 800b7c0:	e7f4      	b.n	800b7ac <_printf_float+0x1a4>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e7f2      	b.n	800b7ac <_printf_float+0x1a4>
 800b7c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7cc:	4299      	cmp	r1, r3
 800b7ce:	db05      	blt.n	800b7dc <_printf_float+0x1d4>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	6121      	str	r1, [r4, #16]
 800b7d4:	07d8      	lsls	r0, r3, #31
 800b7d6:	d5ea      	bpl.n	800b7ae <_printf_float+0x1a6>
 800b7d8:	1c4b      	adds	r3, r1, #1
 800b7da:	e7e7      	b.n	800b7ac <_printf_float+0x1a4>
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	bfd4      	ite	le
 800b7e0:	f1c1 0202 	rsble	r2, r1, #2
 800b7e4:	2201      	movgt	r2, #1
 800b7e6:	4413      	add	r3, r2
 800b7e8:	e7e0      	b.n	800b7ac <_printf_float+0x1a4>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	055a      	lsls	r2, r3, #21
 800b7ee:	d407      	bmi.n	800b800 <_printf_float+0x1f8>
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	4642      	mov	r2, r8
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	47b8      	blx	r7
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d12c      	bne.n	800b858 <_printf_float+0x250>
 800b7fe:	e764      	b.n	800b6ca <_printf_float+0xc2>
 800b800:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b804:	f240 80e0 	bls.w	800b9c8 <_printf_float+0x3c0>
 800b808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b80c:	2200      	movs	r2, #0
 800b80e:	2300      	movs	r3, #0
 800b810:	f7f5 f962 	bl	8000ad8 <__aeabi_dcmpeq>
 800b814:	2800      	cmp	r0, #0
 800b816:	d034      	beq.n	800b882 <_printf_float+0x27a>
 800b818:	4a37      	ldr	r2, [pc, #220]	; (800b8f8 <_printf_float+0x2f0>)
 800b81a:	2301      	movs	r3, #1
 800b81c:	4631      	mov	r1, r6
 800b81e:	4628      	mov	r0, r5
 800b820:	47b8      	blx	r7
 800b822:	3001      	adds	r0, #1
 800b824:	f43f af51 	beq.w	800b6ca <_printf_float+0xc2>
 800b828:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b82c:	429a      	cmp	r2, r3
 800b82e:	db02      	blt.n	800b836 <_printf_float+0x22e>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	07d8      	lsls	r0, r3, #31
 800b834:	d510      	bpl.n	800b858 <_printf_float+0x250>
 800b836:	ee18 3a10 	vmov	r3, s16
 800b83a:	4652      	mov	r2, sl
 800b83c:	4631      	mov	r1, r6
 800b83e:	4628      	mov	r0, r5
 800b840:	47b8      	blx	r7
 800b842:	3001      	adds	r0, #1
 800b844:	f43f af41 	beq.w	800b6ca <_printf_float+0xc2>
 800b848:	f04f 0800 	mov.w	r8, #0
 800b84c:	f104 091a 	add.w	r9, r4, #26
 800b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b852:	3b01      	subs	r3, #1
 800b854:	4543      	cmp	r3, r8
 800b856:	dc09      	bgt.n	800b86c <_printf_float+0x264>
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	079b      	lsls	r3, r3, #30
 800b85c:	f100 8105 	bmi.w	800ba6a <_printf_float+0x462>
 800b860:	68e0      	ldr	r0, [r4, #12]
 800b862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b864:	4298      	cmp	r0, r3
 800b866:	bfb8      	it	lt
 800b868:	4618      	movlt	r0, r3
 800b86a:	e730      	b.n	800b6ce <_printf_float+0xc6>
 800b86c:	2301      	movs	r3, #1
 800b86e:	464a      	mov	r2, r9
 800b870:	4631      	mov	r1, r6
 800b872:	4628      	mov	r0, r5
 800b874:	47b8      	blx	r7
 800b876:	3001      	adds	r0, #1
 800b878:	f43f af27 	beq.w	800b6ca <_printf_float+0xc2>
 800b87c:	f108 0801 	add.w	r8, r8, #1
 800b880:	e7e6      	b.n	800b850 <_printf_float+0x248>
 800b882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b884:	2b00      	cmp	r3, #0
 800b886:	dc39      	bgt.n	800b8fc <_printf_float+0x2f4>
 800b888:	4a1b      	ldr	r2, [pc, #108]	; (800b8f8 <_printf_float+0x2f0>)
 800b88a:	2301      	movs	r3, #1
 800b88c:	4631      	mov	r1, r6
 800b88e:	4628      	mov	r0, r5
 800b890:	47b8      	blx	r7
 800b892:	3001      	adds	r0, #1
 800b894:	f43f af19 	beq.w	800b6ca <_printf_float+0xc2>
 800b898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b89c:	4313      	orrs	r3, r2
 800b89e:	d102      	bne.n	800b8a6 <_printf_float+0x29e>
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	07d9      	lsls	r1, r3, #31
 800b8a4:	d5d8      	bpl.n	800b858 <_printf_float+0x250>
 800b8a6:	ee18 3a10 	vmov	r3, s16
 800b8aa:	4652      	mov	r2, sl
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	47b8      	blx	r7
 800b8b2:	3001      	adds	r0, #1
 800b8b4:	f43f af09 	beq.w	800b6ca <_printf_float+0xc2>
 800b8b8:	f04f 0900 	mov.w	r9, #0
 800b8bc:	f104 0a1a 	add.w	sl, r4, #26
 800b8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c2:	425b      	negs	r3, r3
 800b8c4:	454b      	cmp	r3, r9
 800b8c6:	dc01      	bgt.n	800b8cc <_printf_float+0x2c4>
 800b8c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ca:	e792      	b.n	800b7f2 <_printf_float+0x1ea>
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	4631      	mov	r1, r6
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	47b8      	blx	r7
 800b8d6:	3001      	adds	r0, #1
 800b8d8:	f43f aef7 	beq.w	800b6ca <_printf_float+0xc2>
 800b8dc:	f109 0901 	add.w	r9, r9, #1
 800b8e0:	e7ee      	b.n	800b8c0 <_printf_float+0x2b8>
 800b8e2:	bf00      	nop
 800b8e4:	7fefffff 	.word	0x7fefffff
 800b8e8:	08010064 	.word	0x08010064
 800b8ec:	08010068 	.word	0x08010068
 800b8f0:	08010070 	.word	0x08010070
 800b8f4:	0801006c 	.word	0x0801006c
 800b8f8:	08010074 	.word	0x08010074
 800b8fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b8fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b900:	429a      	cmp	r2, r3
 800b902:	bfa8      	it	ge
 800b904:	461a      	movge	r2, r3
 800b906:	2a00      	cmp	r2, #0
 800b908:	4691      	mov	r9, r2
 800b90a:	dc37      	bgt.n	800b97c <_printf_float+0x374>
 800b90c:	f04f 0b00 	mov.w	fp, #0
 800b910:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b914:	f104 021a 	add.w	r2, r4, #26
 800b918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b91a:	9305      	str	r3, [sp, #20]
 800b91c:	eba3 0309 	sub.w	r3, r3, r9
 800b920:	455b      	cmp	r3, fp
 800b922:	dc33      	bgt.n	800b98c <_printf_float+0x384>
 800b924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b928:	429a      	cmp	r2, r3
 800b92a:	db3b      	blt.n	800b9a4 <_printf_float+0x39c>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d438      	bmi.n	800b9a4 <_printf_float+0x39c>
 800b932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b934:	9a05      	ldr	r2, [sp, #20]
 800b936:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b938:	1a9a      	subs	r2, r3, r2
 800b93a:	eba3 0901 	sub.w	r9, r3, r1
 800b93e:	4591      	cmp	r9, r2
 800b940:	bfa8      	it	ge
 800b942:	4691      	movge	r9, r2
 800b944:	f1b9 0f00 	cmp.w	r9, #0
 800b948:	dc35      	bgt.n	800b9b6 <_printf_float+0x3ae>
 800b94a:	f04f 0800 	mov.w	r8, #0
 800b94e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b952:	f104 0a1a 	add.w	sl, r4, #26
 800b956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	eba3 0309 	sub.w	r3, r3, r9
 800b960:	4543      	cmp	r3, r8
 800b962:	f77f af79 	ble.w	800b858 <_printf_float+0x250>
 800b966:	2301      	movs	r3, #1
 800b968:	4652      	mov	r2, sl
 800b96a:	4631      	mov	r1, r6
 800b96c:	4628      	mov	r0, r5
 800b96e:	47b8      	blx	r7
 800b970:	3001      	adds	r0, #1
 800b972:	f43f aeaa 	beq.w	800b6ca <_printf_float+0xc2>
 800b976:	f108 0801 	add.w	r8, r8, #1
 800b97a:	e7ec      	b.n	800b956 <_printf_float+0x34e>
 800b97c:	4613      	mov	r3, r2
 800b97e:	4631      	mov	r1, r6
 800b980:	4642      	mov	r2, r8
 800b982:	4628      	mov	r0, r5
 800b984:	47b8      	blx	r7
 800b986:	3001      	adds	r0, #1
 800b988:	d1c0      	bne.n	800b90c <_printf_float+0x304>
 800b98a:	e69e      	b.n	800b6ca <_printf_float+0xc2>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4631      	mov	r1, r6
 800b990:	4628      	mov	r0, r5
 800b992:	9205      	str	r2, [sp, #20]
 800b994:	47b8      	blx	r7
 800b996:	3001      	adds	r0, #1
 800b998:	f43f ae97 	beq.w	800b6ca <_printf_float+0xc2>
 800b99c:	9a05      	ldr	r2, [sp, #20]
 800b99e:	f10b 0b01 	add.w	fp, fp, #1
 800b9a2:	e7b9      	b.n	800b918 <_printf_float+0x310>
 800b9a4:	ee18 3a10 	vmov	r3, s16
 800b9a8:	4652      	mov	r2, sl
 800b9aa:	4631      	mov	r1, r6
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	47b8      	blx	r7
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d1be      	bne.n	800b932 <_printf_float+0x32a>
 800b9b4:	e689      	b.n	800b6ca <_printf_float+0xc2>
 800b9b6:	9a05      	ldr	r2, [sp, #20]
 800b9b8:	464b      	mov	r3, r9
 800b9ba:	4442      	add	r2, r8
 800b9bc:	4631      	mov	r1, r6
 800b9be:	4628      	mov	r0, r5
 800b9c0:	47b8      	blx	r7
 800b9c2:	3001      	adds	r0, #1
 800b9c4:	d1c1      	bne.n	800b94a <_printf_float+0x342>
 800b9c6:	e680      	b.n	800b6ca <_printf_float+0xc2>
 800b9c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9ca:	2a01      	cmp	r2, #1
 800b9cc:	dc01      	bgt.n	800b9d2 <_printf_float+0x3ca>
 800b9ce:	07db      	lsls	r3, r3, #31
 800b9d0:	d538      	bpl.n	800ba44 <_printf_float+0x43c>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	4642      	mov	r2, r8
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b8      	blx	r7
 800b9dc:	3001      	adds	r0, #1
 800b9de:	f43f ae74 	beq.w	800b6ca <_printf_float+0xc2>
 800b9e2:	ee18 3a10 	vmov	r3, s16
 800b9e6:	4652      	mov	r2, sl
 800b9e8:	4631      	mov	r1, r6
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	47b8      	blx	r7
 800b9ee:	3001      	adds	r0, #1
 800b9f0:	f43f ae6b 	beq.w	800b6ca <_printf_float+0xc2>
 800b9f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f7f5 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba00:	b9d8      	cbnz	r0, 800ba3a <_printf_float+0x432>
 800ba02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba04:	f108 0201 	add.w	r2, r8, #1
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	47b8      	blx	r7
 800ba10:	3001      	adds	r0, #1
 800ba12:	d10e      	bne.n	800ba32 <_printf_float+0x42a>
 800ba14:	e659      	b.n	800b6ca <_printf_float+0xc2>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4652      	mov	r2, sl
 800ba1a:	4631      	mov	r1, r6
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b8      	blx	r7
 800ba20:	3001      	adds	r0, #1
 800ba22:	f43f ae52 	beq.w	800b6ca <_printf_float+0xc2>
 800ba26:	f108 0801 	add.w	r8, r8, #1
 800ba2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	4543      	cmp	r3, r8
 800ba30:	dcf1      	bgt.n	800ba16 <_printf_float+0x40e>
 800ba32:	464b      	mov	r3, r9
 800ba34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba38:	e6dc      	b.n	800b7f4 <_printf_float+0x1ec>
 800ba3a:	f04f 0800 	mov.w	r8, #0
 800ba3e:	f104 0a1a 	add.w	sl, r4, #26
 800ba42:	e7f2      	b.n	800ba2a <_printf_float+0x422>
 800ba44:	2301      	movs	r3, #1
 800ba46:	4642      	mov	r2, r8
 800ba48:	e7df      	b.n	800ba0a <_printf_float+0x402>
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	464a      	mov	r2, r9
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	47b8      	blx	r7
 800ba54:	3001      	adds	r0, #1
 800ba56:	f43f ae38 	beq.w	800b6ca <_printf_float+0xc2>
 800ba5a:	f108 0801 	add.w	r8, r8, #1
 800ba5e:	68e3      	ldr	r3, [r4, #12]
 800ba60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba62:	1a5b      	subs	r3, r3, r1
 800ba64:	4543      	cmp	r3, r8
 800ba66:	dcf0      	bgt.n	800ba4a <_printf_float+0x442>
 800ba68:	e6fa      	b.n	800b860 <_printf_float+0x258>
 800ba6a:	f04f 0800 	mov.w	r8, #0
 800ba6e:	f104 0919 	add.w	r9, r4, #25
 800ba72:	e7f4      	b.n	800ba5e <_printf_float+0x456>

0800ba74 <_printf_common>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	4616      	mov	r6, r2
 800ba7a:	4699      	mov	r9, r3
 800ba7c:	688a      	ldr	r2, [r1, #8]
 800ba7e:	690b      	ldr	r3, [r1, #16]
 800ba80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba84:	4293      	cmp	r3, r2
 800ba86:	bfb8      	it	lt
 800ba88:	4613      	movlt	r3, r2
 800ba8a:	6033      	str	r3, [r6, #0]
 800ba8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba90:	4607      	mov	r7, r0
 800ba92:	460c      	mov	r4, r1
 800ba94:	b10a      	cbz	r2, 800ba9a <_printf_common+0x26>
 800ba96:	3301      	adds	r3, #1
 800ba98:	6033      	str	r3, [r6, #0]
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	0699      	lsls	r1, r3, #26
 800ba9e:	bf42      	ittt	mi
 800baa0:	6833      	ldrmi	r3, [r6, #0]
 800baa2:	3302      	addmi	r3, #2
 800baa4:	6033      	strmi	r3, [r6, #0]
 800baa6:	6825      	ldr	r5, [r4, #0]
 800baa8:	f015 0506 	ands.w	r5, r5, #6
 800baac:	d106      	bne.n	800babc <_printf_common+0x48>
 800baae:	f104 0a19 	add.w	sl, r4, #25
 800bab2:	68e3      	ldr	r3, [r4, #12]
 800bab4:	6832      	ldr	r2, [r6, #0]
 800bab6:	1a9b      	subs	r3, r3, r2
 800bab8:	42ab      	cmp	r3, r5
 800baba:	dc26      	bgt.n	800bb0a <_printf_common+0x96>
 800babc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bac0:	1e13      	subs	r3, r2, #0
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	bf18      	it	ne
 800bac6:	2301      	movne	r3, #1
 800bac8:	0692      	lsls	r2, r2, #26
 800baca:	d42b      	bmi.n	800bb24 <_printf_common+0xb0>
 800bacc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bad0:	4649      	mov	r1, r9
 800bad2:	4638      	mov	r0, r7
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d01e      	beq.n	800bb18 <_printf_common+0xa4>
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	68e5      	ldr	r5, [r4, #12]
 800bade:	6832      	ldr	r2, [r6, #0]
 800bae0:	f003 0306 	and.w	r3, r3, #6
 800bae4:	2b04      	cmp	r3, #4
 800bae6:	bf08      	it	eq
 800bae8:	1aad      	subeq	r5, r5, r2
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	6922      	ldr	r2, [r4, #16]
 800baee:	bf0c      	ite	eq
 800baf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baf4:	2500      	movne	r5, #0
 800baf6:	4293      	cmp	r3, r2
 800baf8:	bfc4      	itt	gt
 800bafa:	1a9b      	subgt	r3, r3, r2
 800bafc:	18ed      	addgt	r5, r5, r3
 800bafe:	2600      	movs	r6, #0
 800bb00:	341a      	adds	r4, #26
 800bb02:	42b5      	cmp	r5, r6
 800bb04:	d11a      	bne.n	800bb3c <_printf_common+0xc8>
 800bb06:	2000      	movs	r0, #0
 800bb08:	e008      	b.n	800bb1c <_printf_common+0xa8>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4638      	mov	r0, r7
 800bb12:	47c0      	blx	r8
 800bb14:	3001      	adds	r0, #1
 800bb16:	d103      	bne.n	800bb20 <_printf_common+0xac>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb20:	3501      	adds	r5, #1
 800bb22:	e7c6      	b.n	800bab2 <_printf_common+0x3e>
 800bb24:	18e1      	adds	r1, r4, r3
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	2030      	movs	r0, #48	; 0x30
 800bb2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb2e:	4422      	add	r2, r4
 800bb30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb38:	3302      	adds	r3, #2
 800bb3a:	e7c7      	b.n	800bacc <_printf_common+0x58>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	4622      	mov	r2, r4
 800bb40:	4649      	mov	r1, r9
 800bb42:	4638      	mov	r0, r7
 800bb44:	47c0      	blx	r8
 800bb46:	3001      	adds	r0, #1
 800bb48:	d0e6      	beq.n	800bb18 <_printf_common+0xa4>
 800bb4a:	3601      	adds	r6, #1
 800bb4c:	e7d9      	b.n	800bb02 <_printf_common+0x8e>
	...

0800bb50 <_printf_i>:
 800bb50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb54:	7e0f      	ldrb	r7, [r1, #24]
 800bb56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb58:	2f78      	cmp	r7, #120	; 0x78
 800bb5a:	4691      	mov	r9, r2
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	469a      	mov	sl, r3
 800bb62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb66:	d807      	bhi.n	800bb78 <_printf_i+0x28>
 800bb68:	2f62      	cmp	r7, #98	; 0x62
 800bb6a:	d80a      	bhi.n	800bb82 <_printf_i+0x32>
 800bb6c:	2f00      	cmp	r7, #0
 800bb6e:	f000 80d8 	beq.w	800bd22 <_printf_i+0x1d2>
 800bb72:	2f58      	cmp	r7, #88	; 0x58
 800bb74:	f000 80a3 	beq.w	800bcbe <_printf_i+0x16e>
 800bb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb80:	e03a      	b.n	800bbf8 <_printf_i+0xa8>
 800bb82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb86:	2b15      	cmp	r3, #21
 800bb88:	d8f6      	bhi.n	800bb78 <_printf_i+0x28>
 800bb8a:	a101      	add	r1, pc, #4	; (adr r1, 800bb90 <_printf_i+0x40>)
 800bb8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb90:	0800bbe9 	.word	0x0800bbe9
 800bb94:	0800bbfd 	.word	0x0800bbfd
 800bb98:	0800bb79 	.word	0x0800bb79
 800bb9c:	0800bb79 	.word	0x0800bb79
 800bba0:	0800bb79 	.word	0x0800bb79
 800bba4:	0800bb79 	.word	0x0800bb79
 800bba8:	0800bbfd 	.word	0x0800bbfd
 800bbac:	0800bb79 	.word	0x0800bb79
 800bbb0:	0800bb79 	.word	0x0800bb79
 800bbb4:	0800bb79 	.word	0x0800bb79
 800bbb8:	0800bb79 	.word	0x0800bb79
 800bbbc:	0800bd09 	.word	0x0800bd09
 800bbc0:	0800bc2d 	.word	0x0800bc2d
 800bbc4:	0800bceb 	.word	0x0800bceb
 800bbc8:	0800bb79 	.word	0x0800bb79
 800bbcc:	0800bb79 	.word	0x0800bb79
 800bbd0:	0800bd2b 	.word	0x0800bd2b
 800bbd4:	0800bb79 	.word	0x0800bb79
 800bbd8:	0800bc2d 	.word	0x0800bc2d
 800bbdc:	0800bb79 	.word	0x0800bb79
 800bbe0:	0800bb79 	.word	0x0800bb79
 800bbe4:	0800bcf3 	.word	0x0800bcf3
 800bbe8:	682b      	ldr	r3, [r5, #0]
 800bbea:	1d1a      	adds	r2, r3, #4
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	602a      	str	r2, [r5, #0]
 800bbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	e0a3      	b.n	800bd44 <_printf_i+0x1f4>
 800bbfc:	6820      	ldr	r0, [r4, #0]
 800bbfe:	6829      	ldr	r1, [r5, #0]
 800bc00:	0606      	lsls	r6, r0, #24
 800bc02:	f101 0304 	add.w	r3, r1, #4
 800bc06:	d50a      	bpl.n	800bc1e <_printf_i+0xce>
 800bc08:	680e      	ldr	r6, [r1, #0]
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	da03      	bge.n	800bc18 <_printf_i+0xc8>
 800bc10:	232d      	movs	r3, #45	; 0x2d
 800bc12:	4276      	negs	r6, r6
 800bc14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc18:	485e      	ldr	r0, [pc, #376]	; (800bd94 <_printf_i+0x244>)
 800bc1a:	230a      	movs	r3, #10
 800bc1c:	e019      	b.n	800bc52 <_printf_i+0x102>
 800bc1e:	680e      	ldr	r6, [r1, #0]
 800bc20:	602b      	str	r3, [r5, #0]
 800bc22:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc26:	bf18      	it	ne
 800bc28:	b236      	sxthne	r6, r6
 800bc2a:	e7ef      	b.n	800bc0c <_printf_i+0xbc>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	6820      	ldr	r0, [r4, #0]
 800bc30:	1d19      	adds	r1, r3, #4
 800bc32:	6029      	str	r1, [r5, #0]
 800bc34:	0601      	lsls	r1, r0, #24
 800bc36:	d501      	bpl.n	800bc3c <_printf_i+0xec>
 800bc38:	681e      	ldr	r6, [r3, #0]
 800bc3a:	e002      	b.n	800bc42 <_printf_i+0xf2>
 800bc3c:	0646      	lsls	r6, r0, #25
 800bc3e:	d5fb      	bpl.n	800bc38 <_printf_i+0xe8>
 800bc40:	881e      	ldrh	r6, [r3, #0]
 800bc42:	4854      	ldr	r0, [pc, #336]	; (800bd94 <_printf_i+0x244>)
 800bc44:	2f6f      	cmp	r7, #111	; 0x6f
 800bc46:	bf0c      	ite	eq
 800bc48:	2308      	moveq	r3, #8
 800bc4a:	230a      	movne	r3, #10
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc52:	6865      	ldr	r5, [r4, #4]
 800bc54:	60a5      	str	r5, [r4, #8]
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	bfa2      	ittt	ge
 800bc5a:	6821      	ldrge	r1, [r4, #0]
 800bc5c:	f021 0104 	bicge.w	r1, r1, #4
 800bc60:	6021      	strge	r1, [r4, #0]
 800bc62:	b90e      	cbnz	r6, 800bc68 <_printf_i+0x118>
 800bc64:	2d00      	cmp	r5, #0
 800bc66:	d04d      	beq.n	800bd04 <_printf_i+0x1b4>
 800bc68:	4615      	mov	r5, r2
 800bc6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc6e:	fb03 6711 	mls	r7, r3, r1, r6
 800bc72:	5dc7      	ldrb	r7, [r0, r7]
 800bc74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc78:	4637      	mov	r7, r6
 800bc7a:	42bb      	cmp	r3, r7
 800bc7c:	460e      	mov	r6, r1
 800bc7e:	d9f4      	bls.n	800bc6a <_printf_i+0x11a>
 800bc80:	2b08      	cmp	r3, #8
 800bc82:	d10b      	bne.n	800bc9c <_printf_i+0x14c>
 800bc84:	6823      	ldr	r3, [r4, #0]
 800bc86:	07de      	lsls	r6, r3, #31
 800bc88:	d508      	bpl.n	800bc9c <_printf_i+0x14c>
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6861      	ldr	r1, [r4, #4]
 800bc8e:	4299      	cmp	r1, r3
 800bc90:	bfde      	ittt	le
 800bc92:	2330      	movle	r3, #48	; 0x30
 800bc94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc9c:	1b52      	subs	r2, r2, r5
 800bc9e:	6122      	str	r2, [r4, #16]
 800bca0:	f8cd a000 	str.w	sl, [sp]
 800bca4:	464b      	mov	r3, r9
 800bca6:	aa03      	add	r2, sp, #12
 800bca8:	4621      	mov	r1, r4
 800bcaa:	4640      	mov	r0, r8
 800bcac:	f7ff fee2 	bl	800ba74 <_printf_common>
 800bcb0:	3001      	adds	r0, #1
 800bcb2:	d14c      	bne.n	800bd4e <_printf_i+0x1fe>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	b004      	add	sp, #16
 800bcba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcbe:	4835      	ldr	r0, [pc, #212]	; (800bd94 <_printf_i+0x244>)
 800bcc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcc4:	6829      	ldr	r1, [r5, #0]
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	f851 6b04 	ldr.w	r6, [r1], #4
 800bccc:	6029      	str	r1, [r5, #0]
 800bcce:	061d      	lsls	r5, r3, #24
 800bcd0:	d514      	bpl.n	800bcfc <_printf_i+0x1ac>
 800bcd2:	07df      	lsls	r7, r3, #31
 800bcd4:	bf44      	itt	mi
 800bcd6:	f043 0320 	orrmi.w	r3, r3, #32
 800bcda:	6023      	strmi	r3, [r4, #0]
 800bcdc:	b91e      	cbnz	r6, 800bce6 <_printf_i+0x196>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	f023 0320 	bic.w	r3, r3, #32
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	2310      	movs	r3, #16
 800bce8:	e7b0      	b.n	800bc4c <_printf_i+0xfc>
 800bcea:	6823      	ldr	r3, [r4, #0]
 800bcec:	f043 0320 	orr.w	r3, r3, #32
 800bcf0:	6023      	str	r3, [r4, #0]
 800bcf2:	2378      	movs	r3, #120	; 0x78
 800bcf4:	4828      	ldr	r0, [pc, #160]	; (800bd98 <_printf_i+0x248>)
 800bcf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcfa:	e7e3      	b.n	800bcc4 <_printf_i+0x174>
 800bcfc:	0659      	lsls	r1, r3, #25
 800bcfe:	bf48      	it	mi
 800bd00:	b2b6      	uxthmi	r6, r6
 800bd02:	e7e6      	b.n	800bcd2 <_printf_i+0x182>
 800bd04:	4615      	mov	r5, r2
 800bd06:	e7bb      	b.n	800bc80 <_printf_i+0x130>
 800bd08:	682b      	ldr	r3, [r5, #0]
 800bd0a:	6826      	ldr	r6, [r4, #0]
 800bd0c:	6961      	ldr	r1, [r4, #20]
 800bd0e:	1d18      	adds	r0, r3, #4
 800bd10:	6028      	str	r0, [r5, #0]
 800bd12:	0635      	lsls	r5, r6, #24
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	d501      	bpl.n	800bd1c <_printf_i+0x1cc>
 800bd18:	6019      	str	r1, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <_printf_i+0x1d2>
 800bd1c:	0670      	lsls	r0, r6, #25
 800bd1e:	d5fb      	bpl.n	800bd18 <_printf_i+0x1c8>
 800bd20:	8019      	strh	r1, [r3, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	6123      	str	r3, [r4, #16]
 800bd26:	4615      	mov	r5, r2
 800bd28:	e7ba      	b.n	800bca0 <_printf_i+0x150>
 800bd2a:	682b      	ldr	r3, [r5, #0]
 800bd2c:	1d1a      	adds	r2, r3, #4
 800bd2e:	602a      	str	r2, [r5, #0]
 800bd30:	681d      	ldr	r5, [r3, #0]
 800bd32:	6862      	ldr	r2, [r4, #4]
 800bd34:	2100      	movs	r1, #0
 800bd36:	4628      	mov	r0, r5
 800bd38:	f7f4 fa5a 	bl	80001f0 <memchr>
 800bd3c:	b108      	cbz	r0, 800bd42 <_printf_i+0x1f2>
 800bd3e:	1b40      	subs	r0, r0, r5
 800bd40:	6060      	str	r0, [r4, #4]
 800bd42:	6863      	ldr	r3, [r4, #4]
 800bd44:	6123      	str	r3, [r4, #16]
 800bd46:	2300      	movs	r3, #0
 800bd48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd4c:	e7a8      	b.n	800bca0 <_printf_i+0x150>
 800bd4e:	6923      	ldr	r3, [r4, #16]
 800bd50:	462a      	mov	r2, r5
 800bd52:	4649      	mov	r1, r9
 800bd54:	4640      	mov	r0, r8
 800bd56:	47d0      	blx	sl
 800bd58:	3001      	adds	r0, #1
 800bd5a:	d0ab      	beq.n	800bcb4 <_printf_i+0x164>
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	079b      	lsls	r3, r3, #30
 800bd60:	d413      	bmi.n	800bd8a <_printf_i+0x23a>
 800bd62:	68e0      	ldr	r0, [r4, #12]
 800bd64:	9b03      	ldr	r3, [sp, #12]
 800bd66:	4298      	cmp	r0, r3
 800bd68:	bfb8      	it	lt
 800bd6a:	4618      	movlt	r0, r3
 800bd6c:	e7a4      	b.n	800bcb8 <_printf_i+0x168>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4632      	mov	r2, r6
 800bd72:	4649      	mov	r1, r9
 800bd74:	4640      	mov	r0, r8
 800bd76:	47d0      	blx	sl
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d09b      	beq.n	800bcb4 <_printf_i+0x164>
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	68e3      	ldr	r3, [r4, #12]
 800bd80:	9903      	ldr	r1, [sp, #12]
 800bd82:	1a5b      	subs	r3, r3, r1
 800bd84:	42ab      	cmp	r3, r5
 800bd86:	dcf2      	bgt.n	800bd6e <_printf_i+0x21e>
 800bd88:	e7eb      	b.n	800bd62 <_printf_i+0x212>
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	f104 0619 	add.w	r6, r4, #25
 800bd90:	e7f5      	b.n	800bd7e <_printf_i+0x22e>
 800bd92:	bf00      	nop
 800bd94:	08010076 	.word	0x08010076
 800bd98:	08010087 	.word	0x08010087

0800bd9c <_scanf_float>:
 800bd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda0:	b087      	sub	sp, #28
 800bda2:	4617      	mov	r7, r2
 800bda4:	9303      	str	r3, [sp, #12]
 800bda6:	688b      	ldr	r3, [r1, #8]
 800bda8:	1e5a      	subs	r2, r3, #1
 800bdaa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdae:	bf83      	ittte	hi
 800bdb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdb4:	195b      	addhi	r3, r3, r5
 800bdb6:	9302      	strhi	r3, [sp, #8]
 800bdb8:	2300      	movls	r3, #0
 800bdba:	bf86      	itte	hi
 800bdbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bdc0:	608b      	strhi	r3, [r1, #8]
 800bdc2:	9302      	strls	r3, [sp, #8]
 800bdc4:	680b      	ldr	r3, [r1, #0]
 800bdc6:	468b      	mov	fp, r1
 800bdc8:	2500      	movs	r5, #0
 800bdca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bdce:	f84b 3b1c 	str.w	r3, [fp], #28
 800bdd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bdd6:	4680      	mov	r8, r0
 800bdd8:	460c      	mov	r4, r1
 800bdda:	465e      	mov	r6, fp
 800bddc:	46aa      	mov	sl, r5
 800bdde:	46a9      	mov	r9, r5
 800bde0:	9501      	str	r5, [sp, #4]
 800bde2:	68a2      	ldr	r2, [r4, #8]
 800bde4:	b152      	cbz	r2, 800bdfc <_scanf_float+0x60>
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	2b4e      	cmp	r3, #78	; 0x4e
 800bdec:	d864      	bhi.n	800beb8 <_scanf_float+0x11c>
 800bdee:	2b40      	cmp	r3, #64	; 0x40
 800bdf0:	d83c      	bhi.n	800be6c <_scanf_float+0xd0>
 800bdf2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bdf6:	b2c8      	uxtb	r0, r1
 800bdf8:	280e      	cmp	r0, #14
 800bdfa:	d93a      	bls.n	800be72 <_scanf_float+0xd6>
 800bdfc:	f1b9 0f00 	cmp.w	r9, #0
 800be00:	d003      	beq.n	800be0a <_scanf_float+0x6e>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be0e:	f1ba 0f01 	cmp.w	sl, #1
 800be12:	f200 8113 	bhi.w	800c03c <_scanf_float+0x2a0>
 800be16:	455e      	cmp	r6, fp
 800be18:	f200 8105 	bhi.w	800c026 <_scanf_float+0x28a>
 800be1c:	2501      	movs	r5, #1
 800be1e:	4628      	mov	r0, r5
 800be20:	b007      	add	sp, #28
 800be22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be26:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800be2a:	2a0d      	cmp	r2, #13
 800be2c:	d8e6      	bhi.n	800bdfc <_scanf_float+0x60>
 800be2e:	a101      	add	r1, pc, #4	; (adr r1, 800be34 <_scanf_float+0x98>)
 800be30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800be34:	0800bf73 	.word	0x0800bf73
 800be38:	0800bdfd 	.word	0x0800bdfd
 800be3c:	0800bdfd 	.word	0x0800bdfd
 800be40:	0800bdfd 	.word	0x0800bdfd
 800be44:	0800bfd3 	.word	0x0800bfd3
 800be48:	0800bfab 	.word	0x0800bfab
 800be4c:	0800bdfd 	.word	0x0800bdfd
 800be50:	0800bdfd 	.word	0x0800bdfd
 800be54:	0800bf81 	.word	0x0800bf81
 800be58:	0800bdfd 	.word	0x0800bdfd
 800be5c:	0800bdfd 	.word	0x0800bdfd
 800be60:	0800bdfd 	.word	0x0800bdfd
 800be64:	0800bdfd 	.word	0x0800bdfd
 800be68:	0800bf39 	.word	0x0800bf39
 800be6c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800be70:	e7db      	b.n	800be2a <_scanf_float+0x8e>
 800be72:	290e      	cmp	r1, #14
 800be74:	d8c2      	bhi.n	800bdfc <_scanf_float+0x60>
 800be76:	a001      	add	r0, pc, #4	; (adr r0, 800be7c <_scanf_float+0xe0>)
 800be78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800be7c:	0800bf2b 	.word	0x0800bf2b
 800be80:	0800bdfd 	.word	0x0800bdfd
 800be84:	0800bf2b 	.word	0x0800bf2b
 800be88:	0800bfbf 	.word	0x0800bfbf
 800be8c:	0800bdfd 	.word	0x0800bdfd
 800be90:	0800bed9 	.word	0x0800bed9
 800be94:	0800bf15 	.word	0x0800bf15
 800be98:	0800bf15 	.word	0x0800bf15
 800be9c:	0800bf15 	.word	0x0800bf15
 800bea0:	0800bf15 	.word	0x0800bf15
 800bea4:	0800bf15 	.word	0x0800bf15
 800bea8:	0800bf15 	.word	0x0800bf15
 800beac:	0800bf15 	.word	0x0800bf15
 800beb0:	0800bf15 	.word	0x0800bf15
 800beb4:	0800bf15 	.word	0x0800bf15
 800beb8:	2b6e      	cmp	r3, #110	; 0x6e
 800beba:	d809      	bhi.n	800bed0 <_scanf_float+0x134>
 800bebc:	2b60      	cmp	r3, #96	; 0x60
 800bebe:	d8b2      	bhi.n	800be26 <_scanf_float+0x8a>
 800bec0:	2b54      	cmp	r3, #84	; 0x54
 800bec2:	d077      	beq.n	800bfb4 <_scanf_float+0x218>
 800bec4:	2b59      	cmp	r3, #89	; 0x59
 800bec6:	d199      	bne.n	800bdfc <_scanf_float+0x60>
 800bec8:	2d07      	cmp	r5, #7
 800beca:	d197      	bne.n	800bdfc <_scanf_float+0x60>
 800becc:	2508      	movs	r5, #8
 800bece:	e029      	b.n	800bf24 <_scanf_float+0x188>
 800bed0:	2b74      	cmp	r3, #116	; 0x74
 800bed2:	d06f      	beq.n	800bfb4 <_scanf_float+0x218>
 800bed4:	2b79      	cmp	r3, #121	; 0x79
 800bed6:	e7f6      	b.n	800bec6 <_scanf_float+0x12a>
 800bed8:	6821      	ldr	r1, [r4, #0]
 800beda:	05c8      	lsls	r0, r1, #23
 800bedc:	d51a      	bpl.n	800bf14 <_scanf_float+0x178>
 800bede:	9b02      	ldr	r3, [sp, #8]
 800bee0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bee4:	6021      	str	r1, [r4, #0]
 800bee6:	f109 0901 	add.w	r9, r9, #1
 800beea:	b11b      	cbz	r3, 800bef4 <_scanf_float+0x158>
 800beec:	3b01      	subs	r3, #1
 800beee:	3201      	adds	r2, #1
 800bef0:	9302      	str	r3, [sp, #8]
 800bef2:	60a2      	str	r2, [r4, #8]
 800bef4:	68a3      	ldr	r3, [r4, #8]
 800bef6:	3b01      	subs	r3, #1
 800bef8:	60a3      	str	r3, [r4, #8]
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	3301      	adds	r3, #1
 800befe:	6123      	str	r3, [r4, #16]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	607b      	str	r3, [r7, #4]
 800bf08:	f340 8084 	ble.w	800c014 <_scanf_float+0x278>
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	603b      	str	r3, [r7, #0]
 800bf12:	e766      	b.n	800bde2 <_scanf_float+0x46>
 800bf14:	eb1a 0f05 	cmn.w	sl, r5
 800bf18:	f47f af70 	bne.w	800bdfc <_scanf_float+0x60>
 800bf1c:	6822      	ldr	r2, [r4, #0]
 800bf1e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bf22:	6022      	str	r2, [r4, #0]
 800bf24:	f806 3b01 	strb.w	r3, [r6], #1
 800bf28:	e7e4      	b.n	800bef4 <_scanf_float+0x158>
 800bf2a:	6822      	ldr	r2, [r4, #0]
 800bf2c:	0610      	lsls	r0, r2, #24
 800bf2e:	f57f af65 	bpl.w	800bdfc <_scanf_float+0x60>
 800bf32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf36:	e7f4      	b.n	800bf22 <_scanf_float+0x186>
 800bf38:	f1ba 0f00 	cmp.w	sl, #0
 800bf3c:	d10e      	bne.n	800bf5c <_scanf_float+0x1c0>
 800bf3e:	f1b9 0f00 	cmp.w	r9, #0
 800bf42:	d10e      	bne.n	800bf62 <_scanf_float+0x1c6>
 800bf44:	6822      	ldr	r2, [r4, #0]
 800bf46:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf4a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf4e:	d108      	bne.n	800bf62 <_scanf_float+0x1c6>
 800bf50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf54:	6022      	str	r2, [r4, #0]
 800bf56:	f04f 0a01 	mov.w	sl, #1
 800bf5a:	e7e3      	b.n	800bf24 <_scanf_float+0x188>
 800bf5c:	f1ba 0f02 	cmp.w	sl, #2
 800bf60:	d055      	beq.n	800c00e <_scanf_float+0x272>
 800bf62:	2d01      	cmp	r5, #1
 800bf64:	d002      	beq.n	800bf6c <_scanf_float+0x1d0>
 800bf66:	2d04      	cmp	r5, #4
 800bf68:	f47f af48 	bne.w	800bdfc <_scanf_float+0x60>
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	b2ed      	uxtb	r5, r5
 800bf70:	e7d8      	b.n	800bf24 <_scanf_float+0x188>
 800bf72:	f1ba 0f01 	cmp.w	sl, #1
 800bf76:	f47f af41 	bne.w	800bdfc <_scanf_float+0x60>
 800bf7a:	f04f 0a02 	mov.w	sl, #2
 800bf7e:	e7d1      	b.n	800bf24 <_scanf_float+0x188>
 800bf80:	b97d      	cbnz	r5, 800bfa2 <_scanf_float+0x206>
 800bf82:	f1b9 0f00 	cmp.w	r9, #0
 800bf86:	f47f af3c 	bne.w	800be02 <_scanf_float+0x66>
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bf90:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bf94:	f47f af39 	bne.w	800be0a <_scanf_float+0x6e>
 800bf98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	2501      	movs	r5, #1
 800bfa0:	e7c0      	b.n	800bf24 <_scanf_float+0x188>
 800bfa2:	2d03      	cmp	r5, #3
 800bfa4:	d0e2      	beq.n	800bf6c <_scanf_float+0x1d0>
 800bfa6:	2d05      	cmp	r5, #5
 800bfa8:	e7de      	b.n	800bf68 <_scanf_float+0x1cc>
 800bfaa:	2d02      	cmp	r5, #2
 800bfac:	f47f af26 	bne.w	800bdfc <_scanf_float+0x60>
 800bfb0:	2503      	movs	r5, #3
 800bfb2:	e7b7      	b.n	800bf24 <_scanf_float+0x188>
 800bfb4:	2d06      	cmp	r5, #6
 800bfb6:	f47f af21 	bne.w	800bdfc <_scanf_float+0x60>
 800bfba:	2507      	movs	r5, #7
 800bfbc:	e7b2      	b.n	800bf24 <_scanf_float+0x188>
 800bfbe:	6822      	ldr	r2, [r4, #0]
 800bfc0:	0591      	lsls	r1, r2, #22
 800bfc2:	f57f af1b 	bpl.w	800bdfc <_scanf_float+0x60>
 800bfc6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bfca:	6022      	str	r2, [r4, #0]
 800bfcc:	f8cd 9004 	str.w	r9, [sp, #4]
 800bfd0:	e7a8      	b.n	800bf24 <_scanf_float+0x188>
 800bfd2:	6822      	ldr	r2, [r4, #0]
 800bfd4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bfd8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bfdc:	d006      	beq.n	800bfec <_scanf_float+0x250>
 800bfde:	0550      	lsls	r0, r2, #21
 800bfe0:	f57f af0c 	bpl.w	800bdfc <_scanf_float+0x60>
 800bfe4:	f1b9 0f00 	cmp.w	r9, #0
 800bfe8:	f43f af0f 	beq.w	800be0a <_scanf_float+0x6e>
 800bfec:	0591      	lsls	r1, r2, #22
 800bfee:	bf58      	it	pl
 800bff0:	9901      	ldrpl	r1, [sp, #4]
 800bff2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bff6:	bf58      	it	pl
 800bff8:	eba9 0101 	subpl.w	r1, r9, r1
 800bffc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c000:	bf58      	it	pl
 800c002:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c006:	6022      	str	r2, [r4, #0]
 800c008:	f04f 0900 	mov.w	r9, #0
 800c00c:	e78a      	b.n	800bf24 <_scanf_float+0x188>
 800c00e:	f04f 0a03 	mov.w	sl, #3
 800c012:	e787      	b.n	800bf24 <_scanf_float+0x188>
 800c014:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c018:	4639      	mov	r1, r7
 800c01a:	4640      	mov	r0, r8
 800c01c:	4798      	blx	r3
 800c01e:	2800      	cmp	r0, #0
 800c020:	f43f aedf 	beq.w	800bde2 <_scanf_float+0x46>
 800c024:	e6ea      	b.n	800bdfc <_scanf_float+0x60>
 800c026:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c02a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c02e:	463a      	mov	r2, r7
 800c030:	4640      	mov	r0, r8
 800c032:	4798      	blx	r3
 800c034:	6923      	ldr	r3, [r4, #16]
 800c036:	3b01      	subs	r3, #1
 800c038:	6123      	str	r3, [r4, #16]
 800c03a:	e6ec      	b.n	800be16 <_scanf_float+0x7a>
 800c03c:	1e6b      	subs	r3, r5, #1
 800c03e:	2b06      	cmp	r3, #6
 800c040:	d825      	bhi.n	800c08e <_scanf_float+0x2f2>
 800c042:	2d02      	cmp	r5, #2
 800c044:	d836      	bhi.n	800c0b4 <_scanf_float+0x318>
 800c046:	455e      	cmp	r6, fp
 800c048:	f67f aee8 	bls.w	800be1c <_scanf_float+0x80>
 800c04c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c050:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c054:	463a      	mov	r2, r7
 800c056:	4640      	mov	r0, r8
 800c058:	4798      	blx	r3
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	6123      	str	r3, [r4, #16]
 800c060:	e7f1      	b.n	800c046 <_scanf_float+0x2aa>
 800c062:	9802      	ldr	r0, [sp, #8]
 800c064:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c068:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c06c:	9002      	str	r0, [sp, #8]
 800c06e:	463a      	mov	r2, r7
 800c070:	4640      	mov	r0, r8
 800c072:	4798      	blx	r3
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	3b01      	subs	r3, #1
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c07e:	fa5f fa8a 	uxtb.w	sl, sl
 800c082:	f1ba 0f02 	cmp.w	sl, #2
 800c086:	d1ec      	bne.n	800c062 <_scanf_float+0x2c6>
 800c088:	3d03      	subs	r5, #3
 800c08a:	b2ed      	uxtb	r5, r5
 800c08c:	1b76      	subs	r6, r6, r5
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	05da      	lsls	r2, r3, #23
 800c092:	d52f      	bpl.n	800c0f4 <_scanf_float+0x358>
 800c094:	055b      	lsls	r3, r3, #21
 800c096:	d510      	bpl.n	800c0ba <_scanf_float+0x31e>
 800c098:	455e      	cmp	r6, fp
 800c09a:	f67f aebf 	bls.w	800be1c <_scanf_float+0x80>
 800c09e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0a6:	463a      	mov	r2, r7
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4798      	blx	r3
 800c0ac:	6923      	ldr	r3, [r4, #16]
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	6123      	str	r3, [r4, #16]
 800c0b2:	e7f1      	b.n	800c098 <_scanf_float+0x2fc>
 800c0b4:	46aa      	mov	sl, r5
 800c0b6:	9602      	str	r6, [sp, #8]
 800c0b8:	e7df      	b.n	800c07a <_scanf_float+0x2de>
 800c0ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	2965      	cmp	r1, #101	; 0x65
 800c0c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800c0ca:	6123      	str	r3, [r4, #16]
 800c0cc:	d00c      	beq.n	800c0e8 <_scanf_float+0x34c>
 800c0ce:	2945      	cmp	r1, #69	; 0x45
 800c0d0:	d00a      	beq.n	800c0e8 <_scanf_float+0x34c>
 800c0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0d6:	463a      	mov	r2, r7
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4798      	blx	r3
 800c0dc:	6923      	ldr	r3, [r4, #16]
 800c0de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	1eb5      	subs	r5, r6, #2
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0ec:	463a      	mov	r2, r7
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	4798      	blx	r3
 800c0f2:	462e      	mov	r6, r5
 800c0f4:	6825      	ldr	r5, [r4, #0]
 800c0f6:	f015 0510 	ands.w	r5, r5, #16
 800c0fa:	d159      	bne.n	800c1b0 <_scanf_float+0x414>
 800c0fc:	7035      	strb	r5, [r6, #0]
 800c0fe:	6823      	ldr	r3, [r4, #0]
 800c100:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c108:	d11b      	bne.n	800c142 <_scanf_float+0x3a6>
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	454b      	cmp	r3, r9
 800c10e:	eba3 0209 	sub.w	r2, r3, r9
 800c112:	d123      	bne.n	800c15c <_scanf_float+0x3c0>
 800c114:	2200      	movs	r2, #0
 800c116:	4659      	mov	r1, fp
 800c118:	4640      	mov	r0, r8
 800c11a:	f000 fe97 	bl	800ce4c <_strtod_r>
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	9b03      	ldr	r3, [sp, #12]
 800c122:	f012 0f02 	tst.w	r2, #2
 800c126:	ec57 6b10 	vmov	r6, r7, d0
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	d021      	beq.n	800c172 <_scanf_float+0x3d6>
 800c12e:	9903      	ldr	r1, [sp, #12]
 800c130:	1d1a      	adds	r2, r3, #4
 800c132:	600a      	str	r2, [r1, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	e9c3 6700 	strd	r6, r7, [r3]
 800c13a:	68e3      	ldr	r3, [r4, #12]
 800c13c:	3301      	adds	r3, #1
 800c13e:	60e3      	str	r3, [r4, #12]
 800c140:	e66d      	b.n	800be1e <_scanf_float+0x82>
 800c142:	9b04      	ldr	r3, [sp, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0e5      	beq.n	800c114 <_scanf_float+0x378>
 800c148:	9905      	ldr	r1, [sp, #20]
 800c14a:	230a      	movs	r3, #10
 800c14c:	462a      	mov	r2, r5
 800c14e:	3101      	adds	r1, #1
 800c150:	4640      	mov	r0, r8
 800c152:	f000 ff03 	bl	800cf5c <_strtol_r>
 800c156:	9b04      	ldr	r3, [sp, #16]
 800c158:	9e05      	ldr	r6, [sp, #20]
 800c15a:	1ac2      	subs	r2, r0, r3
 800c15c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c160:	429e      	cmp	r6, r3
 800c162:	bf28      	it	cs
 800c164:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c168:	4912      	ldr	r1, [pc, #72]	; (800c1b4 <_scanf_float+0x418>)
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 f82c 	bl	800c1c8 <siprintf>
 800c170:	e7d0      	b.n	800c114 <_scanf_float+0x378>
 800c172:	9903      	ldr	r1, [sp, #12]
 800c174:	f012 0f04 	tst.w	r2, #4
 800c178:	f103 0204 	add.w	r2, r3, #4
 800c17c:	600a      	str	r2, [r1, #0]
 800c17e:	d1d9      	bne.n	800c134 <_scanf_float+0x398>
 800c180:	f8d3 8000 	ldr.w	r8, [r3]
 800c184:	ee10 2a10 	vmov	r2, s0
 800c188:	ee10 0a10 	vmov	r0, s0
 800c18c:	463b      	mov	r3, r7
 800c18e:	4639      	mov	r1, r7
 800c190:	f7f4 fcd4 	bl	8000b3c <__aeabi_dcmpun>
 800c194:	b128      	cbz	r0, 800c1a2 <_scanf_float+0x406>
 800c196:	4808      	ldr	r0, [pc, #32]	; (800c1b8 <_scanf_float+0x41c>)
 800c198:	f000 f810 	bl	800c1bc <nanf>
 800c19c:	ed88 0a00 	vstr	s0, [r8]
 800c1a0:	e7cb      	b.n	800c13a <_scanf_float+0x39e>
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	f7f4 fd27 	bl	8000bf8 <__aeabi_d2f>
 800c1aa:	f8c8 0000 	str.w	r0, [r8]
 800c1ae:	e7c4      	b.n	800c13a <_scanf_float+0x39e>
 800c1b0:	2500      	movs	r5, #0
 800c1b2:	e634      	b.n	800be1e <_scanf_float+0x82>
 800c1b4:	08010098 	.word	0x08010098
 800c1b8:	080104a0 	.word	0x080104a0

0800c1bc <nanf>:
 800c1bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1c4 <nanf+0x8>
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	7fc00000 	.word	0x7fc00000

0800c1c8 <siprintf>:
 800c1c8:	b40e      	push	{r1, r2, r3}
 800c1ca:	b500      	push	{lr}
 800c1cc:	b09c      	sub	sp, #112	; 0x70
 800c1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800c1d0:	9002      	str	r0, [sp, #8]
 800c1d2:	9006      	str	r0, [sp, #24]
 800c1d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1d8:	4809      	ldr	r0, [pc, #36]	; (800c200 <siprintf+0x38>)
 800c1da:	9107      	str	r1, [sp, #28]
 800c1dc:	9104      	str	r1, [sp, #16]
 800c1de:	4909      	ldr	r1, [pc, #36]	; (800c204 <siprintf+0x3c>)
 800c1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e4:	9105      	str	r1, [sp, #20]
 800c1e6:	6800      	ldr	r0, [r0, #0]
 800c1e8:	9301      	str	r3, [sp, #4]
 800c1ea:	a902      	add	r1, sp, #8
 800c1ec:	f002 fed4 	bl	800ef98 <_svfiprintf_r>
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	b01c      	add	sp, #112	; 0x70
 800c1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1fc:	b003      	add	sp, #12
 800c1fe:	4770      	bx	lr
 800c200:	20000228 	.word	0x20000228
 800c204:	ffff0208 	.word	0xffff0208

0800c208 <sulp>:
 800c208:	b570      	push	{r4, r5, r6, lr}
 800c20a:	4604      	mov	r4, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	ec45 4b10 	vmov	d0, r4, r5
 800c212:	4616      	mov	r6, r2
 800c214:	f002 fc1e 	bl	800ea54 <__ulp>
 800c218:	ec51 0b10 	vmov	r0, r1, d0
 800c21c:	b17e      	cbz	r6, 800c23e <sulp+0x36>
 800c21e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c222:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c226:	2b00      	cmp	r3, #0
 800c228:	dd09      	ble.n	800c23e <sulp+0x36>
 800c22a:	051b      	lsls	r3, r3, #20
 800c22c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c230:	2400      	movs	r4, #0
 800c232:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c236:	4622      	mov	r2, r4
 800c238:	462b      	mov	r3, r5
 800c23a:	f7f4 f9e5 	bl	8000608 <__aeabi_dmul>
 800c23e:	bd70      	pop	{r4, r5, r6, pc}

0800c240 <_strtod_l>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	ed2d 8b02 	vpush	{d8}
 800c248:	b09d      	sub	sp, #116	; 0x74
 800c24a:	461f      	mov	r7, r3
 800c24c:	2300      	movs	r3, #0
 800c24e:	9318      	str	r3, [sp, #96]	; 0x60
 800c250:	4ba2      	ldr	r3, [pc, #648]	; (800c4dc <_strtod_l+0x29c>)
 800c252:	9213      	str	r2, [sp, #76]	; 0x4c
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	9305      	str	r3, [sp, #20]
 800c258:	4604      	mov	r4, r0
 800c25a:	4618      	mov	r0, r3
 800c25c:	4688      	mov	r8, r1
 800c25e:	f7f3 ffbf 	bl	80001e0 <strlen>
 800c262:	f04f 0a00 	mov.w	sl, #0
 800c266:	4605      	mov	r5, r0
 800c268:	f04f 0b00 	mov.w	fp, #0
 800c26c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	2a2b      	cmp	r2, #43	; 0x2b
 800c276:	d04e      	beq.n	800c316 <_strtod_l+0xd6>
 800c278:	d83b      	bhi.n	800c2f2 <_strtod_l+0xb2>
 800c27a:	2a0d      	cmp	r2, #13
 800c27c:	d834      	bhi.n	800c2e8 <_strtod_l+0xa8>
 800c27e:	2a08      	cmp	r2, #8
 800c280:	d834      	bhi.n	800c2ec <_strtod_l+0xac>
 800c282:	2a00      	cmp	r2, #0
 800c284:	d03e      	beq.n	800c304 <_strtod_l+0xc4>
 800c286:	2300      	movs	r3, #0
 800c288:	930a      	str	r3, [sp, #40]	; 0x28
 800c28a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c28c:	7833      	ldrb	r3, [r6, #0]
 800c28e:	2b30      	cmp	r3, #48	; 0x30
 800c290:	f040 80b0 	bne.w	800c3f4 <_strtod_l+0x1b4>
 800c294:	7873      	ldrb	r3, [r6, #1]
 800c296:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c29a:	2b58      	cmp	r3, #88	; 0x58
 800c29c:	d168      	bne.n	800c370 <_strtod_l+0x130>
 800c29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	ab18      	add	r3, sp, #96	; 0x60
 800c2a4:	9702      	str	r7, [sp, #8]
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	4a8d      	ldr	r2, [pc, #564]	; (800c4e0 <_strtod_l+0x2a0>)
 800c2aa:	ab19      	add	r3, sp, #100	; 0x64
 800c2ac:	a917      	add	r1, sp, #92	; 0x5c
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f001 fd38 	bl	800dd24 <__gethex>
 800c2b4:	f010 0707 	ands.w	r7, r0, #7
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	d005      	beq.n	800c2c8 <_strtod_l+0x88>
 800c2bc:	2f06      	cmp	r7, #6
 800c2be:	d12c      	bne.n	800c31a <_strtod_l+0xda>
 800c2c0:	3601      	adds	r6, #1
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	9617      	str	r6, [sp, #92]	; 0x5c
 800c2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c2c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f040 8590 	bne.w	800cdf0 <_strtod_l+0xbb0>
 800c2d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d2:	b1eb      	cbz	r3, 800c310 <_strtod_l+0xd0>
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c2da:	ec43 2b10 	vmov	d0, r2, r3
 800c2de:	b01d      	add	sp, #116	; 0x74
 800c2e0:	ecbd 8b02 	vpop	{d8}
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	2a20      	cmp	r2, #32
 800c2ea:	d1cc      	bne.n	800c286 <_strtod_l+0x46>
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	9317      	str	r3, [sp, #92]	; 0x5c
 800c2f0:	e7be      	b.n	800c270 <_strtod_l+0x30>
 800c2f2:	2a2d      	cmp	r2, #45	; 0x2d
 800c2f4:	d1c7      	bne.n	800c286 <_strtod_l+0x46>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	920a      	str	r2, [sp, #40]	; 0x28
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c2fe:	785b      	ldrb	r3, [r3, #1]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1c2      	bne.n	800c28a <_strtod_l+0x4a>
 800c304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c306:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f040 856e 	bne.w	800cdec <_strtod_l+0xbac>
 800c310:	4652      	mov	r2, sl
 800c312:	465b      	mov	r3, fp
 800c314:	e7e1      	b.n	800c2da <_strtod_l+0x9a>
 800c316:	2200      	movs	r2, #0
 800c318:	e7ee      	b.n	800c2f8 <_strtod_l+0xb8>
 800c31a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c31c:	b13a      	cbz	r2, 800c32e <_strtod_l+0xee>
 800c31e:	2135      	movs	r1, #53	; 0x35
 800c320:	a81a      	add	r0, sp, #104	; 0x68
 800c322:	f002 fca2 	bl	800ec6a <__copybits>
 800c326:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c328:	4620      	mov	r0, r4
 800c32a:	f002 f861 	bl	800e3f0 <_Bfree>
 800c32e:	3f01      	subs	r7, #1
 800c330:	2f04      	cmp	r7, #4
 800c332:	d806      	bhi.n	800c342 <_strtod_l+0x102>
 800c334:	e8df f007 	tbb	[pc, r7]
 800c338:	1714030a 	.word	0x1714030a
 800c33c:	0a          	.byte	0x0a
 800c33d:	00          	.byte	0x00
 800c33e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c342:	0728      	lsls	r0, r5, #28
 800c344:	d5c0      	bpl.n	800c2c8 <_strtod_l+0x88>
 800c346:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c34a:	e7bd      	b.n	800c2c8 <_strtod_l+0x88>
 800c34c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c350:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c352:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c356:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c35a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c35e:	e7f0      	b.n	800c342 <_strtod_l+0x102>
 800c360:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c4e4 <_strtod_l+0x2a4>
 800c364:	e7ed      	b.n	800c342 <_strtod_l+0x102>
 800c366:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c36a:	f04f 3aff 	mov.w	sl, #4294967295
 800c36e:	e7e8      	b.n	800c342 <_strtod_l+0x102>
 800c370:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	9217      	str	r2, [sp, #92]	; 0x5c
 800c376:	785b      	ldrb	r3, [r3, #1]
 800c378:	2b30      	cmp	r3, #48	; 0x30
 800c37a:	d0f9      	beq.n	800c370 <_strtod_l+0x130>
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0a3      	beq.n	800c2c8 <_strtod_l+0x88>
 800c380:	2301      	movs	r3, #1
 800c382:	f04f 0900 	mov.w	r9, #0
 800c386:	9304      	str	r3, [sp, #16]
 800c388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c38a:	9308      	str	r3, [sp, #32]
 800c38c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c390:	464f      	mov	r7, r9
 800c392:	220a      	movs	r2, #10
 800c394:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c396:	7806      	ldrb	r6, [r0, #0]
 800c398:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c39c:	b2d9      	uxtb	r1, r3
 800c39e:	2909      	cmp	r1, #9
 800c3a0:	d92a      	bls.n	800c3f8 <_strtod_l+0x1b8>
 800c3a2:	9905      	ldr	r1, [sp, #20]
 800c3a4:	462a      	mov	r2, r5
 800c3a6:	f002 ff0f 	bl	800f1c8 <strncmp>
 800c3aa:	b398      	cbz	r0, 800c414 <_strtod_l+0x1d4>
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	4632      	mov	r2, r6
 800c3b0:	463d      	mov	r5, r7
 800c3b2:	9005      	str	r0, [sp, #20]
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2a65      	cmp	r2, #101	; 0x65
 800c3b8:	d001      	beq.n	800c3be <_strtod_l+0x17e>
 800c3ba:	2a45      	cmp	r2, #69	; 0x45
 800c3bc:	d118      	bne.n	800c3f0 <_strtod_l+0x1b0>
 800c3be:	b91d      	cbnz	r5, 800c3c8 <_strtod_l+0x188>
 800c3c0:	9a04      	ldr	r2, [sp, #16]
 800c3c2:	4302      	orrs	r2, r0
 800c3c4:	d09e      	beq.n	800c304 <_strtod_l+0xc4>
 800c3c6:	2500      	movs	r5, #0
 800c3c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c3cc:	f108 0201 	add.w	r2, r8, #1
 800c3d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c3d6:	2a2b      	cmp	r2, #43	; 0x2b
 800c3d8:	d075      	beq.n	800c4c6 <_strtod_l+0x286>
 800c3da:	2a2d      	cmp	r2, #45	; 0x2d
 800c3dc:	d07b      	beq.n	800c4d6 <_strtod_l+0x296>
 800c3de:	f04f 0c00 	mov.w	ip, #0
 800c3e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c3e6:	2909      	cmp	r1, #9
 800c3e8:	f240 8082 	bls.w	800c4f0 <_strtod_l+0x2b0>
 800c3ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	e09d      	b.n	800c530 <_strtod_l+0x2f0>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	e7c4      	b.n	800c382 <_strtod_l+0x142>
 800c3f8:	2f08      	cmp	r7, #8
 800c3fa:	bfd8      	it	le
 800c3fc:	9907      	ldrle	r1, [sp, #28]
 800c3fe:	f100 0001 	add.w	r0, r0, #1
 800c402:	bfda      	itte	le
 800c404:	fb02 3301 	mlale	r3, r2, r1, r3
 800c408:	9307      	strle	r3, [sp, #28]
 800c40a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c40e:	3701      	adds	r7, #1
 800c410:	9017      	str	r0, [sp, #92]	; 0x5c
 800c412:	e7bf      	b.n	800c394 <_strtod_l+0x154>
 800c414:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c416:	195a      	adds	r2, r3, r5
 800c418:	9217      	str	r2, [sp, #92]	; 0x5c
 800c41a:	5d5a      	ldrb	r2, [r3, r5]
 800c41c:	2f00      	cmp	r7, #0
 800c41e:	d037      	beq.n	800c490 <_strtod_l+0x250>
 800c420:	9005      	str	r0, [sp, #20]
 800c422:	463d      	mov	r5, r7
 800c424:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c428:	2b09      	cmp	r3, #9
 800c42a:	d912      	bls.n	800c452 <_strtod_l+0x212>
 800c42c:	2301      	movs	r3, #1
 800c42e:	e7c2      	b.n	800c3b6 <_strtod_l+0x176>
 800c430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c432:	1c5a      	adds	r2, r3, #1
 800c434:	9217      	str	r2, [sp, #92]	; 0x5c
 800c436:	785a      	ldrb	r2, [r3, #1]
 800c438:	3001      	adds	r0, #1
 800c43a:	2a30      	cmp	r2, #48	; 0x30
 800c43c:	d0f8      	beq.n	800c430 <_strtod_l+0x1f0>
 800c43e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c442:	2b08      	cmp	r3, #8
 800c444:	f200 84d9 	bhi.w	800cdfa <_strtod_l+0xbba>
 800c448:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c44a:	9005      	str	r0, [sp, #20]
 800c44c:	2000      	movs	r0, #0
 800c44e:	9308      	str	r3, [sp, #32]
 800c450:	4605      	mov	r5, r0
 800c452:	3a30      	subs	r2, #48	; 0x30
 800c454:	f100 0301 	add.w	r3, r0, #1
 800c458:	d014      	beq.n	800c484 <_strtod_l+0x244>
 800c45a:	9905      	ldr	r1, [sp, #20]
 800c45c:	4419      	add	r1, r3
 800c45e:	9105      	str	r1, [sp, #20]
 800c460:	462b      	mov	r3, r5
 800c462:	eb00 0e05 	add.w	lr, r0, r5
 800c466:	210a      	movs	r1, #10
 800c468:	4573      	cmp	r3, lr
 800c46a:	d113      	bne.n	800c494 <_strtod_l+0x254>
 800c46c:	182b      	adds	r3, r5, r0
 800c46e:	2b08      	cmp	r3, #8
 800c470:	f105 0501 	add.w	r5, r5, #1
 800c474:	4405      	add	r5, r0
 800c476:	dc1c      	bgt.n	800c4b2 <_strtod_l+0x272>
 800c478:	9907      	ldr	r1, [sp, #28]
 800c47a:	230a      	movs	r3, #10
 800c47c:	fb03 2301 	mla	r3, r3, r1, r2
 800c480:	9307      	str	r3, [sp, #28]
 800c482:	2300      	movs	r3, #0
 800c484:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c486:	1c51      	adds	r1, r2, #1
 800c488:	9117      	str	r1, [sp, #92]	; 0x5c
 800c48a:	7852      	ldrb	r2, [r2, #1]
 800c48c:	4618      	mov	r0, r3
 800c48e:	e7c9      	b.n	800c424 <_strtod_l+0x1e4>
 800c490:	4638      	mov	r0, r7
 800c492:	e7d2      	b.n	800c43a <_strtod_l+0x1fa>
 800c494:	2b08      	cmp	r3, #8
 800c496:	dc04      	bgt.n	800c4a2 <_strtod_l+0x262>
 800c498:	9e07      	ldr	r6, [sp, #28]
 800c49a:	434e      	muls	r6, r1
 800c49c:	9607      	str	r6, [sp, #28]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	e7e2      	b.n	800c468 <_strtod_l+0x228>
 800c4a2:	f103 0c01 	add.w	ip, r3, #1
 800c4a6:	f1bc 0f10 	cmp.w	ip, #16
 800c4aa:	bfd8      	it	le
 800c4ac:	fb01 f909 	mulle.w	r9, r1, r9
 800c4b0:	e7f5      	b.n	800c49e <_strtod_l+0x25e>
 800c4b2:	2d10      	cmp	r5, #16
 800c4b4:	bfdc      	itt	le
 800c4b6:	230a      	movle	r3, #10
 800c4b8:	fb03 2909 	mlale	r9, r3, r9, r2
 800c4bc:	e7e1      	b.n	800c482 <_strtod_l+0x242>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9305      	str	r3, [sp, #20]
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e77c      	b.n	800c3c0 <_strtod_l+0x180>
 800c4c6:	f04f 0c00 	mov.w	ip, #0
 800c4ca:	f108 0202 	add.w	r2, r8, #2
 800c4ce:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c4d4:	e785      	b.n	800c3e2 <_strtod_l+0x1a2>
 800c4d6:	f04f 0c01 	mov.w	ip, #1
 800c4da:	e7f6      	b.n	800c4ca <_strtod_l+0x28a>
 800c4dc:	080102e8 	.word	0x080102e8
 800c4e0:	080100a0 	.word	0x080100a0
 800c4e4:	7ff00000 	.word	0x7ff00000
 800c4e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c4ea:	1c51      	adds	r1, r2, #1
 800c4ec:	9117      	str	r1, [sp, #92]	; 0x5c
 800c4ee:	7852      	ldrb	r2, [r2, #1]
 800c4f0:	2a30      	cmp	r2, #48	; 0x30
 800c4f2:	d0f9      	beq.n	800c4e8 <_strtod_l+0x2a8>
 800c4f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c4f8:	2908      	cmp	r1, #8
 800c4fa:	f63f af79 	bhi.w	800c3f0 <_strtod_l+0x1b0>
 800c4fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c502:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c504:	9206      	str	r2, [sp, #24]
 800c506:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c508:	1c51      	adds	r1, r2, #1
 800c50a:	9117      	str	r1, [sp, #92]	; 0x5c
 800c50c:	7852      	ldrb	r2, [r2, #1]
 800c50e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c512:	2e09      	cmp	r6, #9
 800c514:	d937      	bls.n	800c586 <_strtod_l+0x346>
 800c516:	9e06      	ldr	r6, [sp, #24]
 800c518:	1b89      	subs	r1, r1, r6
 800c51a:	2908      	cmp	r1, #8
 800c51c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c520:	dc02      	bgt.n	800c528 <_strtod_l+0x2e8>
 800c522:	4576      	cmp	r6, lr
 800c524:	bfa8      	it	ge
 800c526:	4676      	movge	r6, lr
 800c528:	f1bc 0f00 	cmp.w	ip, #0
 800c52c:	d000      	beq.n	800c530 <_strtod_l+0x2f0>
 800c52e:	4276      	negs	r6, r6
 800c530:	2d00      	cmp	r5, #0
 800c532:	d14d      	bne.n	800c5d0 <_strtod_l+0x390>
 800c534:	9904      	ldr	r1, [sp, #16]
 800c536:	4301      	orrs	r1, r0
 800c538:	f47f aec6 	bne.w	800c2c8 <_strtod_l+0x88>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f47f aee1 	bne.w	800c304 <_strtod_l+0xc4>
 800c542:	2a69      	cmp	r2, #105	; 0x69
 800c544:	d027      	beq.n	800c596 <_strtod_l+0x356>
 800c546:	dc24      	bgt.n	800c592 <_strtod_l+0x352>
 800c548:	2a49      	cmp	r2, #73	; 0x49
 800c54a:	d024      	beq.n	800c596 <_strtod_l+0x356>
 800c54c:	2a4e      	cmp	r2, #78	; 0x4e
 800c54e:	f47f aed9 	bne.w	800c304 <_strtod_l+0xc4>
 800c552:	499f      	ldr	r1, [pc, #636]	; (800c7d0 <_strtod_l+0x590>)
 800c554:	a817      	add	r0, sp, #92	; 0x5c
 800c556:	f001 fe3d 	bl	800e1d4 <__match>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	f43f aed2 	beq.w	800c304 <_strtod_l+0xc4>
 800c560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b28      	cmp	r3, #40	; 0x28
 800c566:	d12d      	bne.n	800c5c4 <_strtod_l+0x384>
 800c568:	499a      	ldr	r1, [pc, #616]	; (800c7d4 <_strtod_l+0x594>)
 800c56a:	aa1a      	add	r2, sp, #104	; 0x68
 800c56c:	a817      	add	r0, sp, #92	; 0x5c
 800c56e:	f001 fe45 	bl	800e1fc <__hexnan>
 800c572:	2805      	cmp	r0, #5
 800c574:	d126      	bne.n	800c5c4 <_strtod_l+0x384>
 800c576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c578:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c57c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c580:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c584:	e6a0      	b.n	800c2c8 <_strtod_l+0x88>
 800c586:	210a      	movs	r1, #10
 800c588:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c58c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c590:	e7b9      	b.n	800c506 <_strtod_l+0x2c6>
 800c592:	2a6e      	cmp	r2, #110	; 0x6e
 800c594:	e7db      	b.n	800c54e <_strtod_l+0x30e>
 800c596:	4990      	ldr	r1, [pc, #576]	; (800c7d8 <_strtod_l+0x598>)
 800c598:	a817      	add	r0, sp, #92	; 0x5c
 800c59a:	f001 fe1b 	bl	800e1d4 <__match>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f43f aeb0 	beq.w	800c304 <_strtod_l+0xc4>
 800c5a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5a6:	498d      	ldr	r1, [pc, #564]	; (800c7dc <_strtod_l+0x59c>)
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	a817      	add	r0, sp, #92	; 0x5c
 800c5ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5ae:	f001 fe11 	bl	800e1d4 <__match>
 800c5b2:	b910      	cbnz	r0, 800c5ba <_strtod_l+0x37a>
 800c5b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800c5ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c7ec <_strtod_l+0x5ac>
 800c5be:	f04f 0a00 	mov.w	sl, #0
 800c5c2:	e681      	b.n	800c2c8 <_strtod_l+0x88>
 800c5c4:	4886      	ldr	r0, [pc, #536]	; (800c7e0 <_strtod_l+0x5a0>)
 800c5c6:	f002 fde7 	bl	800f198 <nan>
 800c5ca:	ec5b ab10 	vmov	sl, fp, d0
 800c5ce:	e67b      	b.n	800c2c8 <_strtod_l+0x88>
 800c5d0:	9b05      	ldr	r3, [sp, #20]
 800c5d2:	9807      	ldr	r0, [sp, #28]
 800c5d4:	1af3      	subs	r3, r6, r3
 800c5d6:	2f00      	cmp	r7, #0
 800c5d8:	bf08      	it	eq
 800c5da:	462f      	moveq	r7, r5
 800c5dc:	2d10      	cmp	r5, #16
 800c5de:	9306      	str	r3, [sp, #24]
 800c5e0:	46a8      	mov	r8, r5
 800c5e2:	bfa8      	it	ge
 800c5e4:	f04f 0810 	movge.w	r8, #16
 800c5e8:	f7f3 ff94 	bl	8000514 <__aeabi_ui2d>
 800c5ec:	2d09      	cmp	r5, #9
 800c5ee:	4682      	mov	sl, r0
 800c5f0:	468b      	mov	fp, r1
 800c5f2:	dd13      	ble.n	800c61c <_strtod_l+0x3dc>
 800c5f4:	4b7b      	ldr	r3, [pc, #492]	; (800c7e4 <_strtod_l+0x5a4>)
 800c5f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c5fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5fe:	f7f4 f803 	bl	8000608 <__aeabi_dmul>
 800c602:	4682      	mov	sl, r0
 800c604:	4648      	mov	r0, r9
 800c606:	468b      	mov	fp, r1
 800c608:	f7f3 ff84 	bl	8000514 <__aeabi_ui2d>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4650      	mov	r0, sl
 800c612:	4659      	mov	r1, fp
 800c614:	f7f3 fe42 	bl	800029c <__adddf3>
 800c618:	4682      	mov	sl, r0
 800c61a:	468b      	mov	fp, r1
 800c61c:	2d0f      	cmp	r5, #15
 800c61e:	dc38      	bgt.n	800c692 <_strtod_l+0x452>
 800c620:	9b06      	ldr	r3, [sp, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f43f ae50 	beq.w	800c2c8 <_strtod_l+0x88>
 800c628:	dd24      	ble.n	800c674 <_strtod_l+0x434>
 800c62a:	2b16      	cmp	r3, #22
 800c62c:	dc0b      	bgt.n	800c646 <_strtod_l+0x406>
 800c62e:	496d      	ldr	r1, [pc, #436]	; (800c7e4 <_strtod_l+0x5a4>)
 800c630:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c638:	4652      	mov	r2, sl
 800c63a:	465b      	mov	r3, fp
 800c63c:	f7f3 ffe4 	bl	8000608 <__aeabi_dmul>
 800c640:	4682      	mov	sl, r0
 800c642:	468b      	mov	fp, r1
 800c644:	e640      	b.n	800c2c8 <_strtod_l+0x88>
 800c646:	9a06      	ldr	r2, [sp, #24]
 800c648:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c64c:	4293      	cmp	r3, r2
 800c64e:	db20      	blt.n	800c692 <_strtod_l+0x452>
 800c650:	4c64      	ldr	r4, [pc, #400]	; (800c7e4 <_strtod_l+0x5a4>)
 800c652:	f1c5 050f 	rsb	r5, r5, #15
 800c656:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c65a:	4652      	mov	r2, sl
 800c65c:	465b      	mov	r3, fp
 800c65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c662:	f7f3 ffd1 	bl	8000608 <__aeabi_dmul>
 800c666:	9b06      	ldr	r3, [sp, #24]
 800c668:	1b5d      	subs	r5, r3, r5
 800c66a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c66e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c672:	e7e3      	b.n	800c63c <_strtod_l+0x3fc>
 800c674:	9b06      	ldr	r3, [sp, #24]
 800c676:	3316      	adds	r3, #22
 800c678:	db0b      	blt.n	800c692 <_strtod_l+0x452>
 800c67a:	9b05      	ldr	r3, [sp, #20]
 800c67c:	1b9e      	subs	r6, r3, r6
 800c67e:	4b59      	ldr	r3, [pc, #356]	; (800c7e4 <_strtod_l+0x5a4>)
 800c680:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c684:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c688:	4650      	mov	r0, sl
 800c68a:	4659      	mov	r1, fp
 800c68c:	f7f4 f8e6 	bl	800085c <__aeabi_ddiv>
 800c690:	e7d6      	b.n	800c640 <_strtod_l+0x400>
 800c692:	9b06      	ldr	r3, [sp, #24]
 800c694:	eba5 0808 	sub.w	r8, r5, r8
 800c698:	4498      	add	r8, r3
 800c69a:	f1b8 0f00 	cmp.w	r8, #0
 800c69e:	dd74      	ble.n	800c78a <_strtod_l+0x54a>
 800c6a0:	f018 030f 	ands.w	r3, r8, #15
 800c6a4:	d00a      	beq.n	800c6bc <_strtod_l+0x47c>
 800c6a6:	494f      	ldr	r1, [pc, #316]	; (800c7e4 <_strtod_l+0x5a4>)
 800c6a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	465b      	mov	r3, fp
 800c6b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6b4:	f7f3 ffa8 	bl	8000608 <__aeabi_dmul>
 800c6b8:	4682      	mov	sl, r0
 800c6ba:	468b      	mov	fp, r1
 800c6bc:	f038 080f 	bics.w	r8, r8, #15
 800c6c0:	d04f      	beq.n	800c762 <_strtod_l+0x522>
 800c6c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c6c6:	dd22      	ble.n	800c70e <_strtod_l+0x4ce>
 800c6c8:	2500      	movs	r5, #0
 800c6ca:	462e      	mov	r6, r5
 800c6cc:	9507      	str	r5, [sp, #28]
 800c6ce:	9505      	str	r5, [sp, #20]
 800c6d0:	2322      	movs	r3, #34	; 0x22
 800c6d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c7ec <_strtod_l+0x5ac>
 800c6d6:	6023      	str	r3, [r4, #0]
 800c6d8:	f04f 0a00 	mov.w	sl, #0
 800c6dc:	9b07      	ldr	r3, [sp, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f43f adf2 	beq.w	800c2c8 <_strtod_l+0x88>
 800c6e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f001 fe82 	bl	800e3f0 <_Bfree>
 800c6ec:	9905      	ldr	r1, [sp, #20]
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f001 fe7e 	bl	800e3f0 <_Bfree>
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f001 fe7a 	bl	800e3f0 <_Bfree>
 800c6fc:	9907      	ldr	r1, [sp, #28]
 800c6fe:	4620      	mov	r0, r4
 800c700:	f001 fe76 	bl	800e3f0 <_Bfree>
 800c704:	4629      	mov	r1, r5
 800c706:	4620      	mov	r0, r4
 800c708:	f001 fe72 	bl	800e3f0 <_Bfree>
 800c70c:	e5dc      	b.n	800c2c8 <_strtod_l+0x88>
 800c70e:	4b36      	ldr	r3, [pc, #216]	; (800c7e8 <_strtod_l+0x5a8>)
 800c710:	9304      	str	r3, [sp, #16]
 800c712:	2300      	movs	r3, #0
 800c714:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c718:	4650      	mov	r0, sl
 800c71a:	4659      	mov	r1, fp
 800c71c:	4699      	mov	r9, r3
 800c71e:	f1b8 0f01 	cmp.w	r8, #1
 800c722:	dc21      	bgt.n	800c768 <_strtod_l+0x528>
 800c724:	b10b      	cbz	r3, 800c72a <_strtod_l+0x4ea>
 800c726:	4682      	mov	sl, r0
 800c728:	468b      	mov	fp, r1
 800c72a:	4b2f      	ldr	r3, [pc, #188]	; (800c7e8 <_strtod_l+0x5a8>)
 800c72c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c730:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c734:	4652      	mov	r2, sl
 800c736:	465b      	mov	r3, fp
 800c738:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c73c:	f7f3 ff64 	bl	8000608 <__aeabi_dmul>
 800c740:	4b2a      	ldr	r3, [pc, #168]	; (800c7ec <_strtod_l+0x5ac>)
 800c742:	460a      	mov	r2, r1
 800c744:	400b      	ands	r3, r1
 800c746:	492a      	ldr	r1, [pc, #168]	; (800c7f0 <_strtod_l+0x5b0>)
 800c748:	428b      	cmp	r3, r1
 800c74a:	4682      	mov	sl, r0
 800c74c:	d8bc      	bhi.n	800c6c8 <_strtod_l+0x488>
 800c74e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c752:	428b      	cmp	r3, r1
 800c754:	bf86      	itte	hi
 800c756:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c7f4 <_strtod_l+0x5b4>
 800c75a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c75e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c762:	2300      	movs	r3, #0
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	e084      	b.n	800c872 <_strtod_l+0x632>
 800c768:	f018 0f01 	tst.w	r8, #1
 800c76c:	d005      	beq.n	800c77a <_strtod_l+0x53a>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f7f3 ff48 	bl	8000608 <__aeabi_dmul>
 800c778:	2301      	movs	r3, #1
 800c77a:	9a04      	ldr	r2, [sp, #16]
 800c77c:	3208      	adds	r2, #8
 800c77e:	f109 0901 	add.w	r9, r9, #1
 800c782:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c786:	9204      	str	r2, [sp, #16]
 800c788:	e7c9      	b.n	800c71e <_strtod_l+0x4de>
 800c78a:	d0ea      	beq.n	800c762 <_strtod_l+0x522>
 800c78c:	f1c8 0800 	rsb	r8, r8, #0
 800c790:	f018 020f 	ands.w	r2, r8, #15
 800c794:	d00a      	beq.n	800c7ac <_strtod_l+0x56c>
 800c796:	4b13      	ldr	r3, [pc, #76]	; (800c7e4 <_strtod_l+0x5a4>)
 800c798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c79c:	4650      	mov	r0, sl
 800c79e:	4659      	mov	r1, fp
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	f7f4 f85a 	bl	800085c <__aeabi_ddiv>
 800c7a8:	4682      	mov	sl, r0
 800c7aa:	468b      	mov	fp, r1
 800c7ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c7b0:	d0d7      	beq.n	800c762 <_strtod_l+0x522>
 800c7b2:	f1b8 0f1f 	cmp.w	r8, #31
 800c7b6:	dd1f      	ble.n	800c7f8 <_strtod_l+0x5b8>
 800c7b8:	2500      	movs	r5, #0
 800c7ba:	462e      	mov	r6, r5
 800c7bc:	9507      	str	r5, [sp, #28]
 800c7be:	9505      	str	r5, [sp, #20]
 800c7c0:	2322      	movs	r3, #34	; 0x22
 800c7c2:	f04f 0a00 	mov.w	sl, #0
 800c7c6:	f04f 0b00 	mov.w	fp, #0
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	e786      	b.n	800c6dc <_strtod_l+0x49c>
 800c7ce:	bf00      	nop
 800c7d0:	08010071 	.word	0x08010071
 800c7d4:	080100b4 	.word	0x080100b4
 800c7d8:	08010069 	.word	0x08010069
 800c7dc:	080101f4 	.word	0x080101f4
 800c7e0:	080104a0 	.word	0x080104a0
 800c7e4:	08010380 	.word	0x08010380
 800c7e8:	08010358 	.word	0x08010358
 800c7ec:	7ff00000 	.word	0x7ff00000
 800c7f0:	7ca00000 	.word	0x7ca00000
 800c7f4:	7fefffff 	.word	0x7fefffff
 800c7f8:	f018 0310 	ands.w	r3, r8, #16
 800c7fc:	bf18      	it	ne
 800c7fe:	236a      	movne	r3, #106	; 0x6a
 800c800:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800cbb0 <_strtod_l+0x970>
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	4650      	mov	r0, sl
 800c808:	4659      	mov	r1, fp
 800c80a:	2300      	movs	r3, #0
 800c80c:	f018 0f01 	tst.w	r8, #1
 800c810:	d004      	beq.n	800c81c <_strtod_l+0x5dc>
 800c812:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c816:	f7f3 fef7 	bl	8000608 <__aeabi_dmul>
 800c81a:	2301      	movs	r3, #1
 800c81c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c820:	f109 0908 	add.w	r9, r9, #8
 800c824:	d1f2      	bne.n	800c80c <_strtod_l+0x5cc>
 800c826:	b10b      	cbz	r3, 800c82c <_strtod_l+0x5ec>
 800c828:	4682      	mov	sl, r0
 800c82a:	468b      	mov	fp, r1
 800c82c:	9b04      	ldr	r3, [sp, #16]
 800c82e:	b1c3      	cbz	r3, 800c862 <_strtod_l+0x622>
 800c830:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c834:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c838:	2b00      	cmp	r3, #0
 800c83a:	4659      	mov	r1, fp
 800c83c:	dd11      	ble.n	800c862 <_strtod_l+0x622>
 800c83e:	2b1f      	cmp	r3, #31
 800c840:	f340 8124 	ble.w	800ca8c <_strtod_l+0x84c>
 800c844:	2b34      	cmp	r3, #52	; 0x34
 800c846:	bfde      	ittt	le
 800c848:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c84c:	f04f 33ff 	movle.w	r3, #4294967295
 800c850:	fa03 f202 	lslle.w	r2, r3, r2
 800c854:	f04f 0a00 	mov.w	sl, #0
 800c858:	bfcc      	ite	gt
 800c85a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c85e:	ea02 0b01 	andle.w	fp, r2, r1
 800c862:	2200      	movs	r2, #0
 800c864:	2300      	movs	r3, #0
 800c866:	4650      	mov	r0, sl
 800c868:	4659      	mov	r1, fp
 800c86a:	f7f4 f935 	bl	8000ad8 <__aeabi_dcmpeq>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d1a2      	bne.n	800c7b8 <_strtod_l+0x578>
 800c872:	9b07      	ldr	r3, [sp, #28]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	9908      	ldr	r1, [sp, #32]
 800c878:	462b      	mov	r3, r5
 800c87a:	463a      	mov	r2, r7
 800c87c:	4620      	mov	r0, r4
 800c87e:	f001 fe1f 	bl	800e4c0 <__s2b>
 800c882:	9007      	str	r0, [sp, #28]
 800c884:	2800      	cmp	r0, #0
 800c886:	f43f af1f 	beq.w	800c6c8 <_strtod_l+0x488>
 800c88a:	9b05      	ldr	r3, [sp, #20]
 800c88c:	1b9e      	subs	r6, r3, r6
 800c88e:	9b06      	ldr	r3, [sp, #24]
 800c890:	2b00      	cmp	r3, #0
 800c892:	bfb4      	ite	lt
 800c894:	4633      	movlt	r3, r6
 800c896:	2300      	movge	r3, #0
 800c898:	930c      	str	r3, [sp, #48]	; 0x30
 800c89a:	9b06      	ldr	r3, [sp, #24]
 800c89c:	2500      	movs	r5, #0
 800c89e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c8a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c8a4:	462e      	mov	r6, r5
 800c8a6:	9b07      	ldr	r3, [sp, #28]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	6859      	ldr	r1, [r3, #4]
 800c8ac:	f001 fd60 	bl	800e370 <_Balloc>
 800c8b0:	9005      	str	r0, [sp, #20]
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	f43f af0c 	beq.w	800c6d0 <_strtod_l+0x490>
 800c8b8:	9b07      	ldr	r3, [sp, #28]
 800c8ba:	691a      	ldr	r2, [r3, #16]
 800c8bc:	3202      	adds	r2, #2
 800c8be:	f103 010c 	add.w	r1, r3, #12
 800c8c2:	0092      	lsls	r2, r2, #2
 800c8c4:	300c      	adds	r0, #12
 800c8c6:	f7fe fde9 	bl	800b49c <memcpy>
 800c8ca:	ec4b ab10 	vmov	d0, sl, fp
 800c8ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c8d0:	a919      	add	r1, sp, #100	; 0x64
 800c8d2:	4620      	mov	r0, r4
 800c8d4:	f002 f93a 	bl	800eb4c <__d2b>
 800c8d8:	ec4b ab18 	vmov	d8, sl, fp
 800c8dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	f43f aef6 	beq.w	800c6d0 <_strtod_l+0x490>
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	f001 fe84 	bl	800e5f4 <__i2b>
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f aeee 	beq.w	800c6d0 <_strtod_l+0x490>
 800c8f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8f6:	9904      	ldr	r1, [sp, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	bfab      	itete	ge
 800c8fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c8fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c900:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c902:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c906:	bfac      	ite	ge
 800c908:	eb03 0902 	addge.w	r9, r3, r2
 800c90c:	1ad7      	sublt	r7, r2, r3
 800c90e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c910:	eba3 0801 	sub.w	r8, r3, r1
 800c914:	4490      	add	r8, r2
 800c916:	4ba1      	ldr	r3, [pc, #644]	; (800cb9c <_strtod_l+0x95c>)
 800c918:	f108 38ff 	add.w	r8, r8, #4294967295
 800c91c:	4598      	cmp	r8, r3
 800c91e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c922:	f280 80c7 	bge.w	800cab4 <_strtod_l+0x874>
 800c926:	eba3 0308 	sub.w	r3, r3, r8
 800c92a:	2b1f      	cmp	r3, #31
 800c92c:	eba2 0203 	sub.w	r2, r2, r3
 800c930:	f04f 0101 	mov.w	r1, #1
 800c934:	f300 80b1 	bgt.w	800ca9a <_strtod_l+0x85a>
 800c938:	fa01 f303 	lsl.w	r3, r1, r3
 800c93c:	930d      	str	r3, [sp, #52]	; 0x34
 800c93e:	2300      	movs	r3, #0
 800c940:	9308      	str	r3, [sp, #32]
 800c942:	eb09 0802 	add.w	r8, r9, r2
 800c946:	9b04      	ldr	r3, [sp, #16]
 800c948:	45c1      	cmp	r9, r8
 800c94a:	4417      	add	r7, r2
 800c94c:	441f      	add	r7, r3
 800c94e:	464b      	mov	r3, r9
 800c950:	bfa8      	it	ge
 800c952:	4643      	movge	r3, r8
 800c954:	42bb      	cmp	r3, r7
 800c956:	bfa8      	it	ge
 800c958:	463b      	movge	r3, r7
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfc2      	ittt	gt
 800c95e:	eba8 0803 	subgt.w	r8, r8, r3
 800c962:	1aff      	subgt	r7, r7, r3
 800c964:	eba9 0903 	subgt.w	r9, r9, r3
 800c968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	dd17      	ble.n	800c99e <_strtod_l+0x75e>
 800c96e:	4631      	mov	r1, r6
 800c970:	461a      	mov	r2, r3
 800c972:	4620      	mov	r0, r4
 800c974:	f001 fefe 	bl	800e774 <__pow5mult>
 800c978:	4606      	mov	r6, r0
 800c97a:	2800      	cmp	r0, #0
 800c97c:	f43f aea8 	beq.w	800c6d0 <_strtod_l+0x490>
 800c980:	4601      	mov	r1, r0
 800c982:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c984:	4620      	mov	r0, r4
 800c986:	f001 fe4b 	bl	800e620 <__multiply>
 800c98a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c98c:	2800      	cmp	r0, #0
 800c98e:	f43f ae9f 	beq.w	800c6d0 <_strtod_l+0x490>
 800c992:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c994:	4620      	mov	r0, r4
 800c996:	f001 fd2b 	bl	800e3f0 <_Bfree>
 800c99a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c99c:	9318      	str	r3, [sp, #96]	; 0x60
 800c99e:	f1b8 0f00 	cmp.w	r8, #0
 800c9a2:	f300 808c 	bgt.w	800cabe <_strtod_l+0x87e>
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	dd08      	ble.n	800c9be <_strtod_l+0x77e>
 800c9ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9ae:	9905      	ldr	r1, [sp, #20]
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f001 fedf 	bl	800e774 <__pow5mult>
 800c9b6:	9005      	str	r0, [sp, #20]
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f43f ae89 	beq.w	800c6d0 <_strtod_l+0x490>
 800c9be:	2f00      	cmp	r7, #0
 800c9c0:	dd08      	ble.n	800c9d4 <_strtod_l+0x794>
 800c9c2:	9905      	ldr	r1, [sp, #20]
 800c9c4:	463a      	mov	r2, r7
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	f001 ff2e 	bl	800e828 <__lshift>
 800c9cc:	9005      	str	r0, [sp, #20]
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	f43f ae7e 	beq.w	800c6d0 <_strtod_l+0x490>
 800c9d4:	f1b9 0f00 	cmp.w	r9, #0
 800c9d8:	dd08      	ble.n	800c9ec <_strtod_l+0x7ac>
 800c9da:	4631      	mov	r1, r6
 800c9dc:	464a      	mov	r2, r9
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f001 ff22 	bl	800e828 <__lshift>
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	f43f ae72 	beq.w	800c6d0 <_strtod_l+0x490>
 800c9ec:	9a05      	ldr	r2, [sp, #20]
 800c9ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f001 ffa5 	bl	800e940 <__mdiff>
 800c9f6:	4605      	mov	r5, r0
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f43f ae69 	beq.w	800c6d0 <_strtod_l+0x490>
 800c9fe:	68c3      	ldr	r3, [r0, #12]
 800ca00:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca02:	2300      	movs	r3, #0
 800ca04:	60c3      	str	r3, [r0, #12]
 800ca06:	4631      	mov	r1, r6
 800ca08:	f001 ff7e 	bl	800e908 <__mcmp>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	da60      	bge.n	800cad2 <_strtod_l+0x892>
 800ca10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca12:	ea53 030a 	orrs.w	r3, r3, sl
 800ca16:	f040 8082 	bne.w	800cb1e <_strtod_l+0x8de>
 800ca1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d17d      	bne.n	800cb1e <_strtod_l+0x8de>
 800ca22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ca26:	0d1b      	lsrs	r3, r3, #20
 800ca28:	051b      	lsls	r3, r3, #20
 800ca2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ca2e:	d976      	bls.n	800cb1e <_strtod_l+0x8de>
 800ca30:	696b      	ldr	r3, [r5, #20]
 800ca32:	b913      	cbnz	r3, 800ca3a <_strtod_l+0x7fa>
 800ca34:	692b      	ldr	r3, [r5, #16]
 800ca36:	2b01      	cmp	r3, #1
 800ca38:	dd71      	ble.n	800cb1e <_strtod_l+0x8de>
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f001 fef2 	bl	800e828 <__lshift>
 800ca44:	4631      	mov	r1, r6
 800ca46:	4605      	mov	r5, r0
 800ca48:	f001 ff5e 	bl	800e908 <__mcmp>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	dd66      	ble.n	800cb1e <_strtod_l+0x8de>
 800ca50:	9904      	ldr	r1, [sp, #16]
 800ca52:	4a53      	ldr	r2, [pc, #332]	; (800cba0 <_strtod_l+0x960>)
 800ca54:	465b      	mov	r3, fp
 800ca56:	2900      	cmp	r1, #0
 800ca58:	f000 8081 	beq.w	800cb5e <_strtod_l+0x91e>
 800ca5c:	ea02 010b 	and.w	r1, r2, fp
 800ca60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ca64:	dc7b      	bgt.n	800cb5e <_strtod_l+0x91e>
 800ca66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ca6a:	f77f aea9 	ble.w	800c7c0 <_strtod_l+0x580>
 800ca6e:	4b4d      	ldr	r3, [pc, #308]	; (800cba4 <_strtod_l+0x964>)
 800ca70:	4650      	mov	r0, sl
 800ca72:	4659      	mov	r1, fp
 800ca74:	2200      	movs	r2, #0
 800ca76:	f7f3 fdc7 	bl	8000608 <__aeabi_dmul>
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	4303      	orrs	r3, r0
 800ca7e:	bf08      	it	eq
 800ca80:	2322      	moveq	r3, #34	; 0x22
 800ca82:	4682      	mov	sl, r0
 800ca84:	468b      	mov	fp, r1
 800ca86:	bf08      	it	eq
 800ca88:	6023      	streq	r3, [r4, #0]
 800ca8a:	e62b      	b.n	800c6e4 <_strtod_l+0x4a4>
 800ca8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca90:	fa02 f303 	lsl.w	r3, r2, r3
 800ca94:	ea03 0a0a 	and.w	sl, r3, sl
 800ca98:	e6e3      	b.n	800c862 <_strtod_l+0x622>
 800ca9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ca9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800caa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800caa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800caaa:	fa01 f308 	lsl.w	r3, r1, r8
 800caae:	9308      	str	r3, [sp, #32]
 800cab0:	910d      	str	r1, [sp, #52]	; 0x34
 800cab2:	e746      	b.n	800c942 <_strtod_l+0x702>
 800cab4:	2300      	movs	r3, #0
 800cab6:	9308      	str	r3, [sp, #32]
 800cab8:	2301      	movs	r3, #1
 800caba:	930d      	str	r3, [sp, #52]	; 0x34
 800cabc:	e741      	b.n	800c942 <_strtod_l+0x702>
 800cabe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cac0:	4642      	mov	r2, r8
 800cac2:	4620      	mov	r0, r4
 800cac4:	f001 feb0 	bl	800e828 <__lshift>
 800cac8:	9018      	str	r0, [sp, #96]	; 0x60
 800caca:	2800      	cmp	r0, #0
 800cacc:	f47f af6b 	bne.w	800c9a6 <_strtod_l+0x766>
 800cad0:	e5fe      	b.n	800c6d0 <_strtod_l+0x490>
 800cad2:	465f      	mov	r7, fp
 800cad4:	d16e      	bne.n	800cbb4 <_strtod_l+0x974>
 800cad6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cad8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cadc:	b342      	cbz	r2, 800cb30 <_strtod_l+0x8f0>
 800cade:	4a32      	ldr	r2, [pc, #200]	; (800cba8 <_strtod_l+0x968>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d128      	bne.n	800cb36 <_strtod_l+0x8f6>
 800cae4:	9b04      	ldr	r3, [sp, #16]
 800cae6:	4651      	mov	r1, sl
 800cae8:	b1eb      	cbz	r3, 800cb26 <_strtod_l+0x8e6>
 800caea:	4b2d      	ldr	r3, [pc, #180]	; (800cba0 <_strtod_l+0x960>)
 800caec:	403b      	ands	r3, r7
 800caee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800caf2:	f04f 32ff 	mov.w	r2, #4294967295
 800caf6:	d819      	bhi.n	800cb2c <_strtod_l+0x8ec>
 800caf8:	0d1b      	lsrs	r3, r3, #20
 800cafa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cafe:	fa02 f303 	lsl.w	r3, r2, r3
 800cb02:	4299      	cmp	r1, r3
 800cb04:	d117      	bne.n	800cb36 <_strtod_l+0x8f6>
 800cb06:	4b29      	ldr	r3, [pc, #164]	; (800cbac <_strtod_l+0x96c>)
 800cb08:	429f      	cmp	r7, r3
 800cb0a:	d102      	bne.n	800cb12 <_strtod_l+0x8d2>
 800cb0c:	3101      	adds	r1, #1
 800cb0e:	f43f addf 	beq.w	800c6d0 <_strtod_l+0x490>
 800cb12:	4b23      	ldr	r3, [pc, #140]	; (800cba0 <_strtod_l+0x960>)
 800cb14:	403b      	ands	r3, r7
 800cb16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cb1a:	f04f 0a00 	mov.w	sl, #0
 800cb1e:	9b04      	ldr	r3, [sp, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1a4      	bne.n	800ca6e <_strtod_l+0x82e>
 800cb24:	e5de      	b.n	800c6e4 <_strtod_l+0x4a4>
 800cb26:	f04f 33ff 	mov.w	r3, #4294967295
 800cb2a:	e7ea      	b.n	800cb02 <_strtod_l+0x8c2>
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	e7e8      	b.n	800cb02 <_strtod_l+0x8c2>
 800cb30:	ea53 030a 	orrs.w	r3, r3, sl
 800cb34:	d08c      	beq.n	800ca50 <_strtod_l+0x810>
 800cb36:	9b08      	ldr	r3, [sp, #32]
 800cb38:	b1db      	cbz	r3, 800cb72 <_strtod_l+0x932>
 800cb3a:	423b      	tst	r3, r7
 800cb3c:	d0ef      	beq.n	800cb1e <_strtod_l+0x8de>
 800cb3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb40:	9a04      	ldr	r2, [sp, #16]
 800cb42:	4650      	mov	r0, sl
 800cb44:	4659      	mov	r1, fp
 800cb46:	b1c3      	cbz	r3, 800cb7a <_strtod_l+0x93a>
 800cb48:	f7ff fb5e 	bl	800c208 <sulp>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	ec51 0b18 	vmov	r0, r1, d8
 800cb54:	f7f3 fba2 	bl	800029c <__adddf3>
 800cb58:	4682      	mov	sl, r0
 800cb5a:	468b      	mov	fp, r1
 800cb5c:	e7df      	b.n	800cb1e <_strtod_l+0x8de>
 800cb5e:	4013      	ands	r3, r2
 800cb60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cb64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cb68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cb6c:	f04f 3aff 	mov.w	sl, #4294967295
 800cb70:	e7d5      	b.n	800cb1e <_strtod_l+0x8de>
 800cb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb74:	ea13 0f0a 	tst.w	r3, sl
 800cb78:	e7e0      	b.n	800cb3c <_strtod_l+0x8fc>
 800cb7a:	f7ff fb45 	bl	800c208 <sulp>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	ec51 0b18 	vmov	r0, r1, d8
 800cb86:	f7f3 fb87 	bl	8000298 <__aeabi_dsub>
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	4682      	mov	sl, r0
 800cb90:	468b      	mov	fp, r1
 800cb92:	f7f3 ffa1 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d0c1      	beq.n	800cb1e <_strtod_l+0x8de>
 800cb9a:	e611      	b.n	800c7c0 <_strtod_l+0x580>
 800cb9c:	fffffc02 	.word	0xfffffc02
 800cba0:	7ff00000 	.word	0x7ff00000
 800cba4:	39500000 	.word	0x39500000
 800cba8:	000fffff 	.word	0x000fffff
 800cbac:	7fefffff 	.word	0x7fefffff
 800cbb0:	080100c8 	.word	0x080100c8
 800cbb4:	4631      	mov	r1, r6
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f002 f824 	bl	800ec04 <__ratio>
 800cbbc:	ec59 8b10 	vmov	r8, r9, d0
 800cbc0:	ee10 0a10 	vmov	r0, s0
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbca:	4649      	mov	r1, r9
 800cbcc:	f7f3 ff98 	bl	8000b00 <__aeabi_dcmple>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d07a      	beq.n	800ccca <_strtod_l+0xa8a>
 800cbd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d04a      	beq.n	800cc70 <_strtod_l+0xa30>
 800cbda:	4b95      	ldr	r3, [pc, #596]	; (800ce30 <_strtod_l+0xbf0>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbe2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ce30 <_strtod_l+0xbf0>
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	4b92      	ldr	r3, [pc, #584]	; (800ce34 <_strtod_l+0xbf4>)
 800cbec:	403b      	ands	r3, r7
 800cbee:	930d      	str	r3, [sp, #52]	; 0x34
 800cbf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cbf2:	4b91      	ldr	r3, [pc, #580]	; (800ce38 <_strtod_l+0xbf8>)
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	f040 80b0 	bne.w	800cd5a <_strtod_l+0xb1a>
 800cbfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cbfe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cc02:	ec4b ab10 	vmov	d0, sl, fp
 800cc06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cc0a:	f001 ff23 	bl	800ea54 <__ulp>
 800cc0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cc12:	ec53 2b10 	vmov	r2, r3, d0
 800cc16:	f7f3 fcf7 	bl	8000608 <__aeabi_dmul>
 800cc1a:	4652      	mov	r2, sl
 800cc1c:	465b      	mov	r3, fp
 800cc1e:	f7f3 fb3d 	bl	800029c <__adddf3>
 800cc22:	460b      	mov	r3, r1
 800cc24:	4983      	ldr	r1, [pc, #524]	; (800ce34 <_strtod_l+0xbf4>)
 800cc26:	4a85      	ldr	r2, [pc, #532]	; (800ce3c <_strtod_l+0xbfc>)
 800cc28:	4019      	ands	r1, r3
 800cc2a:	4291      	cmp	r1, r2
 800cc2c:	4682      	mov	sl, r0
 800cc2e:	d960      	bls.n	800ccf2 <_strtod_l+0xab2>
 800cc30:	ee18 3a90 	vmov	r3, s17
 800cc34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d104      	bne.n	800cc46 <_strtod_l+0xa06>
 800cc3c:	ee18 3a10 	vmov	r3, s16
 800cc40:	3301      	adds	r3, #1
 800cc42:	f43f ad45 	beq.w	800c6d0 <_strtod_l+0x490>
 800cc46:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ce48 <_strtod_l+0xc08>
 800cc4a:	f04f 3aff 	mov.w	sl, #4294967295
 800cc4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc50:	4620      	mov	r0, r4
 800cc52:	f001 fbcd 	bl	800e3f0 <_Bfree>
 800cc56:	9905      	ldr	r1, [sp, #20]
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f001 fbc9 	bl	800e3f0 <_Bfree>
 800cc5e:	4631      	mov	r1, r6
 800cc60:	4620      	mov	r0, r4
 800cc62:	f001 fbc5 	bl	800e3f0 <_Bfree>
 800cc66:	4629      	mov	r1, r5
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f001 fbc1 	bl	800e3f0 <_Bfree>
 800cc6e:	e61a      	b.n	800c8a6 <_strtod_l+0x666>
 800cc70:	f1ba 0f00 	cmp.w	sl, #0
 800cc74:	d11b      	bne.n	800ccae <_strtod_l+0xa6e>
 800cc76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc7a:	b9f3      	cbnz	r3, 800ccba <_strtod_l+0xa7a>
 800cc7c:	4b6c      	ldr	r3, [pc, #432]	; (800ce30 <_strtod_l+0xbf0>)
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4640      	mov	r0, r8
 800cc82:	4649      	mov	r1, r9
 800cc84:	f7f3 ff32 	bl	8000aec <__aeabi_dcmplt>
 800cc88:	b9d0      	cbnz	r0, 800ccc0 <_strtod_l+0xa80>
 800cc8a:	4640      	mov	r0, r8
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	4b6c      	ldr	r3, [pc, #432]	; (800ce40 <_strtod_l+0xc00>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	f7f3 fcb9 	bl	8000608 <__aeabi_dmul>
 800cc96:	4680      	mov	r8, r0
 800cc98:	4689      	mov	r9, r1
 800cc9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cc9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cca2:	9315      	str	r3, [sp, #84]	; 0x54
 800cca4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cca8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ccac:	e79d      	b.n	800cbea <_strtod_l+0x9aa>
 800ccae:	f1ba 0f01 	cmp.w	sl, #1
 800ccb2:	d102      	bne.n	800ccba <_strtod_l+0xa7a>
 800ccb4:	2f00      	cmp	r7, #0
 800ccb6:	f43f ad83 	beq.w	800c7c0 <_strtod_l+0x580>
 800ccba:	4b62      	ldr	r3, [pc, #392]	; (800ce44 <_strtod_l+0xc04>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	e78e      	b.n	800cbde <_strtod_l+0x99e>
 800ccc0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ce40 <_strtod_l+0xc00>
 800ccc4:	f04f 0800 	mov.w	r8, #0
 800ccc8:	e7e7      	b.n	800cc9a <_strtod_l+0xa5a>
 800ccca:	4b5d      	ldr	r3, [pc, #372]	; (800ce40 <_strtod_l+0xc00>)
 800cccc:	4640      	mov	r0, r8
 800ccce:	4649      	mov	r1, r9
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f7f3 fc99 	bl	8000608 <__aeabi_dmul>
 800ccd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccd8:	4680      	mov	r8, r0
 800ccda:	4689      	mov	r9, r1
 800ccdc:	b933      	cbnz	r3, 800ccec <_strtod_l+0xaac>
 800ccde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cce2:	900e      	str	r0, [sp, #56]	; 0x38
 800cce4:	930f      	str	r3, [sp, #60]	; 0x3c
 800cce6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ccea:	e7dd      	b.n	800cca8 <_strtod_l+0xa68>
 800ccec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ccf0:	e7f9      	b.n	800cce6 <_strtod_l+0xaa6>
 800ccf2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1a8      	bne.n	800cc4e <_strtod_l+0xa0e>
 800ccfc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd02:	0d1b      	lsrs	r3, r3, #20
 800cd04:	051b      	lsls	r3, r3, #20
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d1a1      	bne.n	800cc4e <_strtod_l+0xa0e>
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 ffdb 	bl	8000cc8 <__aeabi_d2lz>
 800cd12:	f7f3 fc4b 	bl	80005ac <__aeabi_l2d>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	4649      	mov	r1, r9
 800cd1e:	f7f3 fabb 	bl	8000298 <__aeabi_dsub>
 800cd22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd28:	ea43 030a 	orr.w	r3, r3, sl
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4689      	mov	r9, r1
 800cd32:	d055      	beq.n	800cde0 <_strtod_l+0xba0>
 800cd34:	a336      	add	r3, pc, #216	; (adr r3, 800ce10 <_strtod_l+0xbd0>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f7f3 fed7 	bl	8000aec <__aeabi_dcmplt>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	f47f acd0 	bne.w	800c6e4 <_strtod_l+0x4a4>
 800cd44:	a334      	add	r3, pc, #208	; (adr r3, 800ce18 <_strtod_l+0xbd8>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	4640      	mov	r0, r8
 800cd4c:	4649      	mov	r1, r9
 800cd4e:	f7f3 feeb 	bl	8000b28 <__aeabi_dcmpgt>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f43f af7b 	beq.w	800cc4e <_strtod_l+0xa0e>
 800cd58:	e4c4      	b.n	800c6e4 <_strtod_l+0x4a4>
 800cd5a:	9b04      	ldr	r3, [sp, #16]
 800cd5c:	b333      	cbz	r3, 800cdac <_strtod_l+0xb6c>
 800cd5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd64:	d822      	bhi.n	800cdac <_strtod_l+0xb6c>
 800cd66:	a32e      	add	r3, pc, #184	; (adr r3, 800ce20 <_strtod_l+0xbe0>)
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	4649      	mov	r1, r9
 800cd70:	f7f3 fec6 	bl	8000b00 <__aeabi_dcmple>
 800cd74:	b1a0      	cbz	r0, 800cda0 <_strtod_l+0xb60>
 800cd76:	4649      	mov	r1, r9
 800cd78:	4640      	mov	r0, r8
 800cd7a:	f7f3 ff1d 	bl	8000bb8 <__aeabi_d2uiz>
 800cd7e:	2801      	cmp	r0, #1
 800cd80:	bf38      	it	cc
 800cd82:	2001      	movcc	r0, #1
 800cd84:	f7f3 fbc6 	bl	8000514 <__aeabi_ui2d>
 800cd88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd8a:	4680      	mov	r8, r0
 800cd8c:	4689      	mov	r9, r1
 800cd8e:	bb23      	cbnz	r3, 800cdda <_strtod_l+0xb9a>
 800cd90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd94:	9010      	str	r0, [sp, #64]	; 0x40
 800cd96:	9311      	str	r3, [sp, #68]	; 0x44
 800cd98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cda0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cda2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cda4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cda8:	1a9b      	subs	r3, r3, r2
 800cdaa:	9309      	str	r3, [sp, #36]	; 0x24
 800cdac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdb0:	eeb0 0a48 	vmov.f32	s0, s16
 800cdb4:	eef0 0a68 	vmov.f32	s1, s17
 800cdb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cdbc:	f001 fe4a 	bl	800ea54 <__ulp>
 800cdc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdc4:	ec53 2b10 	vmov	r2, r3, d0
 800cdc8:	f7f3 fc1e 	bl	8000608 <__aeabi_dmul>
 800cdcc:	ec53 2b18 	vmov	r2, r3, d8
 800cdd0:	f7f3 fa64 	bl	800029c <__adddf3>
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	468b      	mov	fp, r1
 800cdd8:	e78d      	b.n	800ccf6 <_strtod_l+0xab6>
 800cdda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cdde:	e7db      	b.n	800cd98 <_strtod_l+0xb58>
 800cde0:	a311      	add	r3, pc, #68	; (adr r3, 800ce28 <_strtod_l+0xbe8>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f7f3 fe81 	bl	8000aec <__aeabi_dcmplt>
 800cdea:	e7b2      	b.n	800cd52 <_strtod_l+0xb12>
 800cdec:	2300      	movs	r3, #0
 800cdee:	930a      	str	r3, [sp, #40]	; 0x28
 800cdf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cdf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdf4:	6013      	str	r3, [r2, #0]
 800cdf6:	f7ff ba6b 	b.w	800c2d0 <_strtod_l+0x90>
 800cdfa:	2a65      	cmp	r2, #101	; 0x65
 800cdfc:	f43f ab5f 	beq.w	800c4be <_strtod_l+0x27e>
 800ce00:	2a45      	cmp	r2, #69	; 0x45
 800ce02:	f43f ab5c 	beq.w	800c4be <_strtod_l+0x27e>
 800ce06:	2301      	movs	r3, #1
 800ce08:	f7ff bb94 	b.w	800c534 <_strtod_l+0x2f4>
 800ce0c:	f3af 8000 	nop.w
 800ce10:	94a03595 	.word	0x94a03595
 800ce14:	3fdfffff 	.word	0x3fdfffff
 800ce18:	35afe535 	.word	0x35afe535
 800ce1c:	3fe00000 	.word	0x3fe00000
 800ce20:	ffc00000 	.word	0xffc00000
 800ce24:	41dfffff 	.word	0x41dfffff
 800ce28:	94a03595 	.word	0x94a03595
 800ce2c:	3fcfffff 	.word	0x3fcfffff
 800ce30:	3ff00000 	.word	0x3ff00000
 800ce34:	7ff00000 	.word	0x7ff00000
 800ce38:	7fe00000 	.word	0x7fe00000
 800ce3c:	7c9fffff 	.word	0x7c9fffff
 800ce40:	3fe00000 	.word	0x3fe00000
 800ce44:	bff00000 	.word	0xbff00000
 800ce48:	7fefffff 	.word	0x7fefffff

0800ce4c <_strtod_r>:
 800ce4c:	4b01      	ldr	r3, [pc, #4]	; (800ce54 <_strtod_r+0x8>)
 800ce4e:	f7ff b9f7 	b.w	800c240 <_strtod_l>
 800ce52:	bf00      	nop
 800ce54:	20000290 	.word	0x20000290

0800ce58 <_strtol_l.constprop.0>:
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce5e:	d001      	beq.n	800ce64 <_strtol_l.constprop.0+0xc>
 800ce60:	2b24      	cmp	r3, #36	; 0x24
 800ce62:	d906      	bls.n	800ce72 <_strtol_l.constprop.0+0x1a>
 800ce64:	f7fe faf0 	bl	800b448 <__errno>
 800ce68:	2316      	movs	r3, #22
 800ce6a:	6003      	str	r3, [r0, #0]
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf58 <_strtol_l.constprop.0+0x100>
 800ce76:	460d      	mov	r5, r1
 800ce78:	462e      	mov	r6, r5
 800ce7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce7e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ce82:	f017 0708 	ands.w	r7, r7, #8
 800ce86:	d1f7      	bne.n	800ce78 <_strtol_l.constprop.0+0x20>
 800ce88:	2c2d      	cmp	r4, #45	; 0x2d
 800ce8a:	d132      	bne.n	800cef2 <_strtol_l.constprop.0+0x9a>
 800ce8c:	782c      	ldrb	r4, [r5, #0]
 800ce8e:	2701      	movs	r7, #1
 800ce90:	1cb5      	adds	r5, r6, #2
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d05b      	beq.n	800cf4e <_strtol_l.constprop.0+0xf6>
 800ce96:	2b10      	cmp	r3, #16
 800ce98:	d109      	bne.n	800ceae <_strtol_l.constprop.0+0x56>
 800ce9a:	2c30      	cmp	r4, #48	; 0x30
 800ce9c:	d107      	bne.n	800ceae <_strtol_l.constprop.0+0x56>
 800ce9e:	782c      	ldrb	r4, [r5, #0]
 800cea0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cea4:	2c58      	cmp	r4, #88	; 0x58
 800cea6:	d14d      	bne.n	800cf44 <_strtol_l.constprop.0+0xec>
 800cea8:	786c      	ldrb	r4, [r5, #1]
 800ceaa:	2310      	movs	r3, #16
 800ceac:	3502      	adds	r5, #2
 800ceae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ceb2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ceb6:	f04f 0c00 	mov.w	ip, #0
 800ceba:	fbb8 f9f3 	udiv	r9, r8, r3
 800cebe:	4666      	mov	r6, ip
 800cec0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cec4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cec8:	f1be 0f09 	cmp.w	lr, #9
 800cecc:	d816      	bhi.n	800cefc <_strtol_l.constprop.0+0xa4>
 800cece:	4674      	mov	r4, lr
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	dd24      	ble.n	800cf1e <_strtol_l.constprop.0+0xc6>
 800ced4:	f1bc 0f00 	cmp.w	ip, #0
 800ced8:	db1e      	blt.n	800cf18 <_strtol_l.constprop.0+0xc0>
 800ceda:	45b1      	cmp	r9, r6
 800cedc:	d31c      	bcc.n	800cf18 <_strtol_l.constprop.0+0xc0>
 800cede:	d101      	bne.n	800cee4 <_strtol_l.constprop.0+0x8c>
 800cee0:	45a2      	cmp	sl, r4
 800cee2:	db19      	blt.n	800cf18 <_strtol_l.constprop.0+0xc0>
 800cee4:	fb06 4603 	mla	r6, r6, r3, r4
 800cee8:	f04f 0c01 	mov.w	ip, #1
 800ceec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cef0:	e7e8      	b.n	800cec4 <_strtol_l.constprop.0+0x6c>
 800cef2:	2c2b      	cmp	r4, #43	; 0x2b
 800cef4:	bf04      	itt	eq
 800cef6:	782c      	ldrbeq	r4, [r5, #0]
 800cef8:	1cb5      	addeq	r5, r6, #2
 800cefa:	e7ca      	b.n	800ce92 <_strtol_l.constprop.0+0x3a>
 800cefc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf00:	f1be 0f19 	cmp.w	lr, #25
 800cf04:	d801      	bhi.n	800cf0a <_strtol_l.constprop.0+0xb2>
 800cf06:	3c37      	subs	r4, #55	; 0x37
 800cf08:	e7e2      	b.n	800ced0 <_strtol_l.constprop.0+0x78>
 800cf0a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf0e:	f1be 0f19 	cmp.w	lr, #25
 800cf12:	d804      	bhi.n	800cf1e <_strtol_l.constprop.0+0xc6>
 800cf14:	3c57      	subs	r4, #87	; 0x57
 800cf16:	e7db      	b.n	800ced0 <_strtol_l.constprop.0+0x78>
 800cf18:	f04f 3cff 	mov.w	ip, #4294967295
 800cf1c:	e7e6      	b.n	800ceec <_strtol_l.constprop.0+0x94>
 800cf1e:	f1bc 0f00 	cmp.w	ip, #0
 800cf22:	da05      	bge.n	800cf30 <_strtol_l.constprop.0+0xd8>
 800cf24:	2322      	movs	r3, #34	; 0x22
 800cf26:	6003      	str	r3, [r0, #0]
 800cf28:	4646      	mov	r6, r8
 800cf2a:	b942      	cbnz	r2, 800cf3e <_strtol_l.constprop.0+0xe6>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	e79e      	b.n	800ce6e <_strtol_l.constprop.0+0x16>
 800cf30:	b107      	cbz	r7, 800cf34 <_strtol_l.constprop.0+0xdc>
 800cf32:	4276      	negs	r6, r6
 800cf34:	2a00      	cmp	r2, #0
 800cf36:	d0f9      	beq.n	800cf2c <_strtol_l.constprop.0+0xd4>
 800cf38:	f1bc 0f00 	cmp.w	ip, #0
 800cf3c:	d000      	beq.n	800cf40 <_strtol_l.constprop.0+0xe8>
 800cf3e:	1e69      	subs	r1, r5, #1
 800cf40:	6011      	str	r1, [r2, #0]
 800cf42:	e7f3      	b.n	800cf2c <_strtol_l.constprop.0+0xd4>
 800cf44:	2430      	movs	r4, #48	; 0x30
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1b1      	bne.n	800ceae <_strtol_l.constprop.0+0x56>
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	e7af      	b.n	800ceae <_strtol_l.constprop.0+0x56>
 800cf4e:	2c30      	cmp	r4, #48	; 0x30
 800cf50:	d0a5      	beq.n	800ce9e <_strtol_l.constprop.0+0x46>
 800cf52:	230a      	movs	r3, #10
 800cf54:	e7ab      	b.n	800ceae <_strtol_l.constprop.0+0x56>
 800cf56:	bf00      	nop
 800cf58:	080100f1 	.word	0x080100f1

0800cf5c <_strtol_r>:
 800cf5c:	f7ff bf7c 	b.w	800ce58 <_strtol_l.constprop.0>

0800cf60 <quorem>:
 800cf60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf64:	6903      	ldr	r3, [r0, #16]
 800cf66:	690c      	ldr	r4, [r1, #16]
 800cf68:	42a3      	cmp	r3, r4
 800cf6a:	4607      	mov	r7, r0
 800cf6c:	f2c0 8081 	blt.w	800d072 <quorem+0x112>
 800cf70:	3c01      	subs	r4, #1
 800cf72:	f101 0814 	add.w	r8, r1, #20
 800cf76:	f100 0514 	add.w	r5, r0, #20
 800cf7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf94:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf98:	d331      	bcc.n	800cffe <quorem+0x9e>
 800cf9a:	f04f 0e00 	mov.w	lr, #0
 800cf9e:	4640      	mov	r0, r8
 800cfa0:	46ac      	mov	ip, r5
 800cfa2:	46f2      	mov	sl, lr
 800cfa4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cfa8:	b293      	uxth	r3, r2
 800cfaa:	fb06 e303 	mla	r3, r6, r3, lr
 800cfae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	ebaa 0303 	sub.w	r3, sl, r3
 800cfb8:	f8dc a000 	ldr.w	sl, [ip]
 800cfbc:	0c12      	lsrs	r2, r2, #16
 800cfbe:	fa13 f38a 	uxtah	r3, r3, sl
 800cfc2:	fb06 e202 	mla	r2, r6, r2, lr
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	9b00      	ldr	r3, [sp, #0]
 800cfca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cfce:	b292      	uxth	r2, r2
 800cfd0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cfd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfd8:	f8bd 3000 	ldrh.w	r3, [sp]
 800cfdc:	4581      	cmp	r9, r0
 800cfde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfe2:	f84c 3b04 	str.w	r3, [ip], #4
 800cfe6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cfea:	d2db      	bcs.n	800cfa4 <quorem+0x44>
 800cfec:	f855 300b 	ldr.w	r3, [r5, fp]
 800cff0:	b92b      	cbnz	r3, 800cffe <quorem+0x9e>
 800cff2:	9b01      	ldr	r3, [sp, #4]
 800cff4:	3b04      	subs	r3, #4
 800cff6:	429d      	cmp	r5, r3
 800cff8:	461a      	mov	r2, r3
 800cffa:	d32e      	bcc.n	800d05a <quorem+0xfa>
 800cffc:	613c      	str	r4, [r7, #16]
 800cffe:	4638      	mov	r0, r7
 800d000:	f001 fc82 	bl	800e908 <__mcmp>
 800d004:	2800      	cmp	r0, #0
 800d006:	db24      	blt.n	800d052 <quorem+0xf2>
 800d008:	3601      	adds	r6, #1
 800d00a:	4628      	mov	r0, r5
 800d00c:	f04f 0c00 	mov.w	ip, #0
 800d010:	f858 2b04 	ldr.w	r2, [r8], #4
 800d014:	f8d0 e000 	ldr.w	lr, [r0]
 800d018:	b293      	uxth	r3, r2
 800d01a:	ebac 0303 	sub.w	r3, ip, r3
 800d01e:	0c12      	lsrs	r2, r2, #16
 800d020:	fa13 f38e 	uxtah	r3, r3, lr
 800d024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d032:	45c1      	cmp	r9, r8
 800d034:	f840 3b04 	str.w	r3, [r0], #4
 800d038:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d03c:	d2e8      	bcs.n	800d010 <quorem+0xb0>
 800d03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d046:	b922      	cbnz	r2, 800d052 <quorem+0xf2>
 800d048:	3b04      	subs	r3, #4
 800d04a:	429d      	cmp	r5, r3
 800d04c:	461a      	mov	r2, r3
 800d04e:	d30a      	bcc.n	800d066 <quorem+0x106>
 800d050:	613c      	str	r4, [r7, #16]
 800d052:	4630      	mov	r0, r6
 800d054:	b003      	add	sp, #12
 800d056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05a:	6812      	ldr	r2, [r2, #0]
 800d05c:	3b04      	subs	r3, #4
 800d05e:	2a00      	cmp	r2, #0
 800d060:	d1cc      	bne.n	800cffc <quorem+0x9c>
 800d062:	3c01      	subs	r4, #1
 800d064:	e7c7      	b.n	800cff6 <quorem+0x96>
 800d066:	6812      	ldr	r2, [r2, #0]
 800d068:	3b04      	subs	r3, #4
 800d06a:	2a00      	cmp	r2, #0
 800d06c:	d1f0      	bne.n	800d050 <quorem+0xf0>
 800d06e:	3c01      	subs	r4, #1
 800d070:	e7eb      	b.n	800d04a <quorem+0xea>
 800d072:	2000      	movs	r0, #0
 800d074:	e7ee      	b.n	800d054 <quorem+0xf4>
	...

0800d078 <_dtoa_r>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	ed2d 8b04 	vpush	{d8-d9}
 800d080:	ec57 6b10 	vmov	r6, r7, d0
 800d084:	b093      	sub	sp, #76	; 0x4c
 800d086:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d088:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d08c:	9106      	str	r1, [sp, #24]
 800d08e:	ee10 aa10 	vmov	sl, s0
 800d092:	4604      	mov	r4, r0
 800d094:	9209      	str	r2, [sp, #36]	; 0x24
 800d096:	930c      	str	r3, [sp, #48]	; 0x30
 800d098:	46bb      	mov	fp, r7
 800d09a:	b975      	cbnz	r5, 800d0ba <_dtoa_r+0x42>
 800d09c:	2010      	movs	r0, #16
 800d09e:	f001 f94d 	bl	800e33c <malloc>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	6260      	str	r0, [r4, #36]	; 0x24
 800d0a6:	b920      	cbnz	r0, 800d0b2 <_dtoa_r+0x3a>
 800d0a8:	4ba7      	ldr	r3, [pc, #668]	; (800d348 <_dtoa_r+0x2d0>)
 800d0aa:	21ea      	movs	r1, #234	; 0xea
 800d0ac:	48a7      	ldr	r0, [pc, #668]	; (800d34c <_dtoa_r+0x2d4>)
 800d0ae:	f002 f8ad 	bl	800f20c <__assert_func>
 800d0b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d0b6:	6005      	str	r5, [r0, #0]
 800d0b8:	60c5      	str	r5, [r0, #12]
 800d0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0bc:	6819      	ldr	r1, [r3, #0]
 800d0be:	b151      	cbz	r1, 800d0d6 <_dtoa_r+0x5e>
 800d0c0:	685a      	ldr	r2, [r3, #4]
 800d0c2:	604a      	str	r2, [r1, #4]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	4093      	lsls	r3, r2
 800d0c8:	608b      	str	r3, [r1, #8]
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f001 f990 	bl	800e3f0 <_Bfree>
 800d0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]
 800d0d6:	1e3b      	subs	r3, r7, #0
 800d0d8:	bfaa      	itet	ge
 800d0da:	2300      	movge	r3, #0
 800d0dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d0e0:	f8c8 3000 	strge.w	r3, [r8]
 800d0e4:	4b9a      	ldr	r3, [pc, #616]	; (800d350 <_dtoa_r+0x2d8>)
 800d0e6:	bfbc      	itt	lt
 800d0e8:	2201      	movlt	r2, #1
 800d0ea:	f8c8 2000 	strlt.w	r2, [r8]
 800d0ee:	ea33 030b 	bics.w	r3, r3, fp
 800d0f2:	d11b      	bne.n	800d12c <_dtoa_r+0xb4>
 800d0f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d100:	4333      	orrs	r3, r6
 800d102:	f000 8592 	beq.w	800dc2a <_dtoa_r+0xbb2>
 800d106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d108:	b963      	cbnz	r3, 800d124 <_dtoa_r+0xac>
 800d10a:	4b92      	ldr	r3, [pc, #584]	; (800d354 <_dtoa_r+0x2dc>)
 800d10c:	e022      	b.n	800d154 <_dtoa_r+0xdc>
 800d10e:	4b92      	ldr	r3, [pc, #584]	; (800d358 <_dtoa_r+0x2e0>)
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	3308      	adds	r3, #8
 800d114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d116:	6013      	str	r3, [r2, #0]
 800d118:	9801      	ldr	r0, [sp, #4]
 800d11a:	b013      	add	sp, #76	; 0x4c
 800d11c:	ecbd 8b04 	vpop	{d8-d9}
 800d120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d124:	4b8b      	ldr	r3, [pc, #556]	; (800d354 <_dtoa_r+0x2dc>)
 800d126:	9301      	str	r3, [sp, #4]
 800d128:	3303      	adds	r3, #3
 800d12a:	e7f3      	b.n	800d114 <_dtoa_r+0x9c>
 800d12c:	2200      	movs	r2, #0
 800d12e:	2300      	movs	r3, #0
 800d130:	4650      	mov	r0, sl
 800d132:	4659      	mov	r1, fp
 800d134:	f7f3 fcd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d138:	ec4b ab19 	vmov	d9, sl, fp
 800d13c:	4680      	mov	r8, r0
 800d13e:	b158      	cbz	r0, 800d158 <_dtoa_r+0xe0>
 800d140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d142:	2301      	movs	r3, #1
 800d144:	6013      	str	r3, [r2, #0]
 800d146:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 856b 	beq.w	800dc24 <_dtoa_r+0xbac>
 800d14e:	4883      	ldr	r0, [pc, #524]	; (800d35c <_dtoa_r+0x2e4>)
 800d150:	6018      	str	r0, [r3, #0]
 800d152:	1e43      	subs	r3, r0, #1
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	e7df      	b.n	800d118 <_dtoa_r+0xa0>
 800d158:	ec4b ab10 	vmov	d0, sl, fp
 800d15c:	aa10      	add	r2, sp, #64	; 0x40
 800d15e:	a911      	add	r1, sp, #68	; 0x44
 800d160:	4620      	mov	r0, r4
 800d162:	f001 fcf3 	bl	800eb4c <__d2b>
 800d166:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d16a:	ee08 0a10 	vmov	s16, r0
 800d16e:	2d00      	cmp	r5, #0
 800d170:	f000 8084 	beq.w	800d27c <_dtoa_r+0x204>
 800d174:	ee19 3a90 	vmov	r3, s19
 800d178:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d17c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d180:	4656      	mov	r6, sl
 800d182:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d186:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d18a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d18e:	4b74      	ldr	r3, [pc, #464]	; (800d360 <_dtoa_r+0x2e8>)
 800d190:	2200      	movs	r2, #0
 800d192:	4630      	mov	r0, r6
 800d194:	4639      	mov	r1, r7
 800d196:	f7f3 f87f 	bl	8000298 <__aeabi_dsub>
 800d19a:	a365      	add	r3, pc, #404	; (adr r3, 800d330 <_dtoa_r+0x2b8>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f3 fa32 	bl	8000608 <__aeabi_dmul>
 800d1a4:	a364      	add	r3, pc, #400	; (adr r3, 800d338 <_dtoa_r+0x2c0>)
 800d1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1aa:	f7f3 f877 	bl	800029c <__adddf3>
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	460f      	mov	r7, r1
 800d1b4:	f7f3 f9be 	bl	8000534 <__aeabi_i2d>
 800d1b8:	a361      	add	r3, pc, #388	; (adr r3, 800d340 <_dtoa_r+0x2c8>)
 800d1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1be:	f7f3 fa23 	bl	8000608 <__aeabi_dmul>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	4639      	mov	r1, r7
 800d1ca:	f7f3 f867 	bl	800029c <__adddf3>
 800d1ce:	4606      	mov	r6, r0
 800d1d0:	460f      	mov	r7, r1
 800d1d2:	f7f3 fcc9 	bl	8000b68 <__aeabi_d2iz>
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	9000      	str	r0, [sp, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	4630      	mov	r0, r6
 800d1de:	4639      	mov	r1, r7
 800d1e0:	f7f3 fc84 	bl	8000aec <__aeabi_dcmplt>
 800d1e4:	b150      	cbz	r0, 800d1fc <_dtoa_r+0x184>
 800d1e6:	9800      	ldr	r0, [sp, #0]
 800d1e8:	f7f3 f9a4 	bl	8000534 <__aeabi_i2d>
 800d1ec:	4632      	mov	r2, r6
 800d1ee:	463b      	mov	r3, r7
 800d1f0:	f7f3 fc72 	bl	8000ad8 <__aeabi_dcmpeq>
 800d1f4:	b910      	cbnz	r0, 800d1fc <_dtoa_r+0x184>
 800d1f6:	9b00      	ldr	r3, [sp, #0]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	9300      	str	r3, [sp, #0]
 800d1fc:	9b00      	ldr	r3, [sp, #0]
 800d1fe:	2b16      	cmp	r3, #22
 800d200:	d85a      	bhi.n	800d2b8 <_dtoa_r+0x240>
 800d202:	9a00      	ldr	r2, [sp, #0]
 800d204:	4b57      	ldr	r3, [pc, #348]	; (800d364 <_dtoa_r+0x2ec>)
 800d206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20e:	ec51 0b19 	vmov	r0, r1, d9
 800d212:	f7f3 fc6b 	bl	8000aec <__aeabi_dcmplt>
 800d216:	2800      	cmp	r0, #0
 800d218:	d050      	beq.n	800d2bc <_dtoa_r+0x244>
 800d21a:	9b00      	ldr	r3, [sp, #0]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	2300      	movs	r3, #0
 800d222:	930b      	str	r3, [sp, #44]	; 0x2c
 800d224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d226:	1b5d      	subs	r5, r3, r5
 800d228:	1e6b      	subs	r3, r5, #1
 800d22a:	9305      	str	r3, [sp, #20]
 800d22c:	bf45      	ittet	mi
 800d22e:	f1c5 0301 	rsbmi	r3, r5, #1
 800d232:	9304      	strmi	r3, [sp, #16]
 800d234:	2300      	movpl	r3, #0
 800d236:	2300      	movmi	r3, #0
 800d238:	bf4c      	ite	mi
 800d23a:	9305      	strmi	r3, [sp, #20]
 800d23c:	9304      	strpl	r3, [sp, #16]
 800d23e:	9b00      	ldr	r3, [sp, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	db3d      	blt.n	800d2c0 <_dtoa_r+0x248>
 800d244:	9b05      	ldr	r3, [sp, #20]
 800d246:	9a00      	ldr	r2, [sp, #0]
 800d248:	920a      	str	r2, [sp, #40]	; 0x28
 800d24a:	4413      	add	r3, r2
 800d24c:	9305      	str	r3, [sp, #20]
 800d24e:	2300      	movs	r3, #0
 800d250:	9307      	str	r3, [sp, #28]
 800d252:	9b06      	ldr	r3, [sp, #24]
 800d254:	2b09      	cmp	r3, #9
 800d256:	f200 8089 	bhi.w	800d36c <_dtoa_r+0x2f4>
 800d25a:	2b05      	cmp	r3, #5
 800d25c:	bfc4      	itt	gt
 800d25e:	3b04      	subgt	r3, #4
 800d260:	9306      	strgt	r3, [sp, #24]
 800d262:	9b06      	ldr	r3, [sp, #24]
 800d264:	f1a3 0302 	sub.w	r3, r3, #2
 800d268:	bfcc      	ite	gt
 800d26a:	2500      	movgt	r5, #0
 800d26c:	2501      	movle	r5, #1
 800d26e:	2b03      	cmp	r3, #3
 800d270:	f200 8087 	bhi.w	800d382 <_dtoa_r+0x30a>
 800d274:	e8df f003 	tbb	[pc, r3]
 800d278:	59383a2d 	.word	0x59383a2d
 800d27c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d280:	441d      	add	r5, r3
 800d282:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d286:	2b20      	cmp	r3, #32
 800d288:	bfc1      	itttt	gt
 800d28a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d28e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d292:	fa0b f303 	lslgt.w	r3, fp, r3
 800d296:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d29a:	bfda      	itte	le
 800d29c:	f1c3 0320 	rsble	r3, r3, #32
 800d2a0:	fa06 f003 	lslle.w	r0, r6, r3
 800d2a4:	4318      	orrgt	r0, r3
 800d2a6:	f7f3 f935 	bl	8000514 <__aeabi_ui2d>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d2b2:	3d01      	subs	r5, #1
 800d2b4:	930e      	str	r3, [sp, #56]	; 0x38
 800d2b6:	e76a      	b.n	800d18e <_dtoa_r+0x116>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e7b2      	b.n	800d222 <_dtoa_r+0x1aa>
 800d2bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800d2be:	e7b1      	b.n	800d224 <_dtoa_r+0x1ac>
 800d2c0:	9b04      	ldr	r3, [sp, #16]
 800d2c2:	9a00      	ldr	r2, [sp, #0]
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	9304      	str	r3, [sp, #16]
 800d2c8:	4253      	negs	r3, r2
 800d2ca:	9307      	str	r3, [sp, #28]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800d2d0:	e7bf      	b.n	800d252 <_dtoa_r+0x1da>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	9308      	str	r3, [sp, #32]
 800d2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	dc55      	bgt.n	800d388 <_dtoa_r+0x310>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d2e6:	e00c      	b.n	800d302 <_dtoa_r+0x28a>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e7f3      	b.n	800d2d4 <_dtoa_r+0x25c>
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f0:	9308      	str	r3, [sp, #32]
 800d2f2:	9b00      	ldr	r3, [sp, #0]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	9302      	str	r3, [sp, #8]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	bfb8      	it	lt
 800d300:	2301      	movlt	r3, #1
 800d302:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d304:	2200      	movs	r2, #0
 800d306:	6042      	str	r2, [r0, #4]
 800d308:	2204      	movs	r2, #4
 800d30a:	f102 0614 	add.w	r6, r2, #20
 800d30e:	429e      	cmp	r6, r3
 800d310:	6841      	ldr	r1, [r0, #4]
 800d312:	d93d      	bls.n	800d390 <_dtoa_r+0x318>
 800d314:	4620      	mov	r0, r4
 800d316:	f001 f82b 	bl	800e370 <_Balloc>
 800d31a:	9001      	str	r0, [sp, #4]
 800d31c:	2800      	cmp	r0, #0
 800d31e:	d13b      	bne.n	800d398 <_dtoa_r+0x320>
 800d320:	4b11      	ldr	r3, [pc, #68]	; (800d368 <_dtoa_r+0x2f0>)
 800d322:	4602      	mov	r2, r0
 800d324:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d328:	e6c0      	b.n	800d0ac <_dtoa_r+0x34>
 800d32a:	2301      	movs	r3, #1
 800d32c:	e7df      	b.n	800d2ee <_dtoa_r+0x276>
 800d32e:	bf00      	nop
 800d330:	636f4361 	.word	0x636f4361
 800d334:	3fd287a7 	.word	0x3fd287a7
 800d338:	8b60c8b3 	.word	0x8b60c8b3
 800d33c:	3fc68a28 	.word	0x3fc68a28
 800d340:	509f79fb 	.word	0x509f79fb
 800d344:	3fd34413 	.word	0x3fd34413
 800d348:	080101fe 	.word	0x080101fe
 800d34c:	08010215 	.word	0x08010215
 800d350:	7ff00000 	.word	0x7ff00000
 800d354:	080101fa 	.word	0x080101fa
 800d358:	080101f1 	.word	0x080101f1
 800d35c:	08010075 	.word	0x08010075
 800d360:	3ff80000 	.word	0x3ff80000
 800d364:	08010380 	.word	0x08010380
 800d368:	08010270 	.word	0x08010270
 800d36c:	2501      	movs	r5, #1
 800d36e:	2300      	movs	r3, #0
 800d370:	9306      	str	r3, [sp, #24]
 800d372:	9508      	str	r5, [sp, #32]
 800d374:	f04f 33ff 	mov.w	r3, #4294967295
 800d378:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d37c:	2200      	movs	r2, #0
 800d37e:	2312      	movs	r3, #18
 800d380:	e7b0      	b.n	800d2e4 <_dtoa_r+0x26c>
 800d382:	2301      	movs	r3, #1
 800d384:	9308      	str	r3, [sp, #32]
 800d386:	e7f5      	b.n	800d374 <_dtoa_r+0x2fc>
 800d388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d38e:	e7b8      	b.n	800d302 <_dtoa_r+0x28a>
 800d390:	3101      	adds	r1, #1
 800d392:	6041      	str	r1, [r0, #4]
 800d394:	0052      	lsls	r2, r2, #1
 800d396:	e7b8      	b.n	800d30a <_dtoa_r+0x292>
 800d398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d39a:	9a01      	ldr	r2, [sp, #4]
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	9b03      	ldr	r3, [sp, #12]
 800d3a0:	2b0e      	cmp	r3, #14
 800d3a2:	f200 809d 	bhi.w	800d4e0 <_dtoa_r+0x468>
 800d3a6:	2d00      	cmp	r5, #0
 800d3a8:	f000 809a 	beq.w	800d4e0 <_dtoa_r+0x468>
 800d3ac:	9b00      	ldr	r3, [sp, #0]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	dd32      	ble.n	800d418 <_dtoa_r+0x3a0>
 800d3b2:	4ab7      	ldr	r2, [pc, #732]	; (800d690 <_dtoa_r+0x618>)
 800d3b4:	f003 030f 	and.w	r3, r3, #15
 800d3b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d3bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3c0:	9b00      	ldr	r3, [sp, #0]
 800d3c2:	05d8      	lsls	r0, r3, #23
 800d3c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d3c8:	d516      	bpl.n	800d3f8 <_dtoa_r+0x380>
 800d3ca:	4bb2      	ldr	r3, [pc, #712]	; (800d694 <_dtoa_r+0x61c>)
 800d3cc:	ec51 0b19 	vmov	r0, r1, d9
 800d3d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d3d4:	f7f3 fa42 	bl	800085c <__aeabi_ddiv>
 800d3d8:	f007 070f 	and.w	r7, r7, #15
 800d3dc:	4682      	mov	sl, r0
 800d3de:	468b      	mov	fp, r1
 800d3e0:	2503      	movs	r5, #3
 800d3e2:	4eac      	ldr	r6, [pc, #688]	; (800d694 <_dtoa_r+0x61c>)
 800d3e4:	b957      	cbnz	r7, 800d3fc <_dtoa_r+0x384>
 800d3e6:	4642      	mov	r2, r8
 800d3e8:	464b      	mov	r3, r9
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	4659      	mov	r1, fp
 800d3ee:	f7f3 fa35 	bl	800085c <__aeabi_ddiv>
 800d3f2:	4682      	mov	sl, r0
 800d3f4:	468b      	mov	fp, r1
 800d3f6:	e028      	b.n	800d44a <_dtoa_r+0x3d2>
 800d3f8:	2502      	movs	r5, #2
 800d3fa:	e7f2      	b.n	800d3e2 <_dtoa_r+0x36a>
 800d3fc:	07f9      	lsls	r1, r7, #31
 800d3fe:	d508      	bpl.n	800d412 <_dtoa_r+0x39a>
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d408:	f7f3 f8fe 	bl	8000608 <__aeabi_dmul>
 800d40c:	3501      	adds	r5, #1
 800d40e:	4680      	mov	r8, r0
 800d410:	4689      	mov	r9, r1
 800d412:	107f      	asrs	r7, r7, #1
 800d414:	3608      	adds	r6, #8
 800d416:	e7e5      	b.n	800d3e4 <_dtoa_r+0x36c>
 800d418:	f000 809b 	beq.w	800d552 <_dtoa_r+0x4da>
 800d41c:	9b00      	ldr	r3, [sp, #0]
 800d41e:	4f9d      	ldr	r7, [pc, #628]	; (800d694 <_dtoa_r+0x61c>)
 800d420:	425e      	negs	r6, r3
 800d422:	4b9b      	ldr	r3, [pc, #620]	; (800d690 <_dtoa_r+0x618>)
 800d424:	f006 020f 	and.w	r2, r6, #15
 800d428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d430:	ec51 0b19 	vmov	r0, r1, d9
 800d434:	f7f3 f8e8 	bl	8000608 <__aeabi_dmul>
 800d438:	1136      	asrs	r6, r6, #4
 800d43a:	4682      	mov	sl, r0
 800d43c:	468b      	mov	fp, r1
 800d43e:	2300      	movs	r3, #0
 800d440:	2502      	movs	r5, #2
 800d442:	2e00      	cmp	r6, #0
 800d444:	d17a      	bne.n	800d53c <_dtoa_r+0x4c4>
 800d446:	2b00      	cmp	r3, #0
 800d448:	d1d3      	bne.n	800d3f2 <_dtoa_r+0x37a>
 800d44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	f000 8082 	beq.w	800d556 <_dtoa_r+0x4de>
 800d452:	4b91      	ldr	r3, [pc, #580]	; (800d698 <_dtoa_r+0x620>)
 800d454:	2200      	movs	r2, #0
 800d456:	4650      	mov	r0, sl
 800d458:	4659      	mov	r1, fp
 800d45a:	f7f3 fb47 	bl	8000aec <__aeabi_dcmplt>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d079      	beq.n	800d556 <_dtoa_r+0x4de>
 800d462:	9b03      	ldr	r3, [sp, #12]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d076      	beq.n	800d556 <_dtoa_r+0x4de>
 800d468:	9b02      	ldr	r3, [sp, #8]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	dd36      	ble.n	800d4dc <_dtoa_r+0x464>
 800d46e:	9b00      	ldr	r3, [sp, #0]
 800d470:	4650      	mov	r0, sl
 800d472:	4659      	mov	r1, fp
 800d474:	1e5f      	subs	r7, r3, #1
 800d476:	2200      	movs	r2, #0
 800d478:	4b88      	ldr	r3, [pc, #544]	; (800d69c <_dtoa_r+0x624>)
 800d47a:	f7f3 f8c5 	bl	8000608 <__aeabi_dmul>
 800d47e:	9e02      	ldr	r6, [sp, #8]
 800d480:	4682      	mov	sl, r0
 800d482:	468b      	mov	fp, r1
 800d484:	3501      	adds	r5, #1
 800d486:	4628      	mov	r0, r5
 800d488:	f7f3 f854 	bl	8000534 <__aeabi_i2d>
 800d48c:	4652      	mov	r2, sl
 800d48e:	465b      	mov	r3, fp
 800d490:	f7f3 f8ba 	bl	8000608 <__aeabi_dmul>
 800d494:	4b82      	ldr	r3, [pc, #520]	; (800d6a0 <_dtoa_r+0x628>)
 800d496:	2200      	movs	r2, #0
 800d498:	f7f2 ff00 	bl	800029c <__adddf3>
 800d49c:	46d0      	mov	r8, sl
 800d49e:	46d9      	mov	r9, fp
 800d4a0:	4682      	mov	sl, r0
 800d4a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d4a6:	2e00      	cmp	r6, #0
 800d4a8:	d158      	bne.n	800d55c <_dtoa_r+0x4e4>
 800d4aa:	4b7e      	ldr	r3, [pc, #504]	; (800d6a4 <_dtoa_r+0x62c>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	4649      	mov	r1, r9
 800d4b2:	f7f2 fef1 	bl	8000298 <__aeabi_dsub>
 800d4b6:	4652      	mov	r2, sl
 800d4b8:	465b      	mov	r3, fp
 800d4ba:	4680      	mov	r8, r0
 800d4bc:	4689      	mov	r9, r1
 800d4be:	f7f3 fb33 	bl	8000b28 <__aeabi_dcmpgt>
 800d4c2:	2800      	cmp	r0, #0
 800d4c4:	f040 8295 	bne.w	800d9f2 <_dtoa_r+0x97a>
 800d4c8:	4652      	mov	r2, sl
 800d4ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	4649      	mov	r1, r9
 800d4d2:	f7f3 fb0b 	bl	8000aec <__aeabi_dcmplt>
 800d4d6:	2800      	cmp	r0, #0
 800d4d8:	f040 8289 	bne.w	800d9ee <_dtoa_r+0x976>
 800d4dc:	ec5b ab19 	vmov	sl, fp, d9
 800d4e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	f2c0 8148 	blt.w	800d778 <_dtoa_r+0x700>
 800d4e8:	9a00      	ldr	r2, [sp, #0]
 800d4ea:	2a0e      	cmp	r2, #14
 800d4ec:	f300 8144 	bgt.w	800d778 <_dtoa_r+0x700>
 800d4f0:	4b67      	ldr	r3, [pc, #412]	; (800d690 <_dtoa_r+0x618>)
 800d4f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f280 80d5 	bge.w	800d6ac <_dtoa_r+0x634>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	f300 80d1 	bgt.w	800d6ac <_dtoa_r+0x634>
 800d50a:	f040 826f 	bne.w	800d9ec <_dtoa_r+0x974>
 800d50e:	4b65      	ldr	r3, [pc, #404]	; (800d6a4 <_dtoa_r+0x62c>)
 800d510:	2200      	movs	r2, #0
 800d512:	4640      	mov	r0, r8
 800d514:	4649      	mov	r1, r9
 800d516:	f7f3 f877 	bl	8000608 <__aeabi_dmul>
 800d51a:	4652      	mov	r2, sl
 800d51c:	465b      	mov	r3, fp
 800d51e:	f7f3 faf9 	bl	8000b14 <__aeabi_dcmpge>
 800d522:	9e03      	ldr	r6, [sp, #12]
 800d524:	4637      	mov	r7, r6
 800d526:	2800      	cmp	r0, #0
 800d528:	f040 8245 	bne.w	800d9b6 <_dtoa_r+0x93e>
 800d52c:	9d01      	ldr	r5, [sp, #4]
 800d52e:	2331      	movs	r3, #49	; 0x31
 800d530:	f805 3b01 	strb.w	r3, [r5], #1
 800d534:	9b00      	ldr	r3, [sp, #0]
 800d536:	3301      	adds	r3, #1
 800d538:	9300      	str	r3, [sp, #0]
 800d53a:	e240      	b.n	800d9be <_dtoa_r+0x946>
 800d53c:	07f2      	lsls	r2, r6, #31
 800d53e:	d505      	bpl.n	800d54c <_dtoa_r+0x4d4>
 800d540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d544:	f7f3 f860 	bl	8000608 <__aeabi_dmul>
 800d548:	3501      	adds	r5, #1
 800d54a:	2301      	movs	r3, #1
 800d54c:	1076      	asrs	r6, r6, #1
 800d54e:	3708      	adds	r7, #8
 800d550:	e777      	b.n	800d442 <_dtoa_r+0x3ca>
 800d552:	2502      	movs	r5, #2
 800d554:	e779      	b.n	800d44a <_dtoa_r+0x3d2>
 800d556:	9f00      	ldr	r7, [sp, #0]
 800d558:	9e03      	ldr	r6, [sp, #12]
 800d55a:	e794      	b.n	800d486 <_dtoa_r+0x40e>
 800d55c:	9901      	ldr	r1, [sp, #4]
 800d55e:	4b4c      	ldr	r3, [pc, #304]	; (800d690 <_dtoa_r+0x618>)
 800d560:	4431      	add	r1, r6
 800d562:	910d      	str	r1, [sp, #52]	; 0x34
 800d564:	9908      	ldr	r1, [sp, #32]
 800d566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d56e:	2900      	cmp	r1, #0
 800d570:	d043      	beq.n	800d5fa <_dtoa_r+0x582>
 800d572:	494d      	ldr	r1, [pc, #308]	; (800d6a8 <_dtoa_r+0x630>)
 800d574:	2000      	movs	r0, #0
 800d576:	f7f3 f971 	bl	800085c <__aeabi_ddiv>
 800d57a:	4652      	mov	r2, sl
 800d57c:	465b      	mov	r3, fp
 800d57e:	f7f2 fe8b 	bl	8000298 <__aeabi_dsub>
 800d582:	9d01      	ldr	r5, [sp, #4]
 800d584:	4682      	mov	sl, r0
 800d586:	468b      	mov	fp, r1
 800d588:	4649      	mov	r1, r9
 800d58a:	4640      	mov	r0, r8
 800d58c:	f7f3 faec 	bl	8000b68 <__aeabi_d2iz>
 800d590:	4606      	mov	r6, r0
 800d592:	f7f2 ffcf 	bl	8000534 <__aeabi_i2d>
 800d596:	4602      	mov	r2, r0
 800d598:	460b      	mov	r3, r1
 800d59a:	4640      	mov	r0, r8
 800d59c:	4649      	mov	r1, r9
 800d59e:	f7f2 fe7b 	bl	8000298 <__aeabi_dsub>
 800d5a2:	3630      	adds	r6, #48	; 0x30
 800d5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800d5a8:	4652      	mov	r2, sl
 800d5aa:	465b      	mov	r3, fp
 800d5ac:	4680      	mov	r8, r0
 800d5ae:	4689      	mov	r9, r1
 800d5b0:	f7f3 fa9c 	bl	8000aec <__aeabi_dcmplt>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d163      	bne.n	800d680 <_dtoa_r+0x608>
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	464b      	mov	r3, r9
 800d5bc:	4936      	ldr	r1, [pc, #216]	; (800d698 <_dtoa_r+0x620>)
 800d5be:	2000      	movs	r0, #0
 800d5c0:	f7f2 fe6a 	bl	8000298 <__aeabi_dsub>
 800d5c4:	4652      	mov	r2, sl
 800d5c6:	465b      	mov	r3, fp
 800d5c8:	f7f3 fa90 	bl	8000aec <__aeabi_dcmplt>
 800d5cc:	2800      	cmp	r0, #0
 800d5ce:	f040 80b5 	bne.w	800d73c <_dtoa_r+0x6c4>
 800d5d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5d4:	429d      	cmp	r5, r3
 800d5d6:	d081      	beq.n	800d4dc <_dtoa_r+0x464>
 800d5d8:	4b30      	ldr	r3, [pc, #192]	; (800d69c <_dtoa_r+0x624>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	4650      	mov	r0, sl
 800d5de:	4659      	mov	r1, fp
 800d5e0:	f7f3 f812 	bl	8000608 <__aeabi_dmul>
 800d5e4:	4b2d      	ldr	r3, [pc, #180]	; (800d69c <_dtoa_r+0x624>)
 800d5e6:	4682      	mov	sl, r0
 800d5e8:	468b      	mov	fp, r1
 800d5ea:	4640      	mov	r0, r8
 800d5ec:	4649      	mov	r1, r9
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f7f3 f80a 	bl	8000608 <__aeabi_dmul>
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	4689      	mov	r9, r1
 800d5f8:	e7c6      	b.n	800d588 <_dtoa_r+0x510>
 800d5fa:	4650      	mov	r0, sl
 800d5fc:	4659      	mov	r1, fp
 800d5fe:	f7f3 f803 	bl	8000608 <__aeabi_dmul>
 800d602:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d604:	9d01      	ldr	r5, [sp, #4]
 800d606:	930f      	str	r3, [sp, #60]	; 0x3c
 800d608:	4682      	mov	sl, r0
 800d60a:	468b      	mov	fp, r1
 800d60c:	4649      	mov	r1, r9
 800d60e:	4640      	mov	r0, r8
 800d610:	f7f3 faaa 	bl	8000b68 <__aeabi_d2iz>
 800d614:	4606      	mov	r6, r0
 800d616:	f7f2 ff8d 	bl	8000534 <__aeabi_i2d>
 800d61a:	3630      	adds	r6, #48	; 0x30
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	4640      	mov	r0, r8
 800d622:	4649      	mov	r1, r9
 800d624:	f7f2 fe38 	bl	8000298 <__aeabi_dsub>
 800d628:	f805 6b01 	strb.w	r6, [r5], #1
 800d62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d62e:	429d      	cmp	r5, r3
 800d630:	4680      	mov	r8, r0
 800d632:	4689      	mov	r9, r1
 800d634:	f04f 0200 	mov.w	r2, #0
 800d638:	d124      	bne.n	800d684 <_dtoa_r+0x60c>
 800d63a:	4b1b      	ldr	r3, [pc, #108]	; (800d6a8 <_dtoa_r+0x630>)
 800d63c:	4650      	mov	r0, sl
 800d63e:	4659      	mov	r1, fp
 800d640:	f7f2 fe2c 	bl	800029c <__adddf3>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4640      	mov	r0, r8
 800d64a:	4649      	mov	r1, r9
 800d64c:	f7f3 fa6c 	bl	8000b28 <__aeabi_dcmpgt>
 800d650:	2800      	cmp	r0, #0
 800d652:	d173      	bne.n	800d73c <_dtoa_r+0x6c4>
 800d654:	4652      	mov	r2, sl
 800d656:	465b      	mov	r3, fp
 800d658:	4913      	ldr	r1, [pc, #76]	; (800d6a8 <_dtoa_r+0x630>)
 800d65a:	2000      	movs	r0, #0
 800d65c:	f7f2 fe1c 	bl	8000298 <__aeabi_dsub>
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	4640      	mov	r0, r8
 800d666:	4649      	mov	r1, r9
 800d668:	f7f3 fa40 	bl	8000aec <__aeabi_dcmplt>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	f43f af35 	beq.w	800d4dc <_dtoa_r+0x464>
 800d672:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d674:	1e6b      	subs	r3, r5, #1
 800d676:	930f      	str	r3, [sp, #60]	; 0x3c
 800d678:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d67c:	2b30      	cmp	r3, #48	; 0x30
 800d67e:	d0f8      	beq.n	800d672 <_dtoa_r+0x5fa>
 800d680:	9700      	str	r7, [sp, #0]
 800d682:	e049      	b.n	800d718 <_dtoa_r+0x6a0>
 800d684:	4b05      	ldr	r3, [pc, #20]	; (800d69c <_dtoa_r+0x624>)
 800d686:	f7f2 ffbf 	bl	8000608 <__aeabi_dmul>
 800d68a:	4680      	mov	r8, r0
 800d68c:	4689      	mov	r9, r1
 800d68e:	e7bd      	b.n	800d60c <_dtoa_r+0x594>
 800d690:	08010380 	.word	0x08010380
 800d694:	08010358 	.word	0x08010358
 800d698:	3ff00000 	.word	0x3ff00000
 800d69c:	40240000 	.word	0x40240000
 800d6a0:	401c0000 	.word	0x401c0000
 800d6a4:	40140000 	.word	0x40140000
 800d6a8:	3fe00000 	.word	0x3fe00000
 800d6ac:	9d01      	ldr	r5, [sp, #4]
 800d6ae:	4656      	mov	r6, sl
 800d6b0:	465f      	mov	r7, fp
 800d6b2:	4642      	mov	r2, r8
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	4630      	mov	r0, r6
 800d6b8:	4639      	mov	r1, r7
 800d6ba:	f7f3 f8cf 	bl	800085c <__aeabi_ddiv>
 800d6be:	f7f3 fa53 	bl	8000b68 <__aeabi_d2iz>
 800d6c2:	4682      	mov	sl, r0
 800d6c4:	f7f2 ff36 	bl	8000534 <__aeabi_i2d>
 800d6c8:	4642      	mov	r2, r8
 800d6ca:	464b      	mov	r3, r9
 800d6cc:	f7f2 ff9c 	bl	8000608 <__aeabi_dmul>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	460b      	mov	r3, r1
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	4639      	mov	r1, r7
 800d6d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d6dc:	f7f2 fddc 	bl	8000298 <__aeabi_dsub>
 800d6e0:	f805 6b01 	strb.w	r6, [r5], #1
 800d6e4:	9e01      	ldr	r6, [sp, #4]
 800d6e6:	9f03      	ldr	r7, [sp, #12]
 800d6e8:	1bae      	subs	r6, r5, r6
 800d6ea:	42b7      	cmp	r7, r6
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	d135      	bne.n	800d75e <_dtoa_r+0x6e6>
 800d6f2:	f7f2 fdd3 	bl	800029c <__adddf3>
 800d6f6:	4642      	mov	r2, r8
 800d6f8:	464b      	mov	r3, r9
 800d6fa:	4606      	mov	r6, r0
 800d6fc:	460f      	mov	r7, r1
 800d6fe:	f7f3 fa13 	bl	8000b28 <__aeabi_dcmpgt>
 800d702:	b9d0      	cbnz	r0, 800d73a <_dtoa_r+0x6c2>
 800d704:	4642      	mov	r2, r8
 800d706:	464b      	mov	r3, r9
 800d708:	4630      	mov	r0, r6
 800d70a:	4639      	mov	r1, r7
 800d70c:	f7f3 f9e4 	bl	8000ad8 <__aeabi_dcmpeq>
 800d710:	b110      	cbz	r0, 800d718 <_dtoa_r+0x6a0>
 800d712:	f01a 0f01 	tst.w	sl, #1
 800d716:	d110      	bne.n	800d73a <_dtoa_r+0x6c2>
 800d718:	4620      	mov	r0, r4
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	f000 fe67 	bl	800e3f0 <_Bfree>
 800d722:	2300      	movs	r3, #0
 800d724:	9800      	ldr	r0, [sp, #0]
 800d726:	702b      	strb	r3, [r5, #0]
 800d728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d72a:	3001      	adds	r0, #1
 800d72c:	6018      	str	r0, [r3, #0]
 800d72e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d730:	2b00      	cmp	r3, #0
 800d732:	f43f acf1 	beq.w	800d118 <_dtoa_r+0xa0>
 800d736:	601d      	str	r5, [r3, #0]
 800d738:	e4ee      	b.n	800d118 <_dtoa_r+0xa0>
 800d73a:	9f00      	ldr	r7, [sp, #0]
 800d73c:	462b      	mov	r3, r5
 800d73e:	461d      	mov	r5, r3
 800d740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d744:	2a39      	cmp	r2, #57	; 0x39
 800d746:	d106      	bne.n	800d756 <_dtoa_r+0x6de>
 800d748:	9a01      	ldr	r2, [sp, #4]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d1f7      	bne.n	800d73e <_dtoa_r+0x6c6>
 800d74e:	9901      	ldr	r1, [sp, #4]
 800d750:	2230      	movs	r2, #48	; 0x30
 800d752:	3701      	adds	r7, #1
 800d754:	700a      	strb	r2, [r1, #0]
 800d756:	781a      	ldrb	r2, [r3, #0]
 800d758:	3201      	adds	r2, #1
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	e790      	b.n	800d680 <_dtoa_r+0x608>
 800d75e:	4ba6      	ldr	r3, [pc, #664]	; (800d9f8 <_dtoa_r+0x980>)
 800d760:	2200      	movs	r2, #0
 800d762:	f7f2 ff51 	bl	8000608 <__aeabi_dmul>
 800d766:	2200      	movs	r2, #0
 800d768:	2300      	movs	r3, #0
 800d76a:	4606      	mov	r6, r0
 800d76c:	460f      	mov	r7, r1
 800d76e:	f7f3 f9b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d772:	2800      	cmp	r0, #0
 800d774:	d09d      	beq.n	800d6b2 <_dtoa_r+0x63a>
 800d776:	e7cf      	b.n	800d718 <_dtoa_r+0x6a0>
 800d778:	9a08      	ldr	r2, [sp, #32]
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	f000 80d7 	beq.w	800d92e <_dtoa_r+0x8b6>
 800d780:	9a06      	ldr	r2, [sp, #24]
 800d782:	2a01      	cmp	r2, #1
 800d784:	f300 80ba 	bgt.w	800d8fc <_dtoa_r+0x884>
 800d788:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d78a:	2a00      	cmp	r2, #0
 800d78c:	f000 80b2 	beq.w	800d8f4 <_dtoa_r+0x87c>
 800d790:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d794:	9e07      	ldr	r6, [sp, #28]
 800d796:	9d04      	ldr	r5, [sp, #16]
 800d798:	9a04      	ldr	r2, [sp, #16]
 800d79a:	441a      	add	r2, r3
 800d79c:	9204      	str	r2, [sp, #16]
 800d79e:	9a05      	ldr	r2, [sp, #20]
 800d7a0:	2101      	movs	r1, #1
 800d7a2:	441a      	add	r2, r3
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	9205      	str	r2, [sp, #20]
 800d7a8:	f000 ff24 	bl	800e5f4 <__i2b>
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	2d00      	cmp	r5, #0
 800d7b0:	dd0c      	ble.n	800d7cc <_dtoa_r+0x754>
 800d7b2:	9b05      	ldr	r3, [sp, #20]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	dd09      	ble.n	800d7cc <_dtoa_r+0x754>
 800d7b8:	42ab      	cmp	r3, r5
 800d7ba:	9a04      	ldr	r2, [sp, #16]
 800d7bc:	bfa8      	it	ge
 800d7be:	462b      	movge	r3, r5
 800d7c0:	1ad2      	subs	r2, r2, r3
 800d7c2:	9204      	str	r2, [sp, #16]
 800d7c4:	9a05      	ldr	r2, [sp, #20]
 800d7c6:	1aed      	subs	r5, r5, r3
 800d7c8:	1ad3      	subs	r3, r2, r3
 800d7ca:	9305      	str	r3, [sp, #20]
 800d7cc:	9b07      	ldr	r3, [sp, #28]
 800d7ce:	b31b      	cbz	r3, 800d818 <_dtoa_r+0x7a0>
 800d7d0:	9b08      	ldr	r3, [sp, #32]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 80af 	beq.w	800d936 <_dtoa_r+0x8be>
 800d7d8:	2e00      	cmp	r6, #0
 800d7da:	dd13      	ble.n	800d804 <_dtoa_r+0x78c>
 800d7dc:	4639      	mov	r1, r7
 800d7de:	4632      	mov	r2, r6
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 ffc7 	bl	800e774 <__pow5mult>
 800d7e6:	ee18 2a10 	vmov	r2, s16
 800d7ea:	4601      	mov	r1, r0
 800d7ec:	4607      	mov	r7, r0
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f000 ff16 	bl	800e620 <__multiply>
 800d7f4:	ee18 1a10 	vmov	r1, s16
 800d7f8:	4680      	mov	r8, r0
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 fdf8 	bl	800e3f0 <_Bfree>
 800d800:	ee08 8a10 	vmov	s16, r8
 800d804:	9b07      	ldr	r3, [sp, #28]
 800d806:	1b9a      	subs	r2, r3, r6
 800d808:	d006      	beq.n	800d818 <_dtoa_r+0x7a0>
 800d80a:	ee18 1a10 	vmov	r1, s16
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 ffb0 	bl	800e774 <__pow5mult>
 800d814:	ee08 0a10 	vmov	s16, r0
 800d818:	2101      	movs	r1, #1
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 feea 	bl	800e5f4 <__i2b>
 800d820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d822:	2b00      	cmp	r3, #0
 800d824:	4606      	mov	r6, r0
 800d826:	f340 8088 	ble.w	800d93a <_dtoa_r+0x8c2>
 800d82a:	461a      	mov	r2, r3
 800d82c:	4601      	mov	r1, r0
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 ffa0 	bl	800e774 <__pow5mult>
 800d834:	9b06      	ldr	r3, [sp, #24]
 800d836:	2b01      	cmp	r3, #1
 800d838:	4606      	mov	r6, r0
 800d83a:	f340 8081 	ble.w	800d940 <_dtoa_r+0x8c8>
 800d83e:	f04f 0800 	mov.w	r8, #0
 800d842:	6933      	ldr	r3, [r6, #16]
 800d844:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d848:	6918      	ldr	r0, [r3, #16]
 800d84a:	f000 fe83 	bl	800e554 <__hi0bits>
 800d84e:	f1c0 0020 	rsb	r0, r0, #32
 800d852:	9b05      	ldr	r3, [sp, #20]
 800d854:	4418      	add	r0, r3
 800d856:	f010 001f 	ands.w	r0, r0, #31
 800d85a:	f000 8092 	beq.w	800d982 <_dtoa_r+0x90a>
 800d85e:	f1c0 0320 	rsb	r3, r0, #32
 800d862:	2b04      	cmp	r3, #4
 800d864:	f340 808a 	ble.w	800d97c <_dtoa_r+0x904>
 800d868:	f1c0 001c 	rsb	r0, r0, #28
 800d86c:	9b04      	ldr	r3, [sp, #16]
 800d86e:	4403      	add	r3, r0
 800d870:	9304      	str	r3, [sp, #16]
 800d872:	9b05      	ldr	r3, [sp, #20]
 800d874:	4403      	add	r3, r0
 800d876:	4405      	add	r5, r0
 800d878:	9305      	str	r3, [sp, #20]
 800d87a:	9b04      	ldr	r3, [sp, #16]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	dd07      	ble.n	800d890 <_dtoa_r+0x818>
 800d880:	ee18 1a10 	vmov	r1, s16
 800d884:	461a      	mov	r2, r3
 800d886:	4620      	mov	r0, r4
 800d888:	f000 ffce 	bl	800e828 <__lshift>
 800d88c:	ee08 0a10 	vmov	s16, r0
 800d890:	9b05      	ldr	r3, [sp, #20]
 800d892:	2b00      	cmp	r3, #0
 800d894:	dd05      	ble.n	800d8a2 <_dtoa_r+0x82a>
 800d896:	4631      	mov	r1, r6
 800d898:	461a      	mov	r2, r3
 800d89a:	4620      	mov	r0, r4
 800d89c:	f000 ffc4 	bl	800e828 <__lshift>
 800d8a0:	4606      	mov	r6, r0
 800d8a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d06e      	beq.n	800d986 <_dtoa_r+0x90e>
 800d8a8:	ee18 0a10 	vmov	r0, s16
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	f001 f82b 	bl	800e908 <__mcmp>
 800d8b2:	2800      	cmp	r0, #0
 800d8b4:	da67      	bge.n	800d986 <_dtoa_r+0x90e>
 800d8b6:	9b00      	ldr	r3, [sp, #0]
 800d8b8:	3b01      	subs	r3, #1
 800d8ba:	ee18 1a10 	vmov	r1, s16
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	220a      	movs	r2, #10
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f000 fdb5 	bl	800e434 <__multadd>
 800d8ca:	9b08      	ldr	r3, [sp, #32]
 800d8cc:	ee08 0a10 	vmov	s16, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	f000 81b1 	beq.w	800dc38 <_dtoa_r+0xbc0>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4639      	mov	r1, r7
 800d8da:	220a      	movs	r2, #10
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f000 fda9 	bl	800e434 <__multadd>
 800d8e2:	9b02      	ldr	r3, [sp, #8]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	f300 808e 	bgt.w	800da08 <_dtoa_r+0x990>
 800d8ec:	9b06      	ldr	r3, [sp, #24]
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	dc51      	bgt.n	800d996 <_dtoa_r+0x91e>
 800d8f2:	e089      	b.n	800da08 <_dtoa_r+0x990>
 800d8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8fa:	e74b      	b.n	800d794 <_dtoa_r+0x71c>
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	1e5e      	subs	r6, r3, #1
 800d900:	9b07      	ldr	r3, [sp, #28]
 800d902:	42b3      	cmp	r3, r6
 800d904:	bfbf      	itttt	lt
 800d906:	9b07      	ldrlt	r3, [sp, #28]
 800d908:	9607      	strlt	r6, [sp, #28]
 800d90a:	1af2      	sublt	r2, r6, r3
 800d90c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d90e:	bfb6      	itet	lt
 800d910:	189b      	addlt	r3, r3, r2
 800d912:	1b9e      	subge	r6, r3, r6
 800d914:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d916:	9b03      	ldr	r3, [sp, #12]
 800d918:	bfb8      	it	lt
 800d91a:	2600      	movlt	r6, #0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	bfb7      	itett	lt
 800d920:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d924:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d928:	1a9d      	sublt	r5, r3, r2
 800d92a:	2300      	movlt	r3, #0
 800d92c:	e734      	b.n	800d798 <_dtoa_r+0x720>
 800d92e:	9e07      	ldr	r6, [sp, #28]
 800d930:	9d04      	ldr	r5, [sp, #16]
 800d932:	9f08      	ldr	r7, [sp, #32]
 800d934:	e73b      	b.n	800d7ae <_dtoa_r+0x736>
 800d936:	9a07      	ldr	r2, [sp, #28]
 800d938:	e767      	b.n	800d80a <_dtoa_r+0x792>
 800d93a:	9b06      	ldr	r3, [sp, #24]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	dc18      	bgt.n	800d972 <_dtoa_r+0x8fa>
 800d940:	f1ba 0f00 	cmp.w	sl, #0
 800d944:	d115      	bne.n	800d972 <_dtoa_r+0x8fa>
 800d946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d94a:	b993      	cbnz	r3, 800d972 <_dtoa_r+0x8fa>
 800d94c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d950:	0d1b      	lsrs	r3, r3, #20
 800d952:	051b      	lsls	r3, r3, #20
 800d954:	b183      	cbz	r3, 800d978 <_dtoa_r+0x900>
 800d956:	9b04      	ldr	r3, [sp, #16]
 800d958:	3301      	adds	r3, #1
 800d95a:	9304      	str	r3, [sp, #16]
 800d95c:	9b05      	ldr	r3, [sp, #20]
 800d95e:	3301      	adds	r3, #1
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	f04f 0801 	mov.w	r8, #1
 800d966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f47f af6a 	bne.w	800d842 <_dtoa_r+0x7ca>
 800d96e:	2001      	movs	r0, #1
 800d970:	e76f      	b.n	800d852 <_dtoa_r+0x7da>
 800d972:	f04f 0800 	mov.w	r8, #0
 800d976:	e7f6      	b.n	800d966 <_dtoa_r+0x8ee>
 800d978:	4698      	mov	r8, r3
 800d97a:	e7f4      	b.n	800d966 <_dtoa_r+0x8ee>
 800d97c:	f43f af7d 	beq.w	800d87a <_dtoa_r+0x802>
 800d980:	4618      	mov	r0, r3
 800d982:	301c      	adds	r0, #28
 800d984:	e772      	b.n	800d86c <_dtoa_r+0x7f4>
 800d986:	9b03      	ldr	r3, [sp, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dc37      	bgt.n	800d9fc <_dtoa_r+0x984>
 800d98c:	9b06      	ldr	r3, [sp, #24]
 800d98e:	2b02      	cmp	r3, #2
 800d990:	dd34      	ble.n	800d9fc <_dtoa_r+0x984>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	9b02      	ldr	r3, [sp, #8]
 800d998:	b96b      	cbnz	r3, 800d9b6 <_dtoa_r+0x93e>
 800d99a:	4631      	mov	r1, r6
 800d99c:	2205      	movs	r2, #5
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f000 fd48 	bl	800e434 <__multadd>
 800d9a4:	4601      	mov	r1, r0
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	ee18 0a10 	vmov	r0, s16
 800d9ac:	f000 ffac 	bl	800e908 <__mcmp>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f73f adbb 	bgt.w	800d52c <_dtoa_r+0x4b4>
 800d9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b8:	9d01      	ldr	r5, [sp, #4]
 800d9ba:	43db      	mvns	r3, r3
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	f04f 0800 	mov.w	r8, #0
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4620      	mov	r0, r4
 800d9c6:	f000 fd13 	bl	800e3f0 <_Bfree>
 800d9ca:	2f00      	cmp	r7, #0
 800d9cc:	f43f aea4 	beq.w	800d718 <_dtoa_r+0x6a0>
 800d9d0:	f1b8 0f00 	cmp.w	r8, #0
 800d9d4:	d005      	beq.n	800d9e2 <_dtoa_r+0x96a>
 800d9d6:	45b8      	cmp	r8, r7
 800d9d8:	d003      	beq.n	800d9e2 <_dtoa_r+0x96a>
 800d9da:	4641      	mov	r1, r8
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 fd07 	bl	800e3f0 <_Bfree>
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fd03 	bl	800e3f0 <_Bfree>
 800d9ea:	e695      	b.n	800d718 <_dtoa_r+0x6a0>
 800d9ec:	2600      	movs	r6, #0
 800d9ee:	4637      	mov	r7, r6
 800d9f0:	e7e1      	b.n	800d9b6 <_dtoa_r+0x93e>
 800d9f2:	9700      	str	r7, [sp, #0]
 800d9f4:	4637      	mov	r7, r6
 800d9f6:	e599      	b.n	800d52c <_dtoa_r+0x4b4>
 800d9f8:	40240000 	.word	0x40240000
 800d9fc:	9b08      	ldr	r3, [sp, #32]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f000 80ca 	beq.w	800db98 <_dtoa_r+0xb20>
 800da04:	9b03      	ldr	r3, [sp, #12]
 800da06:	9302      	str	r3, [sp, #8]
 800da08:	2d00      	cmp	r5, #0
 800da0a:	dd05      	ble.n	800da18 <_dtoa_r+0x9a0>
 800da0c:	4639      	mov	r1, r7
 800da0e:	462a      	mov	r2, r5
 800da10:	4620      	mov	r0, r4
 800da12:	f000 ff09 	bl	800e828 <__lshift>
 800da16:	4607      	mov	r7, r0
 800da18:	f1b8 0f00 	cmp.w	r8, #0
 800da1c:	d05b      	beq.n	800dad6 <_dtoa_r+0xa5e>
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	4620      	mov	r0, r4
 800da22:	f000 fca5 	bl	800e370 <_Balloc>
 800da26:	4605      	mov	r5, r0
 800da28:	b928      	cbnz	r0, 800da36 <_dtoa_r+0x9be>
 800da2a:	4b87      	ldr	r3, [pc, #540]	; (800dc48 <_dtoa_r+0xbd0>)
 800da2c:	4602      	mov	r2, r0
 800da2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800da32:	f7ff bb3b 	b.w	800d0ac <_dtoa_r+0x34>
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	3202      	adds	r2, #2
 800da3a:	0092      	lsls	r2, r2, #2
 800da3c:	f107 010c 	add.w	r1, r7, #12
 800da40:	300c      	adds	r0, #12
 800da42:	f7fd fd2b 	bl	800b49c <memcpy>
 800da46:	2201      	movs	r2, #1
 800da48:	4629      	mov	r1, r5
 800da4a:	4620      	mov	r0, r4
 800da4c:	f000 feec 	bl	800e828 <__lshift>
 800da50:	9b01      	ldr	r3, [sp, #4]
 800da52:	f103 0901 	add.w	r9, r3, #1
 800da56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800da5a:	4413      	add	r3, r2
 800da5c:	9305      	str	r3, [sp, #20]
 800da5e:	f00a 0301 	and.w	r3, sl, #1
 800da62:	46b8      	mov	r8, r7
 800da64:	9304      	str	r3, [sp, #16]
 800da66:	4607      	mov	r7, r0
 800da68:	4631      	mov	r1, r6
 800da6a:	ee18 0a10 	vmov	r0, s16
 800da6e:	f7ff fa77 	bl	800cf60 <quorem>
 800da72:	4641      	mov	r1, r8
 800da74:	9002      	str	r0, [sp, #8]
 800da76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da7a:	ee18 0a10 	vmov	r0, s16
 800da7e:	f000 ff43 	bl	800e908 <__mcmp>
 800da82:	463a      	mov	r2, r7
 800da84:	9003      	str	r0, [sp, #12]
 800da86:	4631      	mov	r1, r6
 800da88:	4620      	mov	r0, r4
 800da8a:	f000 ff59 	bl	800e940 <__mdiff>
 800da8e:	68c2      	ldr	r2, [r0, #12]
 800da90:	f109 3bff 	add.w	fp, r9, #4294967295
 800da94:	4605      	mov	r5, r0
 800da96:	bb02      	cbnz	r2, 800dada <_dtoa_r+0xa62>
 800da98:	4601      	mov	r1, r0
 800da9a:	ee18 0a10 	vmov	r0, s16
 800da9e:	f000 ff33 	bl	800e908 <__mcmp>
 800daa2:	4602      	mov	r2, r0
 800daa4:	4629      	mov	r1, r5
 800daa6:	4620      	mov	r0, r4
 800daa8:	9207      	str	r2, [sp, #28]
 800daaa:	f000 fca1 	bl	800e3f0 <_Bfree>
 800daae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dab2:	ea43 0102 	orr.w	r1, r3, r2
 800dab6:	9b04      	ldr	r3, [sp, #16]
 800dab8:	430b      	orrs	r3, r1
 800daba:	464d      	mov	r5, r9
 800dabc:	d10f      	bne.n	800dade <_dtoa_r+0xa66>
 800dabe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dac2:	d02a      	beq.n	800db1a <_dtoa_r+0xaa2>
 800dac4:	9b03      	ldr	r3, [sp, #12]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	dd02      	ble.n	800dad0 <_dtoa_r+0xa58>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dad0:	f88b a000 	strb.w	sl, [fp]
 800dad4:	e775      	b.n	800d9c2 <_dtoa_r+0x94a>
 800dad6:	4638      	mov	r0, r7
 800dad8:	e7ba      	b.n	800da50 <_dtoa_r+0x9d8>
 800dada:	2201      	movs	r2, #1
 800dadc:	e7e2      	b.n	800daa4 <_dtoa_r+0xa2c>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	db04      	blt.n	800daee <_dtoa_r+0xa76>
 800dae4:	9906      	ldr	r1, [sp, #24]
 800dae6:	430b      	orrs	r3, r1
 800dae8:	9904      	ldr	r1, [sp, #16]
 800daea:	430b      	orrs	r3, r1
 800daec:	d122      	bne.n	800db34 <_dtoa_r+0xabc>
 800daee:	2a00      	cmp	r2, #0
 800daf0:	ddee      	ble.n	800dad0 <_dtoa_r+0xa58>
 800daf2:	ee18 1a10 	vmov	r1, s16
 800daf6:	2201      	movs	r2, #1
 800daf8:	4620      	mov	r0, r4
 800dafa:	f000 fe95 	bl	800e828 <__lshift>
 800dafe:	4631      	mov	r1, r6
 800db00:	ee08 0a10 	vmov	s16, r0
 800db04:	f000 ff00 	bl	800e908 <__mcmp>
 800db08:	2800      	cmp	r0, #0
 800db0a:	dc03      	bgt.n	800db14 <_dtoa_r+0xa9c>
 800db0c:	d1e0      	bne.n	800dad0 <_dtoa_r+0xa58>
 800db0e:	f01a 0f01 	tst.w	sl, #1
 800db12:	d0dd      	beq.n	800dad0 <_dtoa_r+0xa58>
 800db14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db18:	d1d7      	bne.n	800daca <_dtoa_r+0xa52>
 800db1a:	2339      	movs	r3, #57	; 0x39
 800db1c:	f88b 3000 	strb.w	r3, [fp]
 800db20:	462b      	mov	r3, r5
 800db22:	461d      	mov	r5, r3
 800db24:	3b01      	subs	r3, #1
 800db26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800db2a:	2a39      	cmp	r2, #57	; 0x39
 800db2c:	d071      	beq.n	800dc12 <_dtoa_r+0xb9a>
 800db2e:	3201      	adds	r2, #1
 800db30:	701a      	strb	r2, [r3, #0]
 800db32:	e746      	b.n	800d9c2 <_dtoa_r+0x94a>
 800db34:	2a00      	cmp	r2, #0
 800db36:	dd07      	ble.n	800db48 <_dtoa_r+0xad0>
 800db38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800db3c:	d0ed      	beq.n	800db1a <_dtoa_r+0xaa2>
 800db3e:	f10a 0301 	add.w	r3, sl, #1
 800db42:	f88b 3000 	strb.w	r3, [fp]
 800db46:	e73c      	b.n	800d9c2 <_dtoa_r+0x94a>
 800db48:	9b05      	ldr	r3, [sp, #20]
 800db4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800db4e:	4599      	cmp	r9, r3
 800db50:	d047      	beq.n	800dbe2 <_dtoa_r+0xb6a>
 800db52:	ee18 1a10 	vmov	r1, s16
 800db56:	2300      	movs	r3, #0
 800db58:	220a      	movs	r2, #10
 800db5a:	4620      	mov	r0, r4
 800db5c:	f000 fc6a 	bl	800e434 <__multadd>
 800db60:	45b8      	cmp	r8, r7
 800db62:	ee08 0a10 	vmov	s16, r0
 800db66:	f04f 0300 	mov.w	r3, #0
 800db6a:	f04f 020a 	mov.w	r2, #10
 800db6e:	4641      	mov	r1, r8
 800db70:	4620      	mov	r0, r4
 800db72:	d106      	bne.n	800db82 <_dtoa_r+0xb0a>
 800db74:	f000 fc5e 	bl	800e434 <__multadd>
 800db78:	4680      	mov	r8, r0
 800db7a:	4607      	mov	r7, r0
 800db7c:	f109 0901 	add.w	r9, r9, #1
 800db80:	e772      	b.n	800da68 <_dtoa_r+0x9f0>
 800db82:	f000 fc57 	bl	800e434 <__multadd>
 800db86:	4639      	mov	r1, r7
 800db88:	4680      	mov	r8, r0
 800db8a:	2300      	movs	r3, #0
 800db8c:	220a      	movs	r2, #10
 800db8e:	4620      	mov	r0, r4
 800db90:	f000 fc50 	bl	800e434 <__multadd>
 800db94:	4607      	mov	r7, r0
 800db96:	e7f1      	b.n	800db7c <_dtoa_r+0xb04>
 800db98:	9b03      	ldr	r3, [sp, #12]
 800db9a:	9302      	str	r3, [sp, #8]
 800db9c:	9d01      	ldr	r5, [sp, #4]
 800db9e:	ee18 0a10 	vmov	r0, s16
 800dba2:	4631      	mov	r1, r6
 800dba4:	f7ff f9dc 	bl	800cf60 <quorem>
 800dba8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dbac:	9b01      	ldr	r3, [sp, #4]
 800dbae:	f805 ab01 	strb.w	sl, [r5], #1
 800dbb2:	1aea      	subs	r2, r5, r3
 800dbb4:	9b02      	ldr	r3, [sp, #8]
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	dd09      	ble.n	800dbce <_dtoa_r+0xb56>
 800dbba:	ee18 1a10 	vmov	r1, s16
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	220a      	movs	r2, #10
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 fc36 	bl	800e434 <__multadd>
 800dbc8:	ee08 0a10 	vmov	s16, r0
 800dbcc:	e7e7      	b.n	800db9e <_dtoa_r+0xb26>
 800dbce:	9b02      	ldr	r3, [sp, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	bfc8      	it	gt
 800dbd4:	461d      	movgt	r5, r3
 800dbd6:	9b01      	ldr	r3, [sp, #4]
 800dbd8:	bfd8      	it	le
 800dbda:	2501      	movle	r5, #1
 800dbdc:	441d      	add	r5, r3
 800dbde:	f04f 0800 	mov.w	r8, #0
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 fe1d 	bl	800e828 <__lshift>
 800dbee:	4631      	mov	r1, r6
 800dbf0:	ee08 0a10 	vmov	s16, r0
 800dbf4:	f000 fe88 	bl	800e908 <__mcmp>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	dc91      	bgt.n	800db20 <_dtoa_r+0xaa8>
 800dbfc:	d102      	bne.n	800dc04 <_dtoa_r+0xb8c>
 800dbfe:	f01a 0f01 	tst.w	sl, #1
 800dc02:	d18d      	bne.n	800db20 <_dtoa_r+0xaa8>
 800dc04:	462b      	mov	r3, r5
 800dc06:	461d      	mov	r5, r3
 800dc08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc0c:	2a30      	cmp	r2, #48	; 0x30
 800dc0e:	d0fa      	beq.n	800dc06 <_dtoa_r+0xb8e>
 800dc10:	e6d7      	b.n	800d9c2 <_dtoa_r+0x94a>
 800dc12:	9a01      	ldr	r2, [sp, #4]
 800dc14:	429a      	cmp	r2, r3
 800dc16:	d184      	bne.n	800db22 <_dtoa_r+0xaaa>
 800dc18:	9b00      	ldr	r3, [sp, #0]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	9300      	str	r3, [sp, #0]
 800dc1e:	2331      	movs	r3, #49	; 0x31
 800dc20:	7013      	strb	r3, [r2, #0]
 800dc22:	e6ce      	b.n	800d9c2 <_dtoa_r+0x94a>
 800dc24:	4b09      	ldr	r3, [pc, #36]	; (800dc4c <_dtoa_r+0xbd4>)
 800dc26:	f7ff ba95 	b.w	800d154 <_dtoa_r+0xdc>
 800dc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f47f aa6e 	bne.w	800d10e <_dtoa_r+0x96>
 800dc32:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <_dtoa_r+0xbd8>)
 800dc34:	f7ff ba8e 	b.w	800d154 <_dtoa_r+0xdc>
 800dc38:	9b02      	ldr	r3, [sp, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	dcae      	bgt.n	800db9c <_dtoa_r+0xb24>
 800dc3e:	9b06      	ldr	r3, [sp, #24]
 800dc40:	2b02      	cmp	r3, #2
 800dc42:	f73f aea8 	bgt.w	800d996 <_dtoa_r+0x91e>
 800dc46:	e7a9      	b.n	800db9c <_dtoa_r+0xb24>
 800dc48:	08010270 	.word	0x08010270
 800dc4c:	08010074 	.word	0x08010074
 800dc50:	080101f1 	.word	0x080101f1

0800dc54 <rshift>:
 800dc54:	6903      	ldr	r3, [r0, #16]
 800dc56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc62:	f100 0414 	add.w	r4, r0, #20
 800dc66:	dd45      	ble.n	800dcf4 <rshift+0xa0>
 800dc68:	f011 011f 	ands.w	r1, r1, #31
 800dc6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc74:	d10c      	bne.n	800dc90 <rshift+0x3c>
 800dc76:	f100 0710 	add.w	r7, r0, #16
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	42b1      	cmp	r1, r6
 800dc7e:	d334      	bcc.n	800dcea <rshift+0x96>
 800dc80:	1a9b      	subs	r3, r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	1eea      	subs	r2, r5, #3
 800dc86:	4296      	cmp	r6, r2
 800dc88:	bf38      	it	cc
 800dc8a:	2300      	movcc	r3, #0
 800dc8c:	4423      	add	r3, r4
 800dc8e:	e015      	b.n	800dcbc <rshift+0x68>
 800dc90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc94:	f1c1 0820 	rsb	r8, r1, #32
 800dc98:	40cf      	lsrs	r7, r1
 800dc9a:	f105 0e04 	add.w	lr, r5, #4
 800dc9e:	46a1      	mov	r9, r4
 800dca0:	4576      	cmp	r6, lr
 800dca2:	46f4      	mov	ip, lr
 800dca4:	d815      	bhi.n	800dcd2 <rshift+0x7e>
 800dca6:	1a9a      	subs	r2, r3, r2
 800dca8:	0092      	lsls	r2, r2, #2
 800dcaa:	3a04      	subs	r2, #4
 800dcac:	3501      	adds	r5, #1
 800dcae:	42ae      	cmp	r6, r5
 800dcb0:	bf38      	it	cc
 800dcb2:	2200      	movcc	r2, #0
 800dcb4:	18a3      	adds	r3, r4, r2
 800dcb6:	50a7      	str	r7, [r4, r2]
 800dcb8:	b107      	cbz	r7, 800dcbc <rshift+0x68>
 800dcba:	3304      	adds	r3, #4
 800dcbc:	1b1a      	subs	r2, r3, r4
 800dcbe:	42a3      	cmp	r3, r4
 800dcc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dcc4:	bf08      	it	eq
 800dcc6:	2300      	moveq	r3, #0
 800dcc8:	6102      	str	r2, [r0, #16]
 800dcca:	bf08      	it	eq
 800dccc:	6143      	streq	r3, [r0, #20]
 800dcce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcd2:	f8dc c000 	ldr.w	ip, [ip]
 800dcd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcda:	ea4c 0707 	orr.w	r7, ip, r7
 800dcde:	f849 7b04 	str.w	r7, [r9], #4
 800dce2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dce6:	40cf      	lsrs	r7, r1
 800dce8:	e7da      	b.n	800dca0 <rshift+0x4c>
 800dcea:	f851 cb04 	ldr.w	ip, [r1], #4
 800dcee:	f847 cf04 	str.w	ip, [r7, #4]!
 800dcf2:	e7c3      	b.n	800dc7c <rshift+0x28>
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	e7e1      	b.n	800dcbc <rshift+0x68>

0800dcf8 <__hexdig_fun>:
 800dcf8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dcfc:	2b09      	cmp	r3, #9
 800dcfe:	d802      	bhi.n	800dd06 <__hexdig_fun+0xe>
 800dd00:	3820      	subs	r0, #32
 800dd02:	b2c0      	uxtb	r0, r0
 800dd04:	4770      	bx	lr
 800dd06:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd0a:	2b05      	cmp	r3, #5
 800dd0c:	d801      	bhi.n	800dd12 <__hexdig_fun+0x1a>
 800dd0e:	3847      	subs	r0, #71	; 0x47
 800dd10:	e7f7      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd12:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd16:	2b05      	cmp	r3, #5
 800dd18:	d801      	bhi.n	800dd1e <__hexdig_fun+0x26>
 800dd1a:	3827      	subs	r0, #39	; 0x27
 800dd1c:	e7f1      	b.n	800dd02 <__hexdig_fun+0xa>
 800dd1e:	2000      	movs	r0, #0
 800dd20:	4770      	bx	lr
	...

0800dd24 <__gethex>:
 800dd24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd28:	ed2d 8b02 	vpush	{d8}
 800dd2c:	b089      	sub	sp, #36	; 0x24
 800dd2e:	ee08 0a10 	vmov	s16, r0
 800dd32:	9304      	str	r3, [sp, #16]
 800dd34:	4bb4      	ldr	r3, [pc, #720]	; (800e008 <__gethex+0x2e4>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	468b      	mov	fp, r1
 800dd3e:	4690      	mov	r8, r2
 800dd40:	f7f2 fa4e 	bl	80001e0 <strlen>
 800dd44:	9b01      	ldr	r3, [sp, #4]
 800dd46:	f8db 2000 	ldr.w	r2, [fp]
 800dd4a:	4403      	add	r3, r0
 800dd4c:	4682      	mov	sl, r0
 800dd4e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dd52:	9305      	str	r3, [sp, #20]
 800dd54:	1c93      	adds	r3, r2, #2
 800dd56:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dd5a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd5e:	32fe      	adds	r2, #254	; 0xfe
 800dd60:	18d1      	adds	r1, r2, r3
 800dd62:	461f      	mov	r7, r3
 800dd64:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd68:	9100      	str	r1, [sp, #0]
 800dd6a:	2830      	cmp	r0, #48	; 0x30
 800dd6c:	d0f8      	beq.n	800dd60 <__gethex+0x3c>
 800dd6e:	f7ff ffc3 	bl	800dcf8 <__hexdig_fun>
 800dd72:	4604      	mov	r4, r0
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d13a      	bne.n	800ddee <__gethex+0xca>
 800dd78:	9901      	ldr	r1, [sp, #4]
 800dd7a:	4652      	mov	r2, sl
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	f001 fa23 	bl	800f1c8 <strncmp>
 800dd82:	4605      	mov	r5, r0
 800dd84:	2800      	cmp	r0, #0
 800dd86:	d168      	bne.n	800de5a <__gethex+0x136>
 800dd88:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dd8c:	eb07 060a 	add.w	r6, r7, sl
 800dd90:	f7ff ffb2 	bl	800dcf8 <__hexdig_fun>
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d062      	beq.n	800de5e <__gethex+0x13a>
 800dd98:	4633      	mov	r3, r6
 800dd9a:	7818      	ldrb	r0, [r3, #0]
 800dd9c:	2830      	cmp	r0, #48	; 0x30
 800dd9e:	461f      	mov	r7, r3
 800dda0:	f103 0301 	add.w	r3, r3, #1
 800dda4:	d0f9      	beq.n	800dd9a <__gethex+0x76>
 800dda6:	f7ff ffa7 	bl	800dcf8 <__hexdig_fun>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	fab0 f480 	clz	r4, r0
 800ddb0:	0964      	lsrs	r4, r4, #5
 800ddb2:	4635      	mov	r5, r6
 800ddb4:	9300      	str	r3, [sp, #0]
 800ddb6:	463a      	mov	r2, r7
 800ddb8:	4616      	mov	r6, r2
 800ddba:	3201      	adds	r2, #1
 800ddbc:	7830      	ldrb	r0, [r6, #0]
 800ddbe:	f7ff ff9b 	bl	800dcf8 <__hexdig_fun>
 800ddc2:	2800      	cmp	r0, #0
 800ddc4:	d1f8      	bne.n	800ddb8 <__gethex+0x94>
 800ddc6:	9901      	ldr	r1, [sp, #4]
 800ddc8:	4652      	mov	r2, sl
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f001 f9fc 	bl	800f1c8 <strncmp>
 800ddd0:	b980      	cbnz	r0, 800ddf4 <__gethex+0xd0>
 800ddd2:	b94d      	cbnz	r5, 800dde8 <__gethex+0xc4>
 800ddd4:	eb06 050a 	add.w	r5, r6, sl
 800ddd8:	462a      	mov	r2, r5
 800ddda:	4616      	mov	r6, r2
 800dddc:	3201      	adds	r2, #1
 800ddde:	7830      	ldrb	r0, [r6, #0]
 800dde0:	f7ff ff8a 	bl	800dcf8 <__hexdig_fun>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d1f8      	bne.n	800ddda <__gethex+0xb6>
 800dde8:	1bad      	subs	r5, r5, r6
 800ddea:	00ad      	lsls	r5, r5, #2
 800ddec:	e004      	b.n	800ddf8 <__gethex+0xd4>
 800ddee:	2400      	movs	r4, #0
 800ddf0:	4625      	mov	r5, r4
 800ddf2:	e7e0      	b.n	800ddb6 <__gethex+0x92>
 800ddf4:	2d00      	cmp	r5, #0
 800ddf6:	d1f7      	bne.n	800dde8 <__gethex+0xc4>
 800ddf8:	7833      	ldrb	r3, [r6, #0]
 800ddfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ddfe:	2b50      	cmp	r3, #80	; 0x50
 800de00:	d13b      	bne.n	800de7a <__gethex+0x156>
 800de02:	7873      	ldrb	r3, [r6, #1]
 800de04:	2b2b      	cmp	r3, #43	; 0x2b
 800de06:	d02c      	beq.n	800de62 <__gethex+0x13e>
 800de08:	2b2d      	cmp	r3, #45	; 0x2d
 800de0a:	d02e      	beq.n	800de6a <__gethex+0x146>
 800de0c:	1c71      	adds	r1, r6, #1
 800de0e:	f04f 0900 	mov.w	r9, #0
 800de12:	7808      	ldrb	r0, [r1, #0]
 800de14:	f7ff ff70 	bl	800dcf8 <__hexdig_fun>
 800de18:	1e43      	subs	r3, r0, #1
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	2b18      	cmp	r3, #24
 800de1e:	d82c      	bhi.n	800de7a <__gethex+0x156>
 800de20:	f1a0 0210 	sub.w	r2, r0, #16
 800de24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de28:	f7ff ff66 	bl	800dcf8 <__hexdig_fun>
 800de2c:	1e43      	subs	r3, r0, #1
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2b18      	cmp	r3, #24
 800de32:	d91d      	bls.n	800de70 <__gethex+0x14c>
 800de34:	f1b9 0f00 	cmp.w	r9, #0
 800de38:	d000      	beq.n	800de3c <__gethex+0x118>
 800de3a:	4252      	negs	r2, r2
 800de3c:	4415      	add	r5, r2
 800de3e:	f8cb 1000 	str.w	r1, [fp]
 800de42:	b1e4      	cbz	r4, 800de7e <__gethex+0x15a>
 800de44:	9b00      	ldr	r3, [sp, #0]
 800de46:	2b00      	cmp	r3, #0
 800de48:	bf14      	ite	ne
 800de4a:	2700      	movne	r7, #0
 800de4c:	2706      	moveq	r7, #6
 800de4e:	4638      	mov	r0, r7
 800de50:	b009      	add	sp, #36	; 0x24
 800de52:	ecbd 8b02 	vpop	{d8}
 800de56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5a:	463e      	mov	r6, r7
 800de5c:	4625      	mov	r5, r4
 800de5e:	2401      	movs	r4, #1
 800de60:	e7ca      	b.n	800ddf8 <__gethex+0xd4>
 800de62:	f04f 0900 	mov.w	r9, #0
 800de66:	1cb1      	adds	r1, r6, #2
 800de68:	e7d3      	b.n	800de12 <__gethex+0xee>
 800de6a:	f04f 0901 	mov.w	r9, #1
 800de6e:	e7fa      	b.n	800de66 <__gethex+0x142>
 800de70:	230a      	movs	r3, #10
 800de72:	fb03 0202 	mla	r2, r3, r2, r0
 800de76:	3a10      	subs	r2, #16
 800de78:	e7d4      	b.n	800de24 <__gethex+0x100>
 800de7a:	4631      	mov	r1, r6
 800de7c:	e7df      	b.n	800de3e <__gethex+0x11a>
 800de7e:	1bf3      	subs	r3, r6, r7
 800de80:	3b01      	subs	r3, #1
 800de82:	4621      	mov	r1, r4
 800de84:	2b07      	cmp	r3, #7
 800de86:	dc0b      	bgt.n	800dea0 <__gethex+0x17c>
 800de88:	ee18 0a10 	vmov	r0, s16
 800de8c:	f000 fa70 	bl	800e370 <_Balloc>
 800de90:	4604      	mov	r4, r0
 800de92:	b940      	cbnz	r0, 800dea6 <__gethex+0x182>
 800de94:	4b5d      	ldr	r3, [pc, #372]	; (800e00c <__gethex+0x2e8>)
 800de96:	4602      	mov	r2, r0
 800de98:	21de      	movs	r1, #222	; 0xde
 800de9a:	485d      	ldr	r0, [pc, #372]	; (800e010 <__gethex+0x2ec>)
 800de9c:	f001 f9b6 	bl	800f20c <__assert_func>
 800dea0:	3101      	adds	r1, #1
 800dea2:	105b      	asrs	r3, r3, #1
 800dea4:	e7ee      	b.n	800de84 <__gethex+0x160>
 800dea6:	f100 0914 	add.w	r9, r0, #20
 800deaa:	f04f 0b00 	mov.w	fp, #0
 800deae:	f1ca 0301 	rsb	r3, sl, #1
 800deb2:	f8cd 9008 	str.w	r9, [sp, #8]
 800deb6:	f8cd b000 	str.w	fp, [sp]
 800deba:	9306      	str	r3, [sp, #24]
 800debc:	42b7      	cmp	r7, r6
 800debe:	d340      	bcc.n	800df42 <__gethex+0x21e>
 800dec0:	9802      	ldr	r0, [sp, #8]
 800dec2:	9b00      	ldr	r3, [sp, #0]
 800dec4:	f840 3b04 	str.w	r3, [r0], #4
 800dec8:	eba0 0009 	sub.w	r0, r0, r9
 800decc:	1080      	asrs	r0, r0, #2
 800dece:	0146      	lsls	r6, r0, #5
 800ded0:	6120      	str	r0, [r4, #16]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 fb3e 	bl	800e554 <__hi0bits>
 800ded8:	1a30      	subs	r0, r6, r0
 800deda:	f8d8 6000 	ldr.w	r6, [r8]
 800dede:	42b0      	cmp	r0, r6
 800dee0:	dd63      	ble.n	800dfaa <__gethex+0x286>
 800dee2:	1b87      	subs	r7, r0, r6
 800dee4:	4639      	mov	r1, r7
 800dee6:	4620      	mov	r0, r4
 800dee8:	f000 fee2 	bl	800ecb0 <__any_on>
 800deec:	4682      	mov	sl, r0
 800deee:	b1a8      	cbz	r0, 800df1c <__gethex+0x1f8>
 800def0:	1e7b      	subs	r3, r7, #1
 800def2:	1159      	asrs	r1, r3, #5
 800def4:	f003 021f 	and.w	r2, r3, #31
 800def8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800defc:	f04f 0a01 	mov.w	sl, #1
 800df00:	fa0a f202 	lsl.w	r2, sl, r2
 800df04:	420a      	tst	r2, r1
 800df06:	d009      	beq.n	800df1c <__gethex+0x1f8>
 800df08:	4553      	cmp	r3, sl
 800df0a:	dd05      	ble.n	800df18 <__gethex+0x1f4>
 800df0c:	1eb9      	subs	r1, r7, #2
 800df0e:	4620      	mov	r0, r4
 800df10:	f000 fece 	bl	800ecb0 <__any_on>
 800df14:	2800      	cmp	r0, #0
 800df16:	d145      	bne.n	800dfa4 <__gethex+0x280>
 800df18:	f04f 0a02 	mov.w	sl, #2
 800df1c:	4639      	mov	r1, r7
 800df1e:	4620      	mov	r0, r4
 800df20:	f7ff fe98 	bl	800dc54 <rshift>
 800df24:	443d      	add	r5, r7
 800df26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df2a:	42ab      	cmp	r3, r5
 800df2c:	da4c      	bge.n	800dfc8 <__gethex+0x2a4>
 800df2e:	ee18 0a10 	vmov	r0, s16
 800df32:	4621      	mov	r1, r4
 800df34:	f000 fa5c 	bl	800e3f0 <_Bfree>
 800df38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df3a:	2300      	movs	r3, #0
 800df3c:	6013      	str	r3, [r2, #0]
 800df3e:	27a3      	movs	r7, #163	; 0xa3
 800df40:	e785      	b.n	800de4e <__gethex+0x12a>
 800df42:	1e73      	subs	r3, r6, #1
 800df44:	9a05      	ldr	r2, [sp, #20]
 800df46:	9303      	str	r3, [sp, #12]
 800df48:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d019      	beq.n	800df84 <__gethex+0x260>
 800df50:	f1bb 0f20 	cmp.w	fp, #32
 800df54:	d107      	bne.n	800df66 <__gethex+0x242>
 800df56:	9b02      	ldr	r3, [sp, #8]
 800df58:	9a00      	ldr	r2, [sp, #0]
 800df5a:	f843 2b04 	str.w	r2, [r3], #4
 800df5e:	9302      	str	r3, [sp, #8]
 800df60:	2300      	movs	r3, #0
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	469b      	mov	fp, r3
 800df66:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df6a:	f7ff fec5 	bl	800dcf8 <__hexdig_fun>
 800df6e:	9b00      	ldr	r3, [sp, #0]
 800df70:	f000 000f 	and.w	r0, r0, #15
 800df74:	fa00 f00b 	lsl.w	r0, r0, fp
 800df78:	4303      	orrs	r3, r0
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	f10b 0b04 	add.w	fp, fp, #4
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	e00d      	b.n	800dfa0 <__gethex+0x27c>
 800df84:	9b03      	ldr	r3, [sp, #12]
 800df86:	9a06      	ldr	r2, [sp, #24]
 800df88:	4413      	add	r3, r2
 800df8a:	42bb      	cmp	r3, r7
 800df8c:	d3e0      	bcc.n	800df50 <__gethex+0x22c>
 800df8e:	4618      	mov	r0, r3
 800df90:	9901      	ldr	r1, [sp, #4]
 800df92:	9307      	str	r3, [sp, #28]
 800df94:	4652      	mov	r2, sl
 800df96:	f001 f917 	bl	800f1c8 <strncmp>
 800df9a:	9b07      	ldr	r3, [sp, #28]
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d1d7      	bne.n	800df50 <__gethex+0x22c>
 800dfa0:	461e      	mov	r6, r3
 800dfa2:	e78b      	b.n	800debc <__gethex+0x198>
 800dfa4:	f04f 0a03 	mov.w	sl, #3
 800dfa8:	e7b8      	b.n	800df1c <__gethex+0x1f8>
 800dfaa:	da0a      	bge.n	800dfc2 <__gethex+0x29e>
 800dfac:	1a37      	subs	r7, r6, r0
 800dfae:	4621      	mov	r1, r4
 800dfb0:	ee18 0a10 	vmov	r0, s16
 800dfb4:	463a      	mov	r2, r7
 800dfb6:	f000 fc37 	bl	800e828 <__lshift>
 800dfba:	1bed      	subs	r5, r5, r7
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	f100 0914 	add.w	r9, r0, #20
 800dfc2:	f04f 0a00 	mov.w	sl, #0
 800dfc6:	e7ae      	b.n	800df26 <__gethex+0x202>
 800dfc8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dfcc:	42a8      	cmp	r0, r5
 800dfce:	dd72      	ble.n	800e0b6 <__gethex+0x392>
 800dfd0:	1b45      	subs	r5, r0, r5
 800dfd2:	42ae      	cmp	r6, r5
 800dfd4:	dc36      	bgt.n	800e044 <__gethex+0x320>
 800dfd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dfda:	2b02      	cmp	r3, #2
 800dfdc:	d02a      	beq.n	800e034 <__gethex+0x310>
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d02c      	beq.n	800e03c <__gethex+0x318>
 800dfe2:	2b01      	cmp	r3, #1
 800dfe4:	d11c      	bne.n	800e020 <__gethex+0x2fc>
 800dfe6:	42ae      	cmp	r6, r5
 800dfe8:	d11a      	bne.n	800e020 <__gethex+0x2fc>
 800dfea:	2e01      	cmp	r6, #1
 800dfec:	d112      	bne.n	800e014 <__gethex+0x2f0>
 800dfee:	9a04      	ldr	r2, [sp, #16]
 800dff0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	2301      	movs	r3, #1
 800dff8:	6123      	str	r3, [r4, #16]
 800dffa:	f8c9 3000 	str.w	r3, [r9]
 800dffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e000:	2762      	movs	r7, #98	; 0x62
 800e002:	601c      	str	r4, [r3, #0]
 800e004:	e723      	b.n	800de4e <__gethex+0x12a>
 800e006:	bf00      	nop
 800e008:	080102e8 	.word	0x080102e8
 800e00c:	08010270 	.word	0x08010270
 800e010:	08010281 	.word	0x08010281
 800e014:	1e71      	subs	r1, r6, #1
 800e016:	4620      	mov	r0, r4
 800e018:	f000 fe4a 	bl	800ecb0 <__any_on>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d1e6      	bne.n	800dfee <__gethex+0x2ca>
 800e020:	ee18 0a10 	vmov	r0, s16
 800e024:	4621      	mov	r1, r4
 800e026:	f000 f9e3 	bl	800e3f0 <_Bfree>
 800e02a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e02c:	2300      	movs	r3, #0
 800e02e:	6013      	str	r3, [r2, #0]
 800e030:	2750      	movs	r7, #80	; 0x50
 800e032:	e70c      	b.n	800de4e <__gethex+0x12a>
 800e034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1f2      	bne.n	800e020 <__gethex+0x2fc>
 800e03a:	e7d8      	b.n	800dfee <__gethex+0x2ca>
 800e03c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1d5      	bne.n	800dfee <__gethex+0x2ca>
 800e042:	e7ed      	b.n	800e020 <__gethex+0x2fc>
 800e044:	1e6f      	subs	r7, r5, #1
 800e046:	f1ba 0f00 	cmp.w	sl, #0
 800e04a:	d131      	bne.n	800e0b0 <__gethex+0x38c>
 800e04c:	b127      	cbz	r7, 800e058 <__gethex+0x334>
 800e04e:	4639      	mov	r1, r7
 800e050:	4620      	mov	r0, r4
 800e052:	f000 fe2d 	bl	800ecb0 <__any_on>
 800e056:	4682      	mov	sl, r0
 800e058:	117b      	asrs	r3, r7, #5
 800e05a:	2101      	movs	r1, #1
 800e05c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e060:	f007 071f 	and.w	r7, r7, #31
 800e064:	fa01 f707 	lsl.w	r7, r1, r7
 800e068:	421f      	tst	r7, r3
 800e06a:	4629      	mov	r1, r5
 800e06c:	4620      	mov	r0, r4
 800e06e:	bf18      	it	ne
 800e070:	f04a 0a02 	orrne.w	sl, sl, #2
 800e074:	1b76      	subs	r6, r6, r5
 800e076:	f7ff fded 	bl	800dc54 <rshift>
 800e07a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e07e:	2702      	movs	r7, #2
 800e080:	f1ba 0f00 	cmp.w	sl, #0
 800e084:	d048      	beq.n	800e118 <__gethex+0x3f4>
 800e086:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e08a:	2b02      	cmp	r3, #2
 800e08c:	d015      	beq.n	800e0ba <__gethex+0x396>
 800e08e:	2b03      	cmp	r3, #3
 800e090:	d017      	beq.n	800e0c2 <__gethex+0x39e>
 800e092:	2b01      	cmp	r3, #1
 800e094:	d109      	bne.n	800e0aa <__gethex+0x386>
 800e096:	f01a 0f02 	tst.w	sl, #2
 800e09a:	d006      	beq.n	800e0aa <__gethex+0x386>
 800e09c:	f8d9 0000 	ldr.w	r0, [r9]
 800e0a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800e0a4:	f01a 0f01 	tst.w	sl, #1
 800e0a8:	d10e      	bne.n	800e0c8 <__gethex+0x3a4>
 800e0aa:	f047 0710 	orr.w	r7, r7, #16
 800e0ae:	e033      	b.n	800e118 <__gethex+0x3f4>
 800e0b0:	f04f 0a01 	mov.w	sl, #1
 800e0b4:	e7d0      	b.n	800e058 <__gethex+0x334>
 800e0b6:	2701      	movs	r7, #1
 800e0b8:	e7e2      	b.n	800e080 <__gethex+0x35c>
 800e0ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0bc:	f1c3 0301 	rsb	r3, r3, #1
 800e0c0:	9315      	str	r3, [sp, #84]	; 0x54
 800e0c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d0f0      	beq.n	800e0aa <__gethex+0x386>
 800e0c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e0cc:	f104 0314 	add.w	r3, r4, #20
 800e0d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e0d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e0d8:	f04f 0c00 	mov.w	ip, #0
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e0e6:	d01c      	beq.n	800e122 <__gethex+0x3fe>
 800e0e8:	3201      	adds	r2, #1
 800e0ea:	6002      	str	r2, [r0, #0]
 800e0ec:	2f02      	cmp	r7, #2
 800e0ee:	f104 0314 	add.w	r3, r4, #20
 800e0f2:	d13f      	bne.n	800e174 <__gethex+0x450>
 800e0f4:	f8d8 2000 	ldr.w	r2, [r8]
 800e0f8:	3a01      	subs	r2, #1
 800e0fa:	42b2      	cmp	r2, r6
 800e0fc:	d10a      	bne.n	800e114 <__gethex+0x3f0>
 800e0fe:	1171      	asrs	r1, r6, #5
 800e100:	2201      	movs	r2, #1
 800e102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e106:	f006 061f 	and.w	r6, r6, #31
 800e10a:	fa02 f606 	lsl.w	r6, r2, r6
 800e10e:	421e      	tst	r6, r3
 800e110:	bf18      	it	ne
 800e112:	4617      	movne	r7, r2
 800e114:	f047 0720 	orr.w	r7, r7, #32
 800e118:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e11a:	601c      	str	r4, [r3, #0]
 800e11c:	9b04      	ldr	r3, [sp, #16]
 800e11e:	601d      	str	r5, [r3, #0]
 800e120:	e695      	b.n	800de4e <__gethex+0x12a>
 800e122:	4299      	cmp	r1, r3
 800e124:	f843 cc04 	str.w	ip, [r3, #-4]
 800e128:	d8d8      	bhi.n	800e0dc <__gethex+0x3b8>
 800e12a:	68a3      	ldr	r3, [r4, #8]
 800e12c:	459b      	cmp	fp, r3
 800e12e:	db19      	blt.n	800e164 <__gethex+0x440>
 800e130:	6861      	ldr	r1, [r4, #4]
 800e132:	ee18 0a10 	vmov	r0, s16
 800e136:	3101      	adds	r1, #1
 800e138:	f000 f91a 	bl	800e370 <_Balloc>
 800e13c:	4681      	mov	r9, r0
 800e13e:	b918      	cbnz	r0, 800e148 <__gethex+0x424>
 800e140:	4b1a      	ldr	r3, [pc, #104]	; (800e1ac <__gethex+0x488>)
 800e142:	4602      	mov	r2, r0
 800e144:	2184      	movs	r1, #132	; 0x84
 800e146:	e6a8      	b.n	800de9a <__gethex+0x176>
 800e148:	6922      	ldr	r2, [r4, #16]
 800e14a:	3202      	adds	r2, #2
 800e14c:	f104 010c 	add.w	r1, r4, #12
 800e150:	0092      	lsls	r2, r2, #2
 800e152:	300c      	adds	r0, #12
 800e154:	f7fd f9a2 	bl	800b49c <memcpy>
 800e158:	4621      	mov	r1, r4
 800e15a:	ee18 0a10 	vmov	r0, s16
 800e15e:	f000 f947 	bl	800e3f0 <_Bfree>
 800e162:	464c      	mov	r4, r9
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	1c5a      	adds	r2, r3, #1
 800e168:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e16c:	6122      	str	r2, [r4, #16]
 800e16e:	2201      	movs	r2, #1
 800e170:	615a      	str	r2, [r3, #20]
 800e172:	e7bb      	b.n	800e0ec <__gethex+0x3c8>
 800e174:	6922      	ldr	r2, [r4, #16]
 800e176:	455a      	cmp	r2, fp
 800e178:	dd0b      	ble.n	800e192 <__gethex+0x46e>
 800e17a:	2101      	movs	r1, #1
 800e17c:	4620      	mov	r0, r4
 800e17e:	f7ff fd69 	bl	800dc54 <rshift>
 800e182:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e186:	3501      	adds	r5, #1
 800e188:	42ab      	cmp	r3, r5
 800e18a:	f6ff aed0 	blt.w	800df2e <__gethex+0x20a>
 800e18e:	2701      	movs	r7, #1
 800e190:	e7c0      	b.n	800e114 <__gethex+0x3f0>
 800e192:	f016 061f 	ands.w	r6, r6, #31
 800e196:	d0fa      	beq.n	800e18e <__gethex+0x46a>
 800e198:	4453      	add	r3, sl
 800e19a:	f1c6 0620 	rsb	r6, r6, #32
 800e19e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e1a2:	f000 f9d7 	bl	800e554 <__hi0bits>
 800e1a6:	42b0      	cmp	r0, r6
 800e1a8:	dbe7      	blt.n	800e17a <__gethex+0x456>
 800e1aa:	e7f0      	b.n	800e18e <__gethex+0x46a>
 800e1ac:	08010270 	.word	0x08010270

0800e1b0 <L_shift>:
 800e1b0:	f1c2 0208 	rsb	r2, r2, #8
 800e1b4:	0092      	lsls	r2, r2, #2
 800e1b6:	b570      	push	{r4, r5, r6, lr}
 800e1b8:	f1c2 0620 	rsb	r6, r2, #32
 800e1bc:	6843      	ldr	r3, [r0, #4]
 800e1be:	6804      	ldr	r4, [r0, #0]
 800e1c0:	fa03 f506 	lsl.w	r5, r3, r6
 800e1c4:	432c      	orrs	r4, r5
 800e1c6:	40d3      	lsrs	r3, r2
 800e1c8:	6004      	str	r4, [r0, #0]
 800e1ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1ce:	4288      	cmp	r0, r1
 800e1d0:	d3f4      	bcc.n	800e1bc <L_shift+0xc>
 800e1d2:	bd70      	pop	{r4, r5, r6, pc}

0800e1d4 <__match>:
 800e1d4:	b530      	push	{r4, r5, lr}
 800e1d6:	6803      	ldr	r3, [r0, #0]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1de:	b914      	cbnz	r4, 800e1e6 <__match+0x12>
 800e1e0:	6003      	str	r3, [r0, #0]
 800e1e2:	2001      	movs	r0, #1
 800e1e4:	bd30      	pop	{r4, r5, pc}
 800e1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e1ee:	2d19      	cmp	r5, #25
 800e1f0:	bf98      	it	ls
 800e1f2:	3220      	addls	r2, #32
 800e1f4:	42a2      	cmp	r2, r4
 800e1f6:	d0f0      	beq.n	800e1da <__match+0x6>
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e7f3      	b.n	800e1e4 <__match+0x10>

0800e1fc <__hexnan>:
 800e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e200:	680b      	ldr	r3, [r1, #0]
 800e202:	115e      	asrs	r6, r3, #5
 800e204:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e208:	f013 031f 	ands.w	r3, r3, #31
 800e20c:	b087      	sub	sp, #28
 800e20e:	bf18      	it	ne
 800e210:	3604      	addne	r6, #4
 800e212:	2500      	movs	r5, #0
 800e214:	1f37      	subs	r7, r6, #4
 800e216:	4690      	mov	r8, r2
 800e218:	6802      	ldr	r2, [r0, #0]
 800e21a:	9301      	str	r3, [sp, #4]
 800e21c:	4682      	mov	sl, r0
 800e21e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e222:	46b9      	mov	r9, r7
 800e224:	463c      	mov	r4, r7
 800e226:	9502      	str	r5, [sp, #8]
 800e228:	46ab      	mov	fp, r5
 800e22a:	7851      	ldrb	r1, [r2, #1]
 800e22c:	1c53      	adds	r3, r2, #1
 800e22e:	9303      	str	r3, [sp, #12]
 800e230:	b341      	cbz	r1, 800e284 <__hexnan+0x88>
 800e232:	4608      	mov	r0, r1
 800e234:	9205      	str	r2, [sp, #20]
 800e236:	9104      	str	r1, [sp, #16]
 800e238:	f7ff fd5e 	bl	800dcf8 <__hexdig_fun>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d14f      	bne.n	800e2e0 <__hexnan+0xe4>
 800e240:	9904      	ldr	r1, [sp, #16]
 800e242:	9a05      	ldr	r2, [sp, #20]
 800e244:	2920      	cmp	r1, #32
 800e246:	d818      	bhi.n	800e27a <__hexnan+0x7e>
 800e248:	9b02      	ldr	r3, [sp, #8]
 800e24a:	459b      	cmp	fp, r3
 800e24c:	dd13      	ble.n	800e276 <__hexnan+0x7a>
 800e24e:	454c      	cmp	r4, r9
 800e250:	d206      	bcs.n	800e260 <__hexnan+0x64>
 800e252:	2d07      	cmp	r5, #7
 800e254:	dc04      	bgt.n	800e260 <__hexnan+0x64>
 800e256:	462a      	mov	r2, r5
 800e258:	4649      	mov	r1, r9
 800e25a:	4620      	mov	r0, r4
 800e25c:	f7ff ffa8 	bl	800e1b0 <L_shift>
 800e260:	4544      	cmp	r4, r8
 800e262:	d950      	bls.n	800e306 <__hexnan+0x10a>
 800e264:	2300      	movs	r3, #0
 800e266:	f1a4 0904 	sub.w	r9, r4, #4
 800e26a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e26e:	f8cd b008 	str.w	fp, [sp, #8]
 800e272:	464c      	mov	r4, r9
 800e274:	461d      	mov	r5, r3
 800e276:	9a03      	ldr	r2, [sp, #12]
 800e278:	e7d7      	b.n	800e22a <__hexnan+0x2e>
 800e27a:	2929      	cmp	r1, #41	; 0x29
 800e27c:	d156      	bne.n	800e32c <__hexnan+0x130>
 800e27e:	3202      	adds	r2, #2
 800e280:	f8ca 2000 	str.w	r2, [sl]
 800e284:	f1bb 0f00 	cmp.w	fp, #0
 800e288:	d050      	beq.n	800e32c <__hexnan+0x130>
 800e28a:	454c      	cmp	r4, r9
 800e28c:	d206      	bcs.n	800e29c <__hexnan+0xa0>
 800e28e:	2d07      	cmp	r5, #7
 800e290:	dc04      	bgt.n	800e29c <__hexnan+0xa0>
 800e292:	462a      	mov	r2, r5
 800e294:	4649      	mov	r1, r9
 800e296:	4620      	mov	r0, r4
 800e298:	f7ff ff8a 	bl	800e1b0 <L_shift>
 800e29c:	4544      	cmp	r4, r8
 800e29e:	d934      	bls.n	800e30a <__hexnan+0x10e>
 800e2a0:	f1a8 0204 	sub.w	r2, r8, #4
 800e2a4:	4623      	mov	r3, r4
 800e2a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2aa:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2ae:	429f      	cmp	r7, r3
 800e2b0:	d2f9      	bcs.n	800e2a6 <__hexnan+0xaa>
 800e2b2:	1b3b      	subs	r3, r7, r4
 800e2b4:	f023 0303 	bic.w	r3, r3, #3
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	3401      	adds	r4, #1
 800e2bc:	3e03      	subs	r6, #3
 800e2be:	42b4      	cmp	r4, r6
 800e2c0:	bf88      	it	hi
 800e2c2:	2304      	movhi	r3, #4
 800e2c4:	4443      	add	r3, r8
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f843 2b04 	str.w	r2, [r3], #4
 800e2cc:	429f      	cmp	r7, r3
 800e2ce:	d2fb      	bcs.n	800e2c8 <__hexnan+0xcc>
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	b91b      	cbnz	r3, 800e2dc <__hexnan+0xe0>
 800e2d4:	4547      	cmp	r7, r8
 800e2d6:	d127      	bne.n	800e328 <__hexnan+0x12c>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	603b      	str	r3, [r7, #0]
 800e2dc:	2005      	movs	r0, #5
 800e2de:	e026      	b.n	800e32e <__hexnan+0x132>
 800e2e0:	3501      	adds	r5, #1
 800e2e2:	2d08      	cmp	r5, #8
 800e2e4:	f10b 0b01 	add.w	fp, fp, #1
 800e2e8:	dd06      	ble.n	800e2f8 <__hexnan+0xfc>
 800e2ea:	4544      	cmp	r4, r8
 800e2ec:	d9c3      	bls.n	800e276 <__hexnan+0x7a>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e2f4:	2501      	movs	r5, #1
 800e2f6:	3c04      	subs	r4, #4
 800e2f8:	6822      	ldr	r2, [r4, #0]
 800e2fa:	f000 000f 	and.w	r0, r0, #15
 800e2fe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e302:	6022      	str	r2, [r4, #0]
 800e304:	e7b7      	b.n	800e276 <__hexnan+0x7a>
 800e306:	2508      	movs	r5, #8
 800e308:	e7b5      	b.n	800e276 <__hexnan+0x7a>
 800e30a:	9b01      	ldr	r3, [sp, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d0df      	beq.n	800e2d0 <__hexnan+0xd4>
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	f1c3 0320 	rsb	r3, r3, #32
 800e318:	fa22 f303 	lsr.w	r3, r2, r3
 800e31c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e320:	401a      	ands	r2, r3
 800e322:	f846 2c04 	str.w	r2, [r6, #-4]
 800e326:	e7d3      	b.n	800e2d0 <__hexnan+0xd4>
 800e328:	3f04      	subs	r7, #4
 800e32a:	e7d1      	b.n	800e2d0 <__hexnan+0xd4>
 800e32c:	2004      	movs	r0, #4
 800e32e:	b007      	add	sp, #28
 800e330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e334 <_localeconv_r>:
 800e334:	4800      	ldr	r0, [pc, #0]	; (800e338 <_localeconv_r+0x4>)
 800e336:	4770      	bx	lr
 800e338:	20000380 	.word	0x20000380

0800e33c <malloc>:
 800e33c:	4b02      	ldr	r3, [pc, #8]	; (800e348 <malloc+0xc>)
 800e33e:	4601      	mov	r1, r0
 800e340:	6818      	ldr	r0, [r3, #0]
 800e342:	f000 bd59 	b.w	800edf8 <_malloc_r>
 800e346:	bf00      	nop
 800e348:	20000228 	.word	0x20000228

0800e34c <__ascii_mbtowc>:
 800e34c:	b082      	sub	sp, #8
 800e34e:	b901      	cbnz	r1, 800e352 <__ascii_mbtowc+0x6>
 800e350:	a901      	add	r1, sp, #4
 800e352:	b142      	cbz	r2, 800e366 <__ascii_mbtowc+0x1a>
 800e354:	b14b      	cbz	r3, 800e36a <__ascii_mbtowc+0x1e>
 800e356:	7813      	ldrb	r3, [r2, #0]
 800e358:	600b      	str	r3, [r1, #0]
 800e35a:	7812      	ldrb	r2, [r2, #0]
 800e35c:	1e10      	subs	r0, r2, #0
 800e35e:	bf18      	it	ne
 800e360:	2001      	movne	r0, #1
 800e362:	b002      	add	sp, #8
 800e364:	4770      	bx	lr
 800e366:	4610      	mov	r0, r2
 800e368:	e7fb      	b.n	800e362 <__ascii_mbtowc+0x16>
 800e36a:	f06f 0001 	mvn.w	r0, #1
 800e36e:	e7f8      	b.n	800e362 <__ascii_mbtowc+0x16>

0800e370 <_Balloc>:
 800e370:	b570      	push	{r4, r5, r6, lr}
 800e372:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e374:	4604      	mov	r4, r0
 800e376:	460d      	mov	r5, r1
 800e378:	b976      	cbnz	r6, 800e398 <_Balloc+0x28>
 800e37a:	2010      	movs	r0, #16
 800e37c:	f7ff ffde 	bl	800e33c <malloc>
 800e380:	4602      	mov	r2, r0
 800e382:	6260      	str	r0, [r4, #36]	; 0x24
 800e384:	b920      	cbnz	r0, 800e390 <_Balloc+0x20>
 800e386:	4b18      	ldr	r3, [pc, #96]	; (800e3e8 <_Balloc+0x78>)
 800e388:	4818      	ldr	r0, [pc, #96]	; (800e3ec <_Balloc+0x7c>)
 800e38a:	2166      	movs	r1, #102	; 0x66
 800e38c:	f000 ff3e 	bl	800f20c <__assert_func>
 800e390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e394:	6006      	str	r6, [r0, #0]
 800e396:	60c6      	str	r6, [r0, #12]
 800e398:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e39a:	68f3      	ldr	r3, [r6, #12]
 800e39c:	b183      	cbz	r3, 800e3c0 <_Balloc+0x50>
 800e39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e3a6:	b9b8      	cbnz	r0, 800e3d8 <_Balloc+0x68>
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	fa01 f605 	lsl.w	r6, r1, r5
 800e3ae:	1d72      	adds	r2, r6, #5
 800e3b0:	0092      	lsls	r2, r2, #2
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f000 fc9d 	bl	800ecf2 <_calloc_r>
 800e3b8:	b160      	cbz	r0, 800e3d4 <_Balloc+0x64>
 800e3ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e3be:	e00e      	b.n	800e3de <_Balloc+0x6e>
 800e3c0:	2221      	movs	r2, #33	; 0x21
 800e3c2:	2104      	movs	r1, #4
 800e3c4:	4620      	mov	r0, r4
 800e3c6:	f000 fc94 	bl	800ecf2 <_calloc_r>
 800e3ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e3cc:	60f0      	str	r0, [r6, #12]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1e4      	bne.n	800e39e <_Balloc+0x2e>
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	bd70      	pop	{r4, r5, r6, pc}
 800e3d8:	6802      	ldr	r2, [r0, #0]
 800e3da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e3e4:	e7f7      	b.n	800e3d6 <_Balloc+0x66>
 800e3e6:	bf00      	nop
 800e3e8:	080101fe 	.word	0x080101fe
 800e3ec:	080102fc 	.word	0x080102fc

0800e3f0 <_Bfree>:
 800e3f0:	b570      	push	{r4, r5, r6, lr}
 800e3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3f4:	4605      	mov	r5, r0
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	b976      	cbnz	r6, 800e418 <_Bfree+0x28>
 800e3fa:	2010      	movs	r0, #16
 800e3fc:	f7ff ff9e 	bl	800e33c <malloc>
 800e400:	4602      	mov	r2, r0
 800e402:	6268      	str	r0, [r5, #36]	; 0x24
 800e404:	b920      	cbnz	r0, 800e410 <_Bfree+0x20>
 800e406:	4b09      	ldr	r3, [pc, #36]	; (800e42c <_Bfree+0x3c>)
 800e408:	4809      	ldr	r0, [pc, #36]	; (800e430 <_Bfree+0x40>)
 800e40a:	218a      	movs	r1, #138	; 0x8a
 800e40c:	f000 fefe 	bl	800f20c <__assert_func>
 800e410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e414:	6006      	str	r6, [r0, #0]
 800e416:	60c6      	str	r6, [r0, #12]
 800e418:	b13c      	cbz	r4, 800e42a <_Bfree+0x3a>
 800e41a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e41c:	6862      	ldr	r2, [r4, #4]
 800e41e:	68db      	ldr	r3, [r3, #12]
 800e420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e424:	6021      	str	r1, [r4, #0]
 800e426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	080101fe 	.word	0x080101fe
 800e430:	080102fc 	.word	0x080102fc

0800e434 <__multadd>:
 800e434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e438:	690d      	ldr	r5, [r1, #16]
 800e43a:	4607      	mov	r7, r0
 800e43c:	460c      	mov	r4, r1
 800e43e:	461e      	mov	r6, r3
 800e440:	f101 0c14 	add.w	ip, r1, #20
 800e444:	2000      	movs	r0, #0
 800e446:	f8dc 3000 	ldr.w	r3, [ip]
 800e44a:	b299      	uxth	r1, r3
 800e44c:	fb02 6101 	mla	r1, r2, r1, r6
 800e450:	0c1e      	lsrs	r6, r3, #16
 800e452:	0c0b      	lsrs	r3, r1, #16
 800e454:	fb02 3306 	mla	r3, r2, r6, r3
 800e458:	b289      	uxth	r1, r1
 800e45a:	3001      	adds	r0, #1
 800e45c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e460:	4285      	cmp	r5, r0
 800e462:	f84c 1b04 	str.w	r1, [ip], #4
 800e466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e46a:	dcec      	bgt.n	800e446 <__multadd+0x12>
 800e46c:	b30e      	cbz	r6, 800e4b2 <__multadd+0x7e>
 800e46e:	68a3      	ldr	r3, [r4, #8]
 800e470:	42ab      	cmp	r3, r5
 800e472:	dc19      	bgt.n	800e4a8 <__multadd+0x74>
 800e474:	6861      	ldr	r1, [r4, #4]
 800e476:	4638      	mov	r0, r7
 800e478:	3101      	adds	r1, #1
 800e47a:	f7ff ff79 	bl	800e370 <_Balloc>
 800e47e:	4680      	mov	r8, r0
 800e480:	b928      	cbnz	r0, 800e48e <__multadd+0x5a>
 800e482:	4602      	mov	r2, r0
 800e484:	4b0c      	ldr	r3, [pc, #48]	; (800e4b8 <__multadd+0x84>)
 800e486:	480d      	ldr	r0, [pc, #52]	; (800e4bc <__multadd+0x88>)
 800e488:	21b5      	movs	r1, #181	; 0xb5
 800e48a:	f000 febf 	bl	800f20c <__assert_func>
 800e48e:	6922      	ldr	r2, [r4, #16]
 800e490:	3202      	adds	r2, #2
 800e492:	f104 010c 	add.w	r1, r4, #12
 800e496:	0092      	lsls	r2, r2, #2
 800e498:	300c      	adds	r0, #12
 800e49a:	f7fc ffff 	bl	800b49c <memcpy>
 800e49e:	4621      	mov	r1, r4
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f7ff ffa5 	bl	800e3f0 <_Bfree>
 800e4a6:	4644      	mov	r4, r8
 800e4a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e4ac:	3501      	adds	r5, #1
 800e4ae:	615e      	str	r6, [r3, #20]
 800e4b0:	6125      	str	r5, [r4, #16]
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4b8:	08010270 	.word	0x08010270
 800e4bc:	080102fc 	.word	0x080102fc

0800e4c0 <__s2b>:
 800e4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4c4:	460c      	mov	r4, r1
 800e4c6:	4615      	mov	r5, r2
 800e4c8:	461f      	mov	r7, r3
 800e4ca:	2209      	movs	r2, #9
 800e4cc:	3308      	adds	r3, #8
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	db09      	blt.n	800e4f0 <__s2b+0x30>
 800e4dc:	4630      	mov	r0, r6
 800e4de:	f7ff ff47 	bl	800e370 <_Balloc>
 800e4e2:	b940      	cbnz	r0, 800e4f6 <__s2b+0x36>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	4b19      	ldr	r3, [pc, #100]	; (800e54c <__s2b+0x8c>)
 800e4e8:	4819      	ldr	r0, [pc, #100]	; (800e550 <__s2b+0x90>)
 800e4ea:	21ce      	movs	r1, #206	; 0xce
 800e4ec:	f000 fe8e 	bl	800f20c <__assert_func>
 800e4f0:	0052      	lsls	r2, r2, #1
 800e4f2:	3101      	adds	r1, #1
 800e4f4:	e7f0      	b.n	800e4d8 <__s2b+0x18>
 800e4f6:	9b08      	ldr	r3, [sp, #32]
 800e4f8:	6143      	str	r3, [r0, #20]
 800e4fa:	2d09      	cmp	r5, #9
 800e4fc:	f04f 0301 	mov.w	r3, #1
 800e500:	6103      	str	r3, [r0, #16]
 800e502:	dd16      	ble.n	800e532 <__s2b+0x72>
 800e504:	f104 0909 	add.w	r9, r4, #9
 800e508:	46c8      	mov	r8, r9
 800e50a:	442c      	add	r4, r5
 800e50c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e510:	4601      	mov	r1, r0
 800e512:	3b30      	subs	r3, #48	; 0x30
 800e514:	220a      	movs	r2, #10
 800e516:	4630      	mov	r0, r6
 800e518:	f7ff ff8c 	bl	800e434 <__multadd>
 800e51c:	45a0      	cmp	r8, r4
 800e51e:	d1f5      	bne.n	800e50c <__s2b+0x4c>
 800e520:	f1a5 0408 	sub.w	r4, r5, #8
 800e524:	444c      	add	r4, r9
 800e526:	1b2d      	subs	r5, r5, r4
 800e528:	1963      	adds	r3, r4, r5
 800e52a:	42bb      	cmp	r3, r7
 800e52c:	db04      	blt.n	800e538 <__s2b+0x78>
 800e52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e532:	340a      	adds	r4, #10
 800e534:	2509      	movs	r5, #9
 800e536:	e7f6      	b.n	800e526 <__s2b+0x66>
 800e538:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e53c:	4601      	mov	r1, r0
 800e53e:	3b30      	subs	r3, #48	; 0x30
 800e540:	220a      	movs	r2, #10
 800e542:	4630      	mov	r0, r6
 800e544:	f7ff ff76 	bl	800e434 <__multadd>
 800e548:	e7ee      	b.n	800e528 <__s2b+0x68>
 800e54a:	bf00      	nop
 800e54c:	08010270 	.word	0x08010270
 800e550:	080102fc 	.word	0x080102fc

0800e554 <__hi0bits>:
 800e554:	0c03      	lsrs	r3, r0, #16
 800e556:	041b      	lsls	r3, r3, #16
 800e558:	b9d3      	cbnz	r3, 800e590 <__hi0bits+0x3c>
 800e55a:	0400      	lsls	r0, r0, #16
 800e55c:	2310      	movs	r3, #16
 800e55e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e562:	bf04      	itt	eq
 800e564:	0200      	lsleq	r0, r0, #8
 800e566:	3308      	addeq	r3, #8
 800e568:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e56c:	bf04      	itt	eq
 800e56e:	0100      	lsleq	r0, r0, #4
 800e570:	3304      	addeq	r3, #4
 800e572:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e576:	bf04      	itt	eq
 800e578:	0080      	lsleq	r0, r0, #2
 800e57a:	3302      	addeq	r3, #2
 800e57c:	2800      	cmp	r0, #0
 800e57e:	db05      	blt.n	800e58c <__hi0bits+0x38>
 800e580:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e584:	f103 0301 	add.w	r3, r3, #1
 800e588:	bf08      	it	eq
 800e58a:	2320      	moveq	r3, #32
 800e58c:	4618      	mov	r0, r3
 800e58e:	4770      	bx	lr
 800e590:	2300      	movs	r3, #0
 800e592:	e7e4      	b.n	800e55e <__hi0bits+0xa>

0800e594 <__lo0bits>:
 800e594:	6803      	ldr	r3, [r0, #0]
 800e596:	f013 0207 	ands.w	r2, r3, #7
 800e59a:	4601      	mov	r1, r0
 800e59c:	d00b      	beq.n	800e5b6 <__lo0bits+0x22>
 800e59e:	07da      	lsls	r2, r3, #31
 800e5a0:	d423      	bmi.n	800e5ea <__lo0bits+0x56>
 800e5a2:	0798      	lsls	r0, r3, #30
 800e5a4:	bf49      	itett	mi
 800e5a6:	085b      	lsrmi	r3, r3, #1
 800e5a8:	089b      	lsrpl	r3, r3, #2
 800e5aa:	2001      	movmi	r0, #1
 800e5ac:	600b      	strmi	r3, [r1, #0]
 800e5ae:	bf5c      	itt	pl
 800e5b0:	600b      	strpl	r3, [r1, #0]
 800e5b2:	2002      	movpl	r0, #2
 800e5b4:	4770      	bx	lr
 800e5b6:	b298      	uxth	r0, r3
 800e5b8:	b9a8      	cbnz	r0, 800e5e6 <__lo0bits+0x52>
 800e5ba:	0c1b      	lsrs	r3, r3, #16
 800e5bc:	2010      	movs	r0, #16
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	b90a      	cbnz	r2, 800e5c6 <__lo0bits+0x32>
 800e5c2:	3008      	adds	r0, #8
 800e5c4:	0a1b      	lsrs	r3, r3, #8
 800e5c6:	071a      	lsls	r2, r3, #28
 800e5c8:	bf04      	itt	eq
 800e5ca:	091b      	lsreq	r3, r3, #4
 800e5cc:	3004      	addeq	r0, #4
 800e5ce:	079a      	lsls	r2, r3, #30
 800e5d0:	bf04      	itt	eq
 800e5d2:	089b      	lsreq	r3, r3, #2
 800e5d4:	3002      	addeq	r0, #2
 800e5d6:	07da      	lsls	r2, r3, #31
 800e5d8:	d403      	bmi.n	800e5e2 <__lo0bits+0x4e>
 800e5da:	085b      	lsrs	r3, r3, #1
 800e5dc:	f100 0001 	add.w	r0, r0, #1
 800e5e0:	d005      	beq.n	800e5ee <__lo0bits+0x5a>
 800e5e2:	600b      	str	r3, [r1, #0]
 800e5e4:	4770      	bx	lr
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	e7e9      	b.n	800e5be <__lo0bits+0x2a>
 800e5ea:	2000      	movs	r0, #0
 800e5ec:	4770      	bx	lr
 800e5ee:	2020      	movs	r0, #32
 800e5f0:	4770      	bx	lr
	...

0800e5f4 <__i2b>:
 800e5f4:	b510      	push	{r4, lr}
 800e5f6:	460c      	mov	r4, r1
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	f7ff feb9 	bl	800e370 <_Balloc>
 800e5fe:	4602      	mov	r2, r0
 800e600:	b928      	cbnz	r0, 800e60e <__i2b+0x1a>
 800e602:	4b05      	ldr	r3, [pc, #20]	; (800e618 <__i2b+0x24>)
 800e604:	4805      	ldr	r0, [pc, #20]	; (800e61c <__i2b+0x28>)
 800e606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e60a:	f000 fdff 	bl	800f20c <__assert_func>
 800e60e:	2301      	movs	r3, #1
 800e610:	6144      	str	r4, [r0, #20]
 800e612:	6103      	str	r3, [r0, #16]
 800e614:	bd10      	pop	{r4, pc}
 800e616:	bf00      	nop
 800e618:	08010270 	.word	0x08010270
 800e61c:	080102fc 	.word	0x080102fc

0800e620 <__multiply>:
 800e620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e624:	4691      	mov	r9, r2
 800e626:	690a      	ldr	r2, [r1, #16]
 800e628:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	bfb8      	it	lt
 800e630:	460b      	movlt	r3, r1
 800e632:	460c      	mov	r4, r1
 800e634:	bfbc      	itt	lt
 800e636:	464c      	movlt	r4, r9
 800e638:	4699      	movlt	r9, r3
 800e63a:	6927      	ldr	r7, [r4, #16]
 800e63c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e640:	68a3      	ldr	r3, [r4, #8]
 800e642:	6861      	ldr	r1, [r4, #4]
 800e644:	eb07 060a 	add.w	r6, r7, sl
 800e648:	42b3      	cmp	r3, r6
 800e64a:	b085      	sub	sp, #20
 800e64c:	bfb8      	it	lt
 800e64e:	3101      	addlt	r1, #1
 800e650:	f7ff fe8e 	bl	800e370 <_Balloc>
 800e654:	b930      	cbnz	r0, 800e664 <__multiply+0x44>
 800e656:	4602      	mov	r2, r0
 800e658:	4b44      	ldr	r3, [pc, #272]	; (800e76c <__multiply+0x14c>)
 800e65a:	4845      	ldr	r0, [pc, #276]	; (800e770 <__multiply+0x150>)
 800e65c:	f240 115d 	movw	r1, #349	; 0x15d
 800e660:	f000 fdd4 	bl	800f20c <__assert_func>
 800e664:	f100 0514 	add.w	r5, r0, #20
 800e668:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e66c:	462b      	mov	r3, r5
 800e66e:	2200      	movs	r2, #0
 800e670:	4543      	cmp	r3, r8
 800e672:	d321      	bcc.n	800e6b8 <__multiply+0x98>
 800e674:	f104 0314 	add.w	r3, r4, #20
 800e678:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e67c:	f109 0314 	add.w	r3, r9, #20
 800e680:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e684:	9202      	str	r2, [sp, #8]
 800e686:	1b3a      	subs	r2, r7, r4
 800e688:	3a15      	subs	r2, #21
 800e68a:	f022 0203 	bic.w	r2, r2, #3
 800e68e:	3204      	adds	r2, #4
 800e690:	f104 0115 	add.w	r1, r4, #21
 800e694:	428f      	cmp	r7, r1
 800e696:	bf38      	it	cc
 800e698:	2204      	movcc	r2, #4
 800e69a:	9201      	str	r2, [sp, #4]
 800e69c:	9a02      	ldr	r2, [sp, #8]
 800e69e:	9303      	str	r3, [sp, #12]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	d80c      	bhi.n	800e6be <__multiply+0x9e>
 800e6a4:	2e00      	cmp	r6, #0
 800e6a6:	dd03      	ble.n	800e6b0 <__multiply+0x90>
 800e6a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d05a      	beq.n	800e766 <__multiply+0x146>
 800e6b0:	6106      	str	r6, [r0, #16]
 800e6b2:	b005      	add	sp, #20
 800e6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b8:	f843 2b04 	str.w	r2, [r3], #4
 800e6bc:	e7d8      	b.n	800e670 <__multiply+0x50>
 800e6be:	f8b3 a000 	ldrh.w	sl, [r3]
 800e6c2:	f1ba 0f00 	cmp.w	sl, #0
 800e6c6:	d024      	beq.n	800e712 <__multiply+0xf2>
 800e6c8:	f104 0e14 	add.w	lr, r4, #20
 800e6cc:	46a9      	mov	r9, r5
 800e6ce:	f04f 0c00 	mov.w	ip, #0
 800e6d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e6d6:	f8d9 1000 	ldr.w	r1, [r9]
 800e6da:	fa1f fb82 	uxth.w	fp, r2
 800e6de:	b289      	uxth	r1, r1
 800e6e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e6e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e6e8:	f8d9 2000 	ldr.w	r2, [r9]
 800e6ec:	4461      	add	r1, ip
 800e6ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e6f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800e6f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e6fa:	b289      	uxth	r1, r1
 800e6fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e700:	4577      	cmp	r7, lr
 800e702:	f849 1b04 	str.w	r1, [r9], #4
 800e706:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e70a:	d8e2      	bhi.n	800e6d2 <__multiply+0xb2>
 800e70c:	9a01      	ldr	r2, [sp, #4]
 800e70e:	f845 c002 	str.w	ip, [r5, r2]
 800e712:	9a03      	ldr	r2, [sp, #12]
 800e714:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e718:	3304      	adds	r3, #4
 800e71a:	f1b9 0f00 	cmp.w	r9, #0
 800e71e:	d020      	beq.n	800e762 <__multiply+0x142>
 800e720:	6829      	ldr	r1, [r5, #0]
 800e722:	f104 0c14 	add.w	ip, r4, #20
 800e726:	46ae      	mov	lr, r5
 800e728:	f04f 0a00 	mov.w	sl, #0
 800e72c:	f8bc b000 	ldrh.w	fp, [ip]
 800e730:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e734:	fb09 220b 	mla	r2, r9, fp, r2
 800e738:	4492      	add	sl, r2
 800e73a:	b289      	uxth	r1, r1
 800e73c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e740:	f84e 1b04 	str.w	r1, [lr], #4
 800e744:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e748:	f8be 1000 	ldrh.w	r1, [lr]
 800e74c:	0c12      	lsrs	r2, r2, #16
 800e74e:	fb09 1102 	mla	r1, r9, r2, r1
 800e752:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e756:	4567      	cmp	r7, ip
 800e758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e75c:	d8e6      	bhi.n	800e72c <__multiply+0x10c>
 800e75e:	9a01      	ldr	r2, [sp, #4]
 800e760:	50a9      	str	r1, [r5, r2]
 800e762:	3504      	adds	r5, #4
 800e764:	e79a      	b.n	800e69c <__multiply+0x7c>
 800e766:	3e01      	subs	r6, #1
 800e768:	e79c      	b.n	800e6a4 <__multiply+0x84>
 800e76a:	bf00      	nop
 800e76c:	08010270 	.word	0x08010270
 800e770:	080102fc 	.word	0x080102fc

0800e774 <__pow5mult>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	4615      	mov	r5, r2
 800e77a:	f012 0203 	ands.w	r2, r2, #3
 800e77e:	4606      	mov	r6, r0
 800e780:	460f      	mov	r7, r1
 800e782:	d007      	beq.n	800e794 <__pow5mult+0x20>
 800e784:	4c25      	ldr	r4, [pc, #148]	; (800e81c <__pow5mult+0xa8>)
 800e786:	3a01      	subs	r2, #1
 800e788:	2300      	movs	r3, #0
 800e78a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e78e:	f7ff fe51 	bl	800e434 <__multadd>
 800e792:	4607      	mov	r7, r0
 800e794:	10ad      	asrs	r5, r5, #2
 800e796:	d03d      	beq.n	800e814 <__pow5mult+0xa0>
 800e798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e79a:	b97c      	cbnz	r4, 800e7bc <__pow5mult+0x48>
 800e79c:	2010      	movs	r0, #16
 800e79e:	f7ff fdcd 	bl	800e33c <malloc>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	6270      	str	r0, [r6, #36]	; 0x24
 800e7a6:	b928      	cbnz	r0, 800e7b4 <__pow5mult+0x40>
 800e7a8:	4b1d      	ldr	r3, [pc, #116]	; (800e820 <__pow5mult+0xac>)
 800e7aa:	481e      	ldr	r0, [pc, #120]	; (800e824 <__pow5mult+0xb0>)
 800e7ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e7b0:	f000 fd2c 	bl	800f20c <__assert_func>
 800e7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e7b8:	6004      	str	r4, [r0, #0]
 800e7ba:	60c4      	str	r4, [r0, #12]
 800e7bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e7c4:	b94c      	cbnz	r4, 800e7da <__pow5mult+0x66>
 800e7c6:	f240 2171 	movw	r1, #625	; 0x271
 800e7ca:	4630      	mov	r0, r6
 800e7cc:	f7ff ff12 	bl	800e5f4 <__i2b>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7d6:	4604      	mov	r4, r0
 800e7d8:	6003      	str	r3, [r0, #0]
 800e7da:	f04f 0900 	mov.w	r9, #0
 800e7de:	07eb      	lsls	r3, r5, #31
 800e7e0:	d50a      	bpl.n	800e7f8 <__pow5mult+0x84>
 800e7e2:	4639      	mov	r1, r7
 800e7e4:	4622      	mov	r2, r4
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff ff1a 	bl	800e620 <__multiply>
 800e7ec:	4639      	mov	r1, r7
 800e7ee:	4680      	mov	r8, r0
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	f7ff fdfd 	bl	800e3f0 <_Bfree>
 800e7f6:	4647      	mov	r7, r8
 800e7f8:	106d      	asrs	r5, r5, #1
 800e7fa:	d00b      	beq.n	800e814 <__pow5mult+0xa0>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	b938      	cbnz	r0, 800e810 <__pow5mult+0x9c>
 800e800:	4622      	mov	r2, r4
 800e802:	4621      	mov	r1, r4
 800e804:	4630      	mov	r0, r6
 800e806:	f7ff ff0b 	bl	800e620 <__multiply>
 800e80a:	6020      	str	r0, [r4, #0]
 800e80c:	f8c0 9000 	str.w	r9, [r0]
 800e810:	4604      	mov	r4, r0
 800e812:	e7e4      	b.n	800e7de <__pow5mult+0x6a>
 800e814:	4638      	mov	r0, r7
 800e816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e81a:	bf00      	nop
 800e81c:	08010448 	.word	0x08010448
 800e820:	080101fe 	.word	0x080101fe
 800e824:	080102fc 	.word	0x080102fc

0800e828 <__lshift>:
 800e828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e82c:	460c      	mov	r4, r1
 800e82e:	6849      	ldr	r1, [r1, #4]
 800e830:	6923      	ldr	r3, [r4, #16]
 800e832:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e836:	68a3      	ldr	r3, [r4, #8]
 800e838:	4607      	mov	r7, r0
 800e83a:	4691      	mov	r9, r2
 800e83c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e840:	f108 0601 	add.w	r6, r8, #1
 800e844:	42b3      	cmp	r3, r6
 800e846:	db0b      	blt.n	800e860 <__lshift+0x38>
 800e848:	4638      	mov	r0, r7
 800e84a:	f7ff fd91 	bl	800e370 <_Balloc>
 800e84e:	4605      	mov	r5, r0
 800e850:	b948      	cbnz	r0, 800e866 <__lshift+0x3e>
 800e852:	4602      	mov	r2, r0
 800e854:	4b2a      	ldr	r3, [pc, #168]	; (800e900 <__lshift+0xd8>)
 800e856:	482b      	ldr	r0, [pc, #172]	; (800e904 <__lshift+0xdc>)
 800e858:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e85c:	f000 fcd6 	bl	800f20c <__assert_func>
 800e860:	3101      	adds	r1, #1
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	e7ee      	b.n	800e844 <__lshift+0x1c>
 800e866:	2300      	movs	r3, #0
 800e868:	f100 0114 	add.w	r1, r0, #20
 800e86c:	f100 0210 	add.w	r2, r0, #16
 800e870:	4618      	mov	r0, r3
 800e872:	4553      	cmp	r3, sl
 800e874:	db37      	blt.n	800e8e6 <__lshift+0xbe>
 800e876:	6920      	ldr	r0, [r4, #16]
 800e878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e87c:	f104 0314 	add.w	r3, r4, #20
 800e880:	f019 091f 	ands.w	r9, r9, #31
 800e884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e888:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e88c:	d02f      	beq.n	800e8ee <__lshift+0xc6>
 800e88e:	f1c9 0e20 	rsb	lr, r9, #32
 800e892:	468a      	mov	sl, r1
 800e894:	f04f 0c00 	mov.w	ip, #0
 800e898:	681a      	ldr	r2, [r3, #0]
 800e89a:	fa02 f209 	lsl.w	r2, r2, r9
 800e89e:	ea42 020c 	orr.w	r2, r2, ip
 800e8a2:	f84a 2b04 	str.w	r2, [sl], #4
 800e8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8aa:	4298      	cmp	r0, r3
 800e8ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e8b0:	d8f2      	bhi.n	800e898 <__lshift+0x70>
 800e8b2:	1b03      	subs	r3, r0, r4
 800e8b4:	3b15      	subs	r3, #21
 800e8b6:	f023 0303 	bic.w	r3, r3, #3
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	f104 0215 	add.w	r2, r4, #21
 800e8c0:	4290      	cmp	r0, r2
 800e8c2:	bf38      	it	cc
 800e8c4:	2304      	movcc	r3, #4
 800e8c6:	f841 c003 	str.w	ip, [r1, r3]
 800e8ca:	f1bc 0f00 	cmp.w	ip, #0
 800e8ce:	d001      	beq.n	800e8d4 <__lshift+0xac>
 800e8d0:	f108 0602 	add.w	r6, r8, #2
 800e8d4:	3e01      	subs	r6, #1
 800e8d6:	4638      	mov	r0, r7
 800e8d8:	612e      	str	r6, [r5, #16]
 800e8da:	4621      	mov	r1, r4
 800e8dc:	f7ff fd88 	bl	800e3f0 <_Bfree>
 800e8e0:	4628      	mov	r0, r5
 800e8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e8ea:	3301      	adds	r3, #1
 800e8ec:	e7c1      	b.n	800e872 <__lshift+0x4a>
 800e8ee:	3904      	subs	r1, #4
 800e8f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e8f8:	4298      	cmp	r0, r3
 800e8fa:	d8f9      	bhi.n	800e8f0 <__lshift+0xc8>
 800e8fc:	e7ea      	b.n	800e8d4 <__lshift+0xac>
 800e8fe:	bf00      	nop
 800e900:	08010270 	.word	0x08010270
 800e904:	080102fc 	.word	0x080102fc

0800e908 <__mcmp>:
 800e908:	b530      	push	{r4, r5, lr}
 800e90a:	6902      	ldr	r2, [r0, #16]
 800e90c:	690c      	ldr	r4, [r1, #16]
 800e90e:	1b12      	subs	r2, r2, r4
 800e910:	d10e      	bne.n	800e930 <__mcmp+0x28>
 800e912:	f100 0314 	add.w	r3, r0, #20
 800e916:	3114      	adds	r1, #20
 800e918:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e91c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e920:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e924:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e928:	42a5      	cmp	r5, r4
 800e92a:	d003      	beq.n	800e934 <__mcmp+0x2c>
 800e92c:	d305      	bcc.n	800e93a <__mcmp+0x32>
 800e92e:	2201      	movs	r2, #1
 800e930:	4610      	mov	r0, r2
 800e932:	bd30      	pop	{r4, r5, pc}
 800e934:	4283      	cmp	r3, r0
 800e936:	d3f3      	bcc.n	800e920 <__mcmp+0x18>
 800e938:	e7fa      	b.n	800e930 <__mcmp+0x28>
 800e93a:	f04f 32ff 	mov.w	r2, #4294967295
 800e93e:	e7f7      	b.n	800e930 <__mcmp+0x28>

0800e940 <__mdiff>:
 800e940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	460c      	mov	r4, r1
 800e946:	4606      	mov	r6, r0
 800e948:	4611      	mov	r1, r2
 800e94a:	4620      	mov	r0, r4
 800e94c:	4690      	mov	r8, r2
 800e94e:	f7ff ffdb 	bl	800e908 <__mcmp>
 800e952:	1e05      	subs	r5, r0, #0
 800e954:	d110      	bne.n	800e978 <__mdiff+0x38>
 800e956:	4629      	mov	r1, r5
 800e958:	4630      	mov	r0, r6
 800e95a:	f7ff fd09 	bl	800e370 <_Balloc>
 800e95e:	b930      	cbnz	r0, 800e96e <__mdiff+0x2e>
 800e960:	4b3a      	ldr	r3, [pc, #232]	; (800ea4c <__mdiff+0x10c>)
 800e962:	4602      	mov	r2, r0
 800e964:	f240 2132 	movw	r1, #562	; 0x232
 800e968:	4839      	ldr	r0, [pc, #228]	; (800ea50 <__mdiff+0x110>)
 800e96a:	f000 fc4f 	bl	800f20c <__assert_func>
 800e96e:	2301      	movs	r3, #1
 800e970:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e974:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e978:	bfa4      	itt	ge
 800e97a:	4643      	movge	r3, r8
 800e97c:	46a0      	movge	r8, r4
 800e97e:	4630      	mov	r0, r6
 800e980:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e984:	bfa6      	itte	ge
 800e986:	461c      	movge	r4, r3
 800e988:	2500      	movge	r5, #0
 800e98a:	2501      	movlt	r5, #1
 800e98c:	f7ff fcf0 	bl	800e370 <_Balloc>
 800e990:	b920      	cbnz	r0, 800e99c <__mdiff+0x5c>
 800e992:	4b2e      	ldr	r3, [pc, #184]	; (800ea4c <__mdiff+0x10c>)
 800e994:	4602      	mov	r2, r0
 800e996:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e99a:	e7e5      	b.n	800e968 <__mdiff+0x28>
 800e99c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9a0:	6926      	ldr	r6, [r4, #16]
 800e9a2:	60c5      	str	r5, [r0, #12]
 800e9a4:	f104 0914 	add.w	r9, r4, #20
 800e9a8:	f108 0514 	add.w	r5, r8, #20
 800e9ac:	f100 0e14 	add.w	lr, r0, #20
 800e9b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e9b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e9b8:	f108 0210 	add.w	r2, r8, #16
 800e9bc:	46f2      	mov	sl, lr
 800e9be:	2100      	movs	r1, #0
 800e9c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9c8:	fa1f f883 	uxth.w	r8, r3
 800e9cc:	fa11 f18b 	uxtah	r1, r1, fp
 800e9d0:	0c1b      	lsrs	r3, r3, #16
 800e9d2:	eba1 0808 	sub.w	r8, r1, r8
 800e9d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9de:	fa1f f888 	uxth.w	r8, r8
 800e9e2:	1419      	asrs	r1, r3, #16
 800e9e4:	454e      	cmp	r6, r9
 800e9e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e9ea:	f84a 3b04 	str.w	r3, [sl], #4
 800e9ee:	d8e7      	bhi.n	800e9c0 <__mdiff+0x80>
 800e9f0:	1b33      	subs	r3, r6, r4
 800e9f2:	3b15      	subs	r3, #21
 800e9f4:	f023 0303 	bic.w	r3, r3, #3
 800e9f8:	3304      	adds	r3, #4
 800e9fa:	3415      	adds	r4, #21
 800e9fc:	42a6      	cmp	r6, r4
 800e9fe:	bf38      	it	cc
 800ea00:	2304      	movcc	r3, #4
 800ea02:	441d      	add	r5, r3
 800ea04:	4473      	add	r3, lr
 800ea06:	469e      	mov	lr, r3
 800ea08:	462e      	mov	r6, r5
 800ea0a:	4566      	cmp	r6, ip
 800ea0c:	d30e      	bcc.n	800ea2c <__mdiff+0xec>
 800ea0e:	f10c 0203 	add.w	r2, ip, #3
 800ea12:	1b52      	subs	r2, r2, r5
 800ea14:	f022 0203 	bic.w	r2, r2, #3
 800ea18:	3d03      	subs	r5, #3
 800ea1a:	45ac      	cmp	ip, r5
 800ea1c:	bf38      	it	cc
 800ea1e:	2200      	movcc	r2, #0
 800ea20:	441a      	add	r2, r3
 800ea22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea26:	b17b      	cbz	r3, 800ea48 <__mdiff+0x108>
 800ea28:	6107      	str	r7, [r0, #16]
 800ea2a:	e7a3      	b.n	800e974 <__mdiff+0x34>
 800ea2c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea30:	fa11 f288 	uxtah	r2, r1, r8
 800ea34:	1414      	asrs	r4, r2, #16
 800ea36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ea3a:	b292      	uxth	r2, r2
 800ea3c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ea40:	f84e 2b04 	str.w	r2, [lr], #4
 800ea44:	1421      	asrs	r1, r4, #16
 800ea46:	e7e0      	b.n	800ea0a <__mdiff+0xca>
 800ea48:	3f01      	subs	r7, #1
 800ea4a:	e7ea      	b.n	800ea22 <__mdiff+0xe2>
 800ea4c:	08010270 	.word	0x08010270
 800ea50:	080102fc 	.word	0x080102fc

0800ea54 <__ulp>:
 800ea54:	b082      	sub	sp, #8
 800ea56:	ed8d 0b00 	vstr	d0, [sp]
 800ea5a:	9b01      	ldr	r3, [sp, #4]
 800ea5c:	4912      	ldr	r1, [pc, #72]	; (800eaa8 <__ulp+0x54>)
 800ea5e:	4019      	ands	r1, r3
 800ea60:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ea64:	2900      	cmp	r1, #0
 800ea66:	dd05      	ble.n	800ea74 <__ulp+0x20>
 800ea68:	2200      	movs	r2, #0
 800ea6a:	460b      	mov	r3, r1
 800ea6c:	ec43 2b10 	vmov	d0, r2, r3
 800ea70:	b002      	add	sp, #8
 800ea72:	4770      	bx	lr
 800ea74:	4249      	negs	r1, r1
 800ea76:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ea7a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ea7e:	f04f 0200 	mov.w	r2, #0
 800ea82:	f04f 0300 	mov.w	r3, #0
 800ea86:	da04      	bge.n	800ea92 <__ulp+0x3e>
 800ea88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ea8c:	fa41 f300 	asr.w	r3, r1, r0
 800ea90:	e7ec      	b.n	800ea6c <__ulp+0x18>
 800ea92:	f1a0 0114 	sub.w	r1, r0, #20
 800ea96:	291e      	cmp	r1, #30
 800ea98:	bfda      	itte	le
 800ea9a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ea9e:	fa20 f101 	lsrle.w	r1, r0, r1
 800eaa2:	2101      	movgt	r1, #1
 800eaa4:	460a      	mov	r2, r1
 800eaa6:	e7e1      	b.n	800ea6c <__ulp+0x18>
 800eaa8:	7ff00000 	.word	0x7ff00000

0800eaac <__b2d>:
 800eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaae:	6905      	ldr	r5, [r0, #16]
 800eab0:	f100 0714 	add.w	r7, r0, #20
 800eab4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eab8:	1f2e      	subs	r6, r5, #4
 800eaba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eabe:	4620      	mov	r0, r4
 800eac0:	f7ff fd48 	bl	800e554 <__hi0bits>
 800eac4:	f1c0 0320 	rsb	r3, r0, #32
 800eac8:	280a      	cmp	r0, #10
 800eaca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eb48 <__b2d+0x9c>
 800eace:	600b      	str	r3, [r1, #0]
 800ead0:	dc14      	bgt.n	800eafc <__b2d+0x50>
 800ead2:	f1c0 0e0b 	rsb	lr, r0, #11
 800ead6:	fa24 f10e 	lsr.w	r1, r4, lr
 800eada:	42b7      	cmp	r7, r6
 800eadc:	ea41 030c 	orr.w	r3, r1, ip
 800eae0:	bf34      	ite	cc
 800eae2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eae6:	2100      	movcs	r1, #0
 800eae8:	3015      	adds	r0, #21
 800eaea:	fa04 f000 	lsl.w	r0, r4, r0
 800eaee:	fa21 f10e 	lsr.w	r1, r1, lr
 800eaf2:	ea40 0201 	orr.w	r2, r0, r1
 800eaf6:	ec43 2b10 	vmov	d0, r2, r3
 800eafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eafc:	42b7      	cmp	r7, r6
 800eafe:	bf3a      	itte	cc
 800eb00:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb04:	f1a5 0608 	subcc.w	r6, r5, #8
 800eb08:	2100      	movcs	r1, #0
 800eb0a:	380b      	subs	r0, #11
 800eb0c:	d017      	beq.n	800eb3e <__b2d+0x92>
 800eb0e:	f1c0 0c20 	rsb	ip, r0, #32
 800eb12:	fa04 f500 	lsl.w	r5, r4, r0
 800eb16:	42be      	cmp	r6, r7
 800eb18:	fa21 f40c 	lsr.w	r4, r1, ip
 800eb1c:	ea45 0504 	orr.w	r5, r5, r4
 800eb20:	bf8c      	ite	hi
 800eb22:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eb26:	2400      	movls	r4, #0
 800eb28:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800eb2c:	fa01 f000 	lsl.w	r0, r1, r0
 800eb30:	fa24 f40c 	lsr.w	r4, r4, ip
 800eb34:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eb38:	ea40 0204 	orr.w	r2, r0, r4
 800eb3c:	e7db      	b.n	800eaf6 <__b2d+0x4a>
 800eb3e:	ea44 030c 	orr.w	r3, r4, ip
 800eb42:	460a      	mov	r2, r1
 800eb44:	e7d7      	b.n	800eaf6 <__b2d+0x4a>
 800eb46:	bf00      	nop
 800eb48:	3ff00000 	.word	0x3ff00000

0800eb4c <__d2b>:
 800eb4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb50:	4689      	mov	r9, r1
 800eb52:	2101      	movs	r1, #1
 800eb54:	ec57 6b10 	vmov	r6, r7, d0
 800eb58:	4690      	mov	r8, r2
 800eb5a:	f7ff fc09 	bl	800e370 <_Balloc>
 800eb5e:	4604      	mov	r4, r0
 800eb60:	b930      	cbnz	r0, 800eb70 <__d2b+0x24>
 800eb62:	4602      	mov	r2, r0
 800eb64:	4b25      	ldr	r3, [pc, #148]	; (800ebfc <__d2b+0xb0>)
 800eb66:	4826      	ldr	r0, [pc, #152]	; (800ec00 <__d2b+0xb4>)
 800eb68:	f240 310a 	movw	r1, #778	; 0x30a
 800eb6c:	f000 fb4e 	bl	800f20c <__assert_func>
 800eb70:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb74:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb78:	bb35      	cbnz	r5, 800ebc8 <__d2b+0x7c>
 800eb7a:	2e00      	cmp	r6, #0
 800eb7c:	9301      	str	r3, [sp, #4]
 800eb7e:	d028      	beq.n	800ebd2 <__d2b+0x86>
 800eb80:	4668      	mov	r0, sp
 800eb82:	9600      	str	r6, [sp, #0]
 800eb84:	f7ff fd06 	bl	800e594 <__lo0bits>
 800eb88:	9900      	ldr	r1, [sp, #0]
 800eb8a:	b300      	cbz	r0, 800ebce <__d2b+0x82>
 800eb8c:	9a01      	ldr	r2, [sp, #4]
 800eb8e:	f1c0 0320 	rsb	r3, r0, #32
 800eb92:	fa02 f303 	lsl.w	r3, r2, r3
 800eb96:	430b      	orrs	r3, r1
 800eb98:	40c2      	lsrs	r2, r0
 800eb9a:	6163      	str	r3, [r4, #20]
 800eb9c:	9201      	str	r2, [sp, #4]
 800eb9e:	9b01      	ldr	r3, [sp, #4]
 800eba0:	61a3      	str	r3, [r4, #24]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	bf14      	ite	ne
 800eba6:	2202      	movne	r2, #2
 800eba8:	2201      	moveq	r2, #1
 800ebaa:	6122      	str	r2, [r4, #16]
 800ebac:	b1d5      	cbz	r5, 800ebe4 <__d2b+0x98>
 800ebae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebb2:	4405      	add	r5, r0
 800ebb4:	f8c9 5000 	str.w	r5, [r9]
 800ebb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebbc:	f8c8 0000 	str.w	r0, [r8]
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	b003      	add	sp, #12
 800ebc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebcc:	e7d5      	b.n	800eb7a <__d2b+0x2e>
 800ebce:	6161      	str	r1, [r4, #20]
 800ebd0:	e7e5      	b.n	800eb9e <__d2b+0x52>
 800ebd2:	a801      	add	r0, sp, #4
 800ebd4:	f7ff fcde 	bl	800e594 <__lo0bits>
 800ebd8:	9b01      	ldr	r3, [sp, #4]
 800ebda:	6163      	str	r3, [r4, #20]
 800ebdc:	2201      	movs	r2, #1
 800ebde:	6122      	str	r2, [r4, #16]
 800ebe0:	3020      	adds	r0, #32
 800ebe2:	e7e3      	b.n	800ebac <__d2b+0x60>
 800ebe4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ebe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ebec:	f8c9 0000 	str.w	r0, [r9]
 800ebf0:	6918      	ldr	r0, [r3, #16]
 800ebf2:	f7ff fcaf 	bl	800e554 <__hi0bits>
 800ebf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ebfa:	e7df      	b.n	800ebbc <__d2b+0x70>
 800ebfc:	08010270 	.word	0x08010270
 800ec00:	080102fc 	.word	0x080102fc

0800ec04 <__ratio>:
 800ec04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec08:	4688      	mov	r8, r1
 800ec0a:	4669      	mov	r1, sp
 800ec0c:	4681      	mov	r9, r0
 800ec0e:	f7ff ff4d 	bl	800eaac <__b2d>
 800ec12:	a901      	add	r1, sp, #4
 800ec14:	4640      	mov	r0, r8
 800ec16:	ec55 4b10 	vmov	r4, r5, d0
 800ec1a:	f7ff ff47 	bl	800eaac <__b2d>
 800ec1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec22:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ec26:	eba3 0c02 	sub.w	ip, r3, r2
 800ec2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec2e:	1a9b      	subs	r3, r3, r2
 800ec30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ec34:	ec51 0b10 	vmov	r0, r1, d0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	bfd6      	itet	le
 800ec3c:	460a      	movle	r2, r1
 800ec3e:	462a      	movgt	r2, r5
 800ec40:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec44:	468b      	mov	fp, r1
 800ec46:	462f      	mov	r7, r5
 800ec48:	bfd4      	ite	le
 800ec4a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ec4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec52:	4620      	mov	r0, r4
 800ec54:	ee10 2a10 	vmov	r2, s0
 800ec58:	465b      	mov	r3, fp
 800ec5a:	4639      	mov	r1, r7
 800ec5c:	f7f1 fdfe 	bl	800085c <__aeabi_ddiv>
 800ec60:	ec41 0b10 	vmov	d0, r0, r1
 800ec64:	b003      	add	sp, #12
 800ec66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec6a <__copybits>:
 800ec6a:	3901      	subs	r1, #1
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	1149      	asrs	r1, r1, #5
 800ec70:	6914      	ldr	r4, [r2, #16]
 800ec72:	3101      	adds	r1, #1
 800ec74:	f102 0314 	add.w	r3, r2, #20
 800ec78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec7c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec80:	1f05      	subs	r5, r0, #4
 800ec82:	42a3      	cmp	r3, r4
 800ec84:	d30c      	bcc.n	800eca0 <__copybits+0x36>
 800ec86:	1aa3      	subs	r3, r4, r2
 800ec88:	3b11      	subs	r3, #17
 800ec8a:	f023 0303 	bic.w	r3, r3, #3
 800ec8e:	3211      	adds	r2, #17
 800ec90:	42a2      	cmp	r2, r4
 800ec92:	bf88      	it	hi
 800ec94:	2300      	movhi	r3, #0
 800ec96:	4418      	add	r0, r3
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4288      	cmp	r0, r1
 800ec9c:	d305      	bcc.n	800ecaa <__copybits+0x40>
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}
 800eca0:	f853 6b04 	ldr.w	r6, [r3], #4
 800eca4:	f845 6f04 	str.w	r6, [r5, #4]!
 800eca8:	e7eb      	b.n	800ec82 <__copybits+0x18>
 800ecaa:	f840 3b04 	str.w	r3, [r0], #4
 800ecae:	e7f4      	b.n	800ec9a <__copybits+0x30>

0800ecb0 <__any_on>:
 800ecb0:	f100 0214 	add.w	r2, r0, #20
 800ecb4:	6900      	ldr	r0, [r0, #16]
 800ecb6:	114b      	asrs	r3, r1, #5
 800ecb8:	4298      	cmp	r0, r3
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	db11      	blt.n	800ece2 <__any_on+0x32>
 800ecbe:	dd0a      	ble.n	800ecd6 <__any_on+0x26>
 800ecc0:	f011 011f 	ands.w	r1, r1, #31
 800ecc4:	d007      	beq.n	800ecd6 <__any_on+0x26>
 800ecc6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ecca:	fa24 f001 	lsr.w	r0, r4, r1
 800ecce:	fa00 f101 	lsl.w	r1, r0, r1
 800ecd2:	428c      	cmp	r4, r1
 800ecd4:	d10b      	bne.n	800ecee <__any_on+0x3e>
 800ecd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecda:	4293      	cmp	r3, r2
 800ecdc:	d803      	bhi.n	800ece6 <__any_on+0x36>
 800ecde:	2000      	movs	r0, #0
 800ece0:	bd10      	pop	{r4, pc}
 800ece2:	4603      	mov	r3, r0
 800ece4:	e7f7      	b.n	800ecd6 <__any_on+0x26>
 800ece6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ecea:	2900      	cmp	r1, #0
 800ecec:	d0f5      	beq.n	800ecda <__any_on+0x2a>
 800ecee:	2001      	movs	r0, #1
 800ecf0:	e7f6      	b.n	800ece0 <__any_on+0x30>

0800ecf2 <_calloc_r>:
 800ecf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecf4:	fba1 2402 	umull	r2, r4, r1, r2
 800ecf8:	b94c      	cbnz	r4, 800ed0e <_calloc_r+0x1c>
 800ecfa:	4611      	mov	r1, r2
 800ecfc:	9201      	str	r2, [sp, #4]
 800ecfe:	f000 f87b 	bl	800edf8 <_malloc_r>
 800ed02:	9a01      	ldr	r2, [sp, #4]
 800ed04:	4605      	mov	r5, r0
 800ed06:	b930      	cbnz	r0, 800ed16 <_calloc_r+0x24>
 800ed08:	4628      	mov	r0, r5
 800ed0a:	b003      	add	sp, #12
 800ed0c:	bd30      	pop	{r4, r5, pc}
 800ed0e:	220c      	movs	r2, #12
 800ed10:	6002      	str	r2, [r0, #0]
 800ed12:	2500      	movs	r5, #0
 800ed14:	e7f8      	b.n	800ed08 <_calloc_r+0x16>
 800ed16:	4621      	mov	r1, r4
 800ed18:	f7fc fbce 	bl	800b4b8 <memset>
 800ed1c:	e7f4      	b.n	800ed08 <_calloc_r+0x16>
	...

0800ed20 <_free_r>:
 800ed20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed22:	2900      	cmp	r1, #0
 800ed24:	d044      	beq.n	800edb0 <_free_r+0x90>
 800ed26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed2a:	9001      	str	r0, [sp, #4]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ed32:	bfb8      	it	lt
 800ed34:	18e4      	addlt	r4, r4, r3
 800ed36:	f000 fab3 	bl	800f2a0 <__malloc_lock>
 800ed3a:	4a1e      	ldr	r2, [pc, #120]	; (800edb4 <_free_r+0x94>)
 800ed3c:	9801      	ldr	r0, [sp, #4]
 800ed3e:	6813      	ldr	r3, [r2, #0]
 800ed40:	b933      	cbnz	r3, 800ed50 <_free_r+0x30>
 800ed42:	6063      	str	r3, [r4, #4]
 800ed44:	6014      	str	r4, [r2, #0]
 800ed46:	b003      	add	sp, #12
 800ed48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed4c:	f000 baae 	b.w	800f2ac <__malloc_unlock>
 800ed50:	42a3      	cmp	r3, r4
 800ed52:	d908      	bls.n	800ed66 <_free_r+0x46>
 800ed54:	6825      	ldr	r5, [r4, #0]
 800ed56:	1961      	adds	r1, r4, r5
 800ed58:	428b      	cmp	r3, r1
 800ed5a:	bf01      	itttt	eq
 800ed5c:	6819      	ldreq	r1, [r3, #0]
 800ed5e:	685b      	ldreq	r3, [r3, #4]
 800ed60:	1949      	addeq	r1, r1, r5
 800ed62:	6021      	streq	r1, [r4, #0]
 800ed64:	e7ed      	b.n	800ed42 <_free_r+0x22>
 800ed66:	461a      	mov	r2, r3
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	b10b      	cbz	r3, 800ed70 <_free_r+0x50>
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	d9fa      	bls.n	800ed66 <_free_r+0x46>
 800ed70:	6811      	ldr	r1, [r2, #0]
 800ed72:	1855      	adds	r5, r2, r1
 800ed74:	42a5      	cmp	r5, r4
 800ed76:	d10b      	bne.n	800ed90 <_free_r+0x70>
 800ed78:	6824      	ldr	r4, [r4, #0]
 800ed7a:	4421      	add	r1, r4
 800ed7c:	1854      	adds	r4, r2, r1
 800ed7e:	42a3      	cmp	r3, r4
 800ed80:	6011      	str	r1, [r2, #0]
 800ed82:	d1e0      	bne.n	800ed46 <_free_r+0x26>
 800ed84:	681c      	ldr	r4, [r3, #0]
 800ed86:	685b      	ldr	r3, [r3, #4]
 800ed88:	6053      	str	r3, [r2, #4]
 800ed8a:	4421      	add	r1, r4
 800ed8c:	6011      	str	r1, [r2, #0]
 800ed8e:	e7da      	b.n	800ed46 <_free_r+0x26>
 800ed90:	d902      	bls.n	800ed98 <_free_r+0x78>
 800ed92:	230c      	movs	r3, #12
 800ed94:	6003      	str	r3, [r0, #0]
 800ed96:	e7d6      	b.n	800ed46 <_free_r+0x26>
 800ed98:	6825      	ldr	r5, [r4, #0]
 800ed9a:	1961      	adds	r1, r4, r5
 800ed9c:	428b      	cmp	r3, r1
 800ed9e:	bf04      	itt	eq
 800eda0:	6819      	ldreq	r1, [r3, #0]
 800eda2:	685b      	ldreq	r3, [r3, #4]
 800eda4:	6063      	str	r3, [r4, #4]
 800eda6:	bf04      	itt	eq
 800eda8:	1949      	addeq	r1, r1, r5
 800edaa:	6021      	streq	r1, [r4, #0]
 800edac:	6054      	str	r4, [r2, #4]
 800edae:	e7ca      	b.n	800ed46 <_free_r+0x26>
 800edb0:	b003      	add	sp, #12
 800edb2:	bd30      	pop	{r4, r5, pc}
 800edb4:	200010b4 	.word	0x200010b4

0800edb8 <sbrk_aligned>:
 800edb8:	b570      	push	{r4, r5, r6, lr}
 800edba:	4e0e      	ldr	r6, [pc, #56]	; (800edf4 <sbrk_aligned+0x3c>)
 800edbc:	460c      	mov	r4, r1
 800edbe:	6831      	ldr	r1, [r6, #0]
 800edc0:	4605      	mov	r5, r0
 800edc2:	b911      	cbnz	r1, 800edca <sbrk_aligned+0x12>
 800edc4:	f000 f9f0 	bl	800f1a8 <_sbrk_r>
 800edc8:	6030      	str	r0, [r6, #0]
 800edca:	4621      	mov	r1, r4
 800edcc:	4628      	mov	r0, r5
 800edce:	f000 f9eb 	bl	800f1a8 <_sbrk_r>
 800edd2:	1c43      	adds	r3, r0, #1
 800edd4:	d00a      	beq.n	800edec <sbrk_aligned+0x34>
 800edd6:	1cc4      	adds	r4, r0, #3
 800edd8:	f024 0403 	bic.w	r4, r4, #3
 800eddc:	42a0      	cmp	r0, r4
 800edde:	d007      	beq.n	800edf0 <sbrk_aligned+0x38>
 800ede0:	1a21      	subs	r1, r4, r0
 800ede2:	4628      	mov	r0, r5
 800ede4:	f000 f9e0 	bl	800f1a8 <_sbrk_r>
 800ede8:	3001      	adds	r0, #1
 800edea:	d101      	bne.n	800edf0 <sbrk_aligned+0x38>
 800edec:	f04f 34ff 	mov.w	r4, #4294967295
 800edf0:	4620      	mov	r0, r4
 800edf2:	bd70      	pop	{r4, r5, r6, pc}
 800edf4:	200010b8 	.word	0x200010b8

0800edf8 <_malloc_r>:
 800edf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfc:	1ccd      	adds	r5, r1, #3
 800edfe:	f025 0503 	bic.w	r5, r5, #3
 800ee02:	3508      	adds	r5, #8
 800ee04:	2d0c      	cmp	r5, #12
 800ee06:	bf38      	it	cc
 800ee08:	250c      	movcc	r5, #12
 800ee0a:	2d00      	cmp	r5, #0
 800ee0c:	4607      	mov	r7, r0
 800ee0e:	db01      	blt.n	800ee14 <_malloc_r+0x1c>
 800ee10:	42a9      	cmp	r1, r5
 800ee12:	d905      	bls.n	800ee20 <_malloc_r+0x28>
 800ee14:	230c      	movs	r3, #12
 800ee16:	603b      	str	r3, [r7, #0]
 800ee18:	2600      	movs	r6, #0
 800ee1a:	4630      	mov	r0, r6
 800ee1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee20:	4e2e      	ldr	r6, [pc, #184]	; (800eedc <_malloc_r+0xe4>)
 800ee22:	f000 fa3d 	bl	800f2a0 <__malloc_lock>
 800ee26:	6833      	ldr	r3, [r6, #0]
 800ee28:	461c      	mov	r4, r3
 800ee2a:	bb34      	cbnz	r4, 800ee7a <_malloc_r+0x82>
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	4638      	mov	r0, r7
 800ee30:	f7ff ffc2 	bl	800edb8 <sbrk_aligned>
 800ee34:	1c43      	adds	r3, r0, #1
 800ee36:	4604      	mov	r4, r0
 800ee38:	d14d      	bne.n	800eed6 <_malloc_r+0xde>
 800ee3a:	6834      	ldr	r4, [r6, #0]
 800ee3c:	4626      	mov	r6, r4
 800ee3e:	2e00      	cmp	r6, #0
 800ee40:	d140      	bne.n	800eec4 <_malloc_r+0xcc>
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	4631      	mov	r1, r6
 800ee46:	4638      	mov	r0, r7
 800ee48:	eb04 0803 	add.w	r8, r4, r3
 800ee4c:	f000 f9ac 	bl	800f1a8 <_sbrk_r>
 800ee50:	4580      	cmp	r8, r0
 800ee52:	d13a      	bne.n	800eeca <_malloc_r+0xd2>
 800ee54:	6821      	ldr	r1, [r4, #0]
 800ee56:	3503      	adds	r5, #3
 800ee58:	1a6d      	subs	r5, r5, r1
 800ee5a:	f025 0503 	bic.w	r5, r5, #3
 800ee5e:	3508      	adds	r5, #8
 800ee60:	2d0c      	cmp	r5, #12
 800ee62:	bf38      	it	cc
 800ee64:	250c      	movcc	r5, #12
 800ee66:	4629      	mov	r1, r5
 800ee68:	4638      	mov	r0, r7
 800ee6a:	f7ff ffa5 	bl	800edb8 <sbrk_aligned>
 800ee6e:	3001      	adds	r0, #1
 800ee70:	d02b      	beq.n	800eeca <_malloc_r+0xd2>
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	442b      	add	r3, r5
 800ee76:	6023      	str	r3, [r4, #0]
 800ee78:	e00e      	b.n	800ee98 <_malloc_r+0xa0>
 800ee7a:	6822      	ldr	r2, [r4, #0]
 800ee7c:	1b52      	subs	r2, r2, r5
 800ee7e:	d41e      	bmi.n	800eebe <_malloc_r+0xc6>
 800ee80:	2a0b      	cmp	r2, #11
 800ee82:	d916      	bls.n	800eeb2 <_malloc_r+0xba>
 800ee84:	1961      	adds	r1, r4, r5
 800ee86:	42a3      	cmp	r3, r4
 800ee88:	6025      	str	r5, [r4, #0]
 800ee8a:	bf18      	it	ne
 800ee8c:	6059      	strne	r1, [r3, #4]
 800ee8e:	6863      	ldr	r3, [r4, #4]
 800ee90:	bf08      	it	eq
 800ee92:	6031      	streq	r1, [r6, #0]
 800ee94:	5162      	str	r2, [r4, r5]
 800ee96:	604b      	str	r3, [r1, #4]
 800ee98:	4638      	mov	r0, r7
 800ee9a:	f104 060b 	add.w	r6, r4, #11
 800ee9e:	f000 fa05 	bl	800f2ac <__malloc_unlock>
 800eea2:	f026 0607 	bic.w	r6, r6, #7
 800eea6:	1d23      	adds	r3, r4, #4
 800eea8:	1af2      	subs	r2, r6, r3
 800eeaa:	d0b6      	beq.n	800ee1a <_malloc_r+0x22>
 800eeac:	1b9b      	subs	r3, r3, r6
 800eeae:	50a3      	str	r3, [r4, r2]
 800eeb0:	e7b3      	b.n	800ee1a <_malloc_r+0x22>
 800eeb2:	6862      	ldr	r2, [r4, #4]
 800eeb4:	42a3      	cmp	r3, r4
 800eeb6:	bf0c      	ite	eq
 800eeb8:	6032      	streq	r2, [r6, #0]
 800eeba:	605a      	strne	r2, [r3, #4]
 800eebc:	e7ec      	b.n	800ee98 <_malloc_r+0xa0>
 800eebe:	4623      	mov	r3, r4
 800eec0:	6864      	ldr	r4, [r4, #4]
 800eec2:	e7b2      	b.n	800ee2a <_malloc_r+0x32>
 800eec4:	4634      	mov	r4, r6
 800eec6:	6876      	ldr	r6, [r6, #4]
 800eec8:	e7b9      	b.n	800ee3e <_malloc_r+0x46>
 800eeca:	230c      	movs	r3, #12
 800eecc:	603b      	str	r3, [r7, #0]
 800eece:	4638      	mov	r0, r7
 800eed0:	f000 f9ec 	bl	800f2ac <__malloc_unlock>
 800eed4:	e7a1      	b.n	800ee1a <_malloc_r+0x22>
 800eed6:	6025      	str	r5, [r4, #0]
 800eed8:	e7de      	b.n	800ee98 <_malloc_r+0xa0>
 800eeda:	bf00      	nop
 800eedc:	200010b4 	.word	0x200010b4

0800eee0 <__ssputs_r>:
 800eee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee4:	688e      	ldr	r6, [r1, #8]
 800eee6:	429e      	cmp	r6, r3
 800eee8:	4682      	mov	sl, r0
 800eeea:	460c      	mov	r4, r1
 800eeec:	4690      	mov	r8, r2
 800eeee:	461f      	mov	r7, r3
 800eef0:	d838      	bhi.n	800ef64 <__ssputs_r+0x84>
 800eef2:	898a      	ldrh	r2, [r1, #12]
 800eef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eef8:	d032      	beq.n	800ef60 <__ssputs_r+0x80>
 800eefa:	6825      	ldr	r5, [r4, #0]
 800eefc:	6909      	ldr	r1, [r1, #16]
 800eefe:	eba5 0901 	sub.w	r9, r5, r1
 800ef02:	6965      	ldr	r5, [r4, #20]
 800ef04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	444b      	add	r3, r9
 800ef10:	106d      	asrs	r5, r5, #1
 800ef12:	429d      	cmp	r5, r3
 800ef14:	bf38      	it	cc
 800ef16:	461d      	movcc	r5, r3
 800ef18:	0553      	lsls	r3, r2, #21
 800ef1a:	d531      	bpl.n	800ef80 <__ssputs_r+0xa0>
 800ef1c:	4629      	mov	r1, r5
 800ef1e:	f7ff ff6b 	bl	800edf8 <_malloc_r>
 800ef22:	4606      	mov	r6, r0
 800ef24:	b950      	cbnz	r0, 800ef3c <__ssputs_r+0x5c>
 800ef26:	230c      	movs	r3, #12
 800ef28:	f8ca 3000 	str.w	r3, [sl]
 800ef2c:	89a3      	ldrh	r3, [r4, #12]
 800ef2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef32:	81a3      	strh	r3, [r4, #12]
 800ef34:	f04f 30ff 	mov.w	r0, #4294967295
 800ef38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3c:	6921      	ldr	r1, [r4, #16]
 800ef3e:	464a      	mov	r2, r9
 800ef40:	f7fc faac 	bl	800b49c <memcpy>
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef4e:	81a3      	strh	r3, [r4, #12]
 800ef50:	6126      	str	r6, [r4, #16]
 800ef52:	6165      	str	r5, [r4, #20]
 800ef54:	444e      	add	r6, r9
 800ef56:	eba5 0509 	sub.w	r5, r5, r9
 800ef5a:	6026      	str	r6, [r4, #0]
 800ef5c:	60a5      	str	r5, [r4, #8]
 800ef5e:	463e      	mov	r6, r7
 800ef60:	42be      	cmp	r6, r7
 800ef62:	d900      	bls.n	800ef66 <__ssputs_r+0x86>
 800ef64:	463e      	mov	r6, r7
 800ef66:	6820      	ldr	r0, [r4, #0]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4641      	mov	r1, r8
 800ef6c:	f000 f97e 	bl	800f26c <memmove>
 800ef70:	68a3      	ldr	r3, [r4, #8]
 800ef72:	1b9b      	subs	r3, r3, r6
 800ef74:	60a3      	str	r3, [r4, #8]
 800ef76:	6823      	ldr	r3, [r4, #0]
 800ef78:	4433      	add	r3, r6
 800ef7a:	6023      	str	r3, [r4, #0]
 800ef7c:	2000      	movs	r0, #0
 800ef7e:	e7db      	b.n	800ef38 <__ssputs_r+0x58>
 800ef80:	462a      	mov	r2, r5
 800ef82:	f000 f999 	bl	800f2b8 <_realloc_r>
 800ef86:	4606      	mov	r6, r0
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d1e1      	bne.n	800ef50 <__ssputs_r+0x70>
 800ef8c:	6921      	ldr	r1, [r4, #16]
 800ef8e:	4650      	mov	r0, sl
 800ef90:	f7ff fec6 	bl	800ed20 <_free_r>
 800ef94:	e7c7      	b.n	800ef26 <__ssputs_r+0x46>
	...

0800ef98 <_svfiprintf_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	4698      	mov	r8, r3
 800ef9e:	898b      	ldrh	r3, [r1, #12]
 800efa0:	061b      	lsls	r3, r3, #24
 800efa2:	b09d      	sub	sp, #116	; 0x74
 800efa4:	4607      	mov	r7, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	4614      	mov	r4, r2
 800efaa:	d50e      	bpl.n	800efca <_svfiprintf_r+0x32>
 800efac:	690b      	ldr	r3, [r1, #16]
 800efae:	b963      	cbnz	r3, 800efca <_svfiprintf_r+0x32>
 800efb0:	2140      	movs	r1, #64	; 0x40
 800efb2:	f7ff ff21 	bl	800edf8 <_malloc_r>
 800efb6:	6028      	str	r0, [r5, #0]
 800efb8:	6128      	str	r0, [r5, #16]
 800efba:	b920      	cbnz	r0, 800efc6 <_svfiprintf_r+0x2e>
 800efbc:	230c      	movs	r3, #12
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295
 800efc4:	e0d1      	b.n	800f16a <_svfiprintf_r+0x1d2>
 800efc6:	2340      	movs	r3, #64	; 0x40
 800efc8:	616b      	str	r3, [r5, #20]
 800efca:	2300      	movs	r3, #0
 800efcc:	9309      	str	r3, [sp, #36]	; 0x24
 800efce:	2320      	movs	r3, #32
 800efd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800efd8:	2330      	movs	r3, #48	; 0x30
 800efda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f184 <_svfiprintf_r+0x1ec>
 800efde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efe2:	f04f 0901 	mov.w	r9, #1
 800efe6:	4623      	mov	r3, r4
 800efe8:	469a      	mov	sl, r3
 800efea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efee:	b10a      	cbz	r2, 800eff4 <_svfiprintf_r+0x5c>
 800eff0:	2a25      	cmp	r2, #37	; 0x25
 800eff2:	d1f9      	bne.n	800efe8 <_svfiprintf_r+0x50>
 800eff4:	ebba 0b04 	subs.w	fp, sl, r4
 800eff8:	d00b      	beq.n	800f012 <_svfiprintf_r+0x7a>
 800effa:	465b      	mov	r3, fp
 800effc:	4622      	mov	r2, r4
 800effe:	4629      	mov	r1, r5
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff ff6d 	bl	800eee0 <__ssputs_r>
 800f006:	3001      	adds	r0, #1
 800f008:	f000 80aa 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f00e:	445a      	add	r2, fp
 800f010:	9209      	str	r2, [sp, #36]	; 0x24
 800f012:	f89a 3000 	ldrb.w	r3, [sl]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 80a2 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f01c:	2300      	movs	r3, #0
 800f01e:	f04f 32ff 	mov.w	r2, #4294967295
 800f022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f026:	f10a 0a01 	add.w	sl, sl, #1
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	9307      	str	r3, [sp, #28]
 800f02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f032:	931a      	str	r3, [sp, #104]	; 0x68
 800f034:	4654      	mov	r4, sl
 800f036:	2205      	movs	r2, #5
 800f038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f03c:	4851      	ldr	r0, [pc, #324]	; (800f184 <_svfiprintf_r+0x1ec>)
 800f03e:	f7f1 f8d7 	bl	80001f0 <memchr>
 800f042:	9a04      	ldr	r2, [sp, #16]
 800f044:	b9d8      	cbnz	r0, 800f07e <_svfiprintf_r+0xe6>
 800f046:	06d0      	lsls	r0, r2, #27
 800f048:	bf44      	itt	mi
 800f04a:	2320      	movmi	r3, #32
 800f04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f050:	0711      	lsls	r1, r2, #28
 800f052:	bf44      	itt	mi
 800f054:	232b      	movmi	r3, #43	; 0x2b
 800f056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f05a:	f89a 3000 	ldrb.w	r3, [sl]
 800f05e:	2b2a      	cmp	r3, #42	; 0x2a
 800f060:	d015      	beq.n	800f08e <_svfiprintf_r+0xf6>
 800f062:	9a07      	ldr	r2, [sp, #28]
 800f064:	4654      	mov	r4, sl
 800f066:	2000      	movs	r0, #0
 800f068:	f04f 0c0a 	mov.w	ip, #10
 800f06c:	4621      	mov	r1, r4
 800f06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f072:	3b30      	subs	r3, #48	; 0x30
 800f074:	2b09      	cmp	r3, #9
 800f076:	d94e      	bls.n	800f116 <_svfiprintf_r+0x17e>
 800f078:	b1b0      	cbz	r0, 800f0a8 <_svfiprintf_r+0x110>
 800f07a:	9207      	str	r2, [sp, #28]
 800f07c:	e014      	b.n	800f0a8 <_svfiprintf_r+0x110>
 800f07e:	eba0 0308 	sub.w	r3, r0, r8
 800f082:	fa09 f303 	lsl.w	r3, r9, r3
 800f086:	4313      	orrs	r3, r2
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	46a2      	mov	sl, r4
 800f08c:	e7d2      	b.n	800f034 <_svfiprintf_r+0x9c>
 800f08e:	9b03      	ldr	r3, [sp, #12]
 800f090:	1d19      	adds	r1, r3, #4
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	9103      	str	r1, [sp, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	bfbb      	ittet	lt
 800f09a:	425b      	neglt	r3, r3
 800f09c:	f042 0202 	orrlt.w	r2, r2, #2
 800f0a0:	9307      	strge	r3, [sp, #28]
 800f0a2:	9307      	strlt	r3, [sp, #28]
 800f0a4:	bfb8      	it	lt
 800f0a6:	9204      	strlt	r2, [sp, #16]
 800f0a8:	7823      	ldrb	r3, [r4, #0]
 800f0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ac:	d10c      	bne.n	800f0c8 <_svfiprintf_r+0x130>
 800f0ae:	7863      	ldrb	r3, [r4, #1]
 800f0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b2:	d135      	bne.n	800f120 <_svfiprintf_r+0x188>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	1d1a      	adds	r2, r3, #4
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	9203      	str	r2, [sp, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfb8      	it	lt
 800f0c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0c4:	3402      	adds	r4, #2
 800f0c6:	9305      	str	r3, [sp, #20]
 800f0c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f194 <_svfiprintf_r+0x1fc>
 800f0cc:	7821      	ldrb	r1, [r4, #0]
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	f7f1 f88d 	bl	80001f0 <memchr>
 800f0d6:	b140      	cbz	r0, 800f0ea <_svfiprintf_r+0x152>
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	eba0 000a 	sub.w	r0, r0, sl
 800f0de:	fa03 f000 	lsl.w	r0, r3, r0
 800f0e2:	9b04      	ldr	r3, [sp, #16]
 800f0e4:	4303      	orrs	r3, r0
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ee:	4826      	ldr	r0, [pc, #152]	; (800f188 <_svfiprintf_r+0x1f0>)
 800f0f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0f4:	2206      	movs	r2, #6
 800f0f6:	f7f1 f87b 	bl	80001f0 <memchr>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d038      	beq.n	800f170 <_svfiprintf_r+0x1d8>
 800f0fe:	4b23      	ldr	r3, [pc, #140]	; (800f18c <_svfiprintf_r+0x1f4>)
 800f100:	bb1b      	cbnz	r3, 800f14a <_svfiprintf_r+0x1b2>
 800f102:	9b03      	ldr	r3, [sp, #12]
 800f104:	3307      	adds	r3, #7
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	3308      	adds	r3, #8
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	4433      	add	r3, r6
 800f112:	9309      	str	r3, [sp, #36]	; 0x24
 800f114:	e767      	b.n	800efe6 <_svfiprintf_r+0x4e>
 800f116:	fb0c 3202 	mla	r2, ip, r2, r3
 800f11a:	460c      	mov	r4, r1
 800f11c:	2001      	movs	r0, #1
 800f11e:	e7a5      	b.n	800f06c <_svfiprintf_r+0xd4>
 800f120:	2300      	movs	r3, #0
 800f122:	3401      	adds	r4, #1
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	4619      	mov	r1, r3
 800f128:	f04f 0c0a 	mov.w	ip, #10
 800f12c:	4620      	mov	r0, r4
 800f12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f132:	3a30      	subs	r2, #48	; 0x30
 800f134:	2a09      	cmp	r2, #9
 800f136:	d903      	bls.n	800f140 <_svfiprintf_r+0x1a8>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d0c5      	beq.n	800f0c8 <_svfiprintf_r+0x130>
 800f13c:	9105      	str	r1, [sp, #20]
 800f13e:	e7c3      	b.n	800f0c8 <_svfiprintf_r+0x130>
 800f140:	fb0c 2101 	mla	r1, ip, r1, r2
 800f144:	4604      	mov	r4, r0
 800f146:	2301      	movs	r3, #1
 800f148:	e7f0      	b.n	800f12c <_svfiprintf_r+0x194>
 800f14a:	ab03      	add	r3, sp, #12
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	462a      	mov	r2, r5
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f152:	a904      	add	r1, sp, #16
 800f154:	4638      	mov	r0, r7
 800f156:	f7fc fa57 	bl	800b608 <_printf_float>
 800f15a:	1c42      	adds	r2, r0, #1
 800f15c:	4606      	mov	r6, r0
 800f15e:	d1d6      	bne.n	800f10e <_svfiprintf_r+0x176>
 800f160:	89ab      	ldrh	r3, [r5, #12]
 800f162:	065b      	lsls	r3, r3, #25
 800f164:	f53f af2c 	bmi.w	800efc0 <_svfiprintf_r+0x28>
 800f168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f16a:	b01d      	add	sp, #116	; 0x74
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	ab03      	add	r3, sp, #12
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	462a      	mov	r2, r5
 800f176:	4b06      	ldr	r3, [pc, #24]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f178:	a904      	add	r1, sp, #16
 800f17a:	4638      	mov	r0, r7
 800f17c:	f7fc fce8 	bl	800bb50 <_printf_i>
 800f180:	e7eb      	b.n	800f15a <_svfiprintf_r+0x1c2>
 800f182:	bf00      	nop
 800f184:	08010454 	.word	0x08010454
 800f188:	0801045e 	.word	0x0801045e
 800f18c:	0800b609 	.word	0x0800b609
 800f190:	0800eee1 	.word	0x0800eee1
 800f194:	0801045a 	.word	0x0801045a

0800f198 <nan>:
 800f198:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f1a0 <nan+0x8>
 800f19c:	4770      	bx	lr
 800f19e:	bf00      	nop
 800f1a0:	00000000 	.word	0x00000000
 800f1a4:	7ff80000 	.word	0x7ff80000

0800f1a8 <_sbrk_r>:
 800f1a8:	b538      	push	{r3, r4, r5, lr}
 800f1aa:	4d06      	ldr	r5, [pc, #24]	; (800f1c4 <_sbrk_r+0x1c>)
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	4608      	mov	r0, r1
 800f1b2:	602b      	str	r3, [r5, #0]
 800f1b4:	f7f5 fa74 	bl	80046a0 <_sbrk>
 800f1b8:	1c43      	adds	r3, r0, #1
 800f1ba:	d102      	bne.n	800f1c2 <_sbrk_r+0x1a>
 800f1bc:	682b      	ldr	r3, [r5, #0]
 800f1be:	b103      	cbz	r3, 800f1c2 <_sbrk_r+0x1a>
 800f1c0:	6023      	str	r3, [r4, #0]
 800f1c2:	bd38      	pop	{r3, r4, r5, pc}
 800f1c4:	200010bc 	.word	0x200010bc

0800f1c8 <strncmp>:
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	b17a      	cbz	r2, 800f1ec <strncmp+0x24>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	3901      	subs	r1, #1
 800f1d0:	1884      	adds	r4, r0, r2
 800f1d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f1d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f1da:	4290      	cmp	r0, r2
 800f1dc:	d101      	bne.n	800f1e2 <strncmp+0x1a>
 800f1de:	42a3      	cmp	r3, r4
 800f1e0:	d101      	bne.n	800f1e6 <strncmp+0x1e>
 800f1e2:	1a80      	subs	r0, r0, r2
 800f1e4:	bd10      	pop	{r4, pc}
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	d1f3      	bne.n	800f1d2 <strncmp+0xa>
 800f1ea:	e7fa      	b.n	800f1e2 <strncmp+0x1a>
 800f1ec:	4610      	mov	r0, r2
 800f1ee:	e7f9      	b.n	800f1e4 <strncmp+0x1c>

0800f1f0 <__ascii_wctomb>:
 800f1f0:	b149      	cbz	r1, 800f206 <__ascii_wctomb+0x16>
 800f1f2:	2aff      	cmp	r2, #255	; 0xff
 800f1f4:	bf85      	ittet	hi
 800f1f6:	238a      	movhi	r3, #138	; 0x8a
 800f1f8:	6003      	strhi	r3, [r0, #0]
 800f1fa:	700a      	strbls	r2, [r1, #0]
 800f1fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800f200:	bf98      	it	ls
 800f202:	2001      	movls	r0, #1
 800f204:	4770      	bx	lr
 800f206:	4608      	mov	r0, r1
 800f208:	4770      	bx	lr
	...

0800f20c <__assert_func>:
 800f20c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f20e:	4614      	mov	r4, r2
 800f210:	461a      	mov	r2, r3
 800f212:	4b09      	ldr	r3, [pc, #36]	; (800f238 <__assert_func+0x2c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4605      	mov	r5, r0
 800f218:	68d8      	ldr	r0, [r3, #12]
 800f21a:	b14c      	cbz	r4, 800f230 <__assert_func+0x24>
 800f21c:	4b07      	ldr	r3, [pc, #28]	; (800f23c <__assert_func+0x30>)
 800f21e:	9100      	str	r1, [sp, #0]
 800f220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f224:	4906      	ldr	r1, [pc, #24]	; (800f240 <__assert_func+0x34>)
 800f226:	462b      	mov	r3, r5
 800f228:	f000 f80e 	bl	800f248 <fiprintf>
 800f22c:	f000 fa8c 	bl	800f748 <abort>
 800f230:	4b04      	ldr	r3, [pc, #16]	; (800f244 <__assert_func+0x38>)
 800f232:	461c      	mov	r4, r3
 800f234:	e7f3      	b.n	800f21e <__assert_func+0x12>
 800f236:	bf00      	nop
 800f238:	20000228 	.word	0x20000228
 800f23c:	08010465 	.word	0x08010465
 800f240:	08010472 	.word	0x08010472
 800f244:	080104a0 	.word	0x080104a0

0800f248 <fiprintf>:
 800f248:	b40e      	push	{r1, r2, r3}
 800f24a:	b503      	push	{r0, r1, lr}
 800f24c:	4601      	mov	r1, r0
 800f24e:	ab03      	add	r3, sp, #12
 800f250:	4805      	ldr	r0, [pc, #20]	; (800f268 <fiprintf+0x20>)
 800f252:	f853 2b04 	ldr.w	r2, [r3], #4
 800f256:	6800      	ldr	r0, [r0, #0]
 800f258:	9301      	str	r3, [sp, #4]
 800f25a:	f000 f885 	bl	800f368 <_vfiprintf_r>
 800f25e:	b002      	add	sp, #8
 800f260:	f85d eb04 	ldr.w	lr, [sp], #4
 800f264:	b003      	add	sp, #12
 800f266:	4770      	bx	lr
 800f268:	20000228 	.word	0x20000228

0800f26c <memmove>:
 800f26c:	4288      	cmp	r0, r1
 800f26e:	b510      	push	{r4, lr}
 800f270:	eb01 0402 	add.w	r4, r1, r2
 800f274:	d902      	bls.n	800f27c <memmove+0x10>
 800f276:	4284      	cmp	r4, r0
 800f278:	4623      	mov	r3, r4
 800f27a:	d807      	bhi.n	800f28c <memmove+0x20>
 800f27c:	1e43      	subs	r3, r0, #1
 800f27e:	42a1      	cmp	r1, r4
 800f280:	d008      	beq.n	800f294 <memmove+0x28>
 800f282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f28a:	e7f8      	b.n	800f27e <memmove+0x12>
 800f28c:	4402      	add	r2, r0
 800f28e:	4601      	mov	r1, r0
 800f290:	428a      	cmp	r2, r1
 800f292:	d100      	bne.n	800f296 <memmove+0x2a>
 800f294:	bd10      	pop	{r4, pc}
 800f296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f29a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f29e:	e7f7      	b.n	800f290 <memmove+0x24>

0800f2a0 <__malloc_lock>:
 800f2a0:	4801      	ldr	r0, [pc, #4]	; (800f2a8 <__malloc_lock+0x8>)
 800f2a2:	f000 bc11 	b.w	800fac8 <__retarget_lock_acquire_recursive>
 800f2a6:	bf00      	nop
 800f2a8:	200010c0 	.word	0x200010c0

0800f2ac <__malloc_unlock>:
 800f2ac:	4801      	ldr	r0, [pc, #4]	; (800f2b4 <__malloc_unlock+0x8>)
 800f2ae:	f000 bc0c 	b.w	800faca <__retarget_lock_release_recursive>
 800f2b2:	bf00      	nop
 800f2b4:	200010c0 	.word	0x200010c0

0800f2b8 <_realloc_r>:
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	4680      	mov	r8, r0
 800f2be:	4614      	mov	r4, r2
 800f2c0:	460e      	mov	r6, r1
 800f2c2:	b921      	cbnz	r1, 800f2ce <_realloc_r+0x16>
 800f2c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c8:	4611      	mov	r1, r2
 800f2ca:	f7ff bd95 	b.w	800edf8 <_malloc_r>
 800f2ce:	b92a      	cbnz	r2, 800f2dc <_realloc_r+0x24>
 800f2d0:	f7ff fd26 	bl	800ed20 <_free_r>
 800f2d4:	4625      	mov	r5, r4
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2dc:	f000 fc5c 	bl	800fb98 <_malloc_usable_size_r>
 800f2e0:	4284      	cmp	r4, r0
 800f2e2:	4607      	mov	r7, r0
 800f2e4:	d802      	bhi.n	800f2ec <_realloc_r+0x34>
 800f2e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2ea:	d812      	bhi.n	800f312 <_realloc_r+0x5a>
 800f2ec:	4621      	mov	r1, r4
 800f2ee:	4640      	mov	r0, r8
 800f2f0:	f7ff fd82 	bl	800edf8 <_malloc_r>
 800f2f4:	4605      	mov	r5, r0
 800f2f6:	2800      	cmp	r0, #0
 800f2f8:	d0ed      	beq.n	800f2d6 <_realloc_r+0x1e>
 800f2fa:	42bc      	cmp	r4, r7
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	4631      	mov	r1, r6
 800f300:	bf28      	it	cs
 800f302:	463a      	movcs	r2, r7
 800f304:	f7fc f8ca 	bl	800b49c <memcpy>
 800f308:	4631      	mov	r1, r6
 800f30a:	4640      	mov	r0, r8
 800f30c:	f7ff fd08 	bl	800ed20 <_free_r>
 800f310:	e7e1      	b.n	800f2d6 <_realloc_r+0x1e>
 800f312:	4635      	mov	r5, r6
 800f314:	e7df      	b.n	800f2d6 <_realloc_r+0x1e>

0800f316 <__sfputc_r>:
 800f316:	6893      	ldr	r3, [r2, #8]
 800f318:	3b01      	subs	r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	b410      	push	{r4}
 800f31e:	6093      	str	r3, [r2, #8]
 800f320:	da08      	bge.n	800f334 <__sfputc_r+0x1e>
 800f322:	6994      	ldr	r4, [r2, #24]
 800f324:	42a3      	cmp	r3, r4
 800f326:	db01      	blt.n	800f32c <__sfputc_r+0x16>
 800f328:	290a      	cmp	r1, #10
 800f32a:	d103      	bne.n	800f334 <__sfputc_r+0x1e>
 800f32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f330:	f000 b94a 	b.w	800f5c8 <__swbuf_r>
 800f334:	6813      	ldr	r3, [r2, #0]
 800f336:	1c58      	adds	r0, r3, #1
 800f338:	6010      	str	r0, [r2, #0]
 800f33a:	7019      	strb	r1, [r3, #0]
 800f33c:	4608      	mov	r0, r1
 800f33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <__sfputs_r>:
 800f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f346:	4606      	mov	r6, r0
 800f348:	460f      	mov	r7, r1
 800f34a:	4614      	mov	r4, r2
 800f34c:	18d5      	adds	r5, r2, r3
 800f34e:	42ac      	cmp	r4, r5
 800f350:	d101      	bne.n	800f356 <__sfputs_r+0x12>
 800f352:	2000      	movs	r0, #0
 800f354:	e007      	b.n	800f366 <__sfputs_r+0x22>
 800f356:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f35a:	463a      	mov	r2, r7
 800f35c:	4630      	mov	r0, r6
 800f35e:	f7ff ffda 	bl	800f316 <__sfputc_r>
 800f362:	1c43      	adds	r3, r0, #1
 800f364:	d1f3      	bne.n	800f34e <__sfputs_r+0xa>
 800f366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f368 <_vfiprintf_r>:
 800f368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f36c:	460d      	mov	r5, r1
 800f36e:	b09d      	sub	sp, #116	; 0x74
 800f370:	4614      	mov	r4, r2
 800f372:	4698      	mov	r8, r3
 800f374:	4606      	mov	r6, r0
 800f376:	b118      	cbz	r0, 800f380 <_vfiprintf_r+0x18>
 800f378:	6983      	ldr	r3, [r0, #24]
 800f37a:	b90b      	cbnz	r3, 800f380 <_vfiprintf_r+0x18>
 800f37c:	f000 fb06 	bl	800f98c <__sinit>
 800f380:	4b89      	ldr	r3, [pc, #548]	; (800f5a8 <_vfiprintf_r+0x240>)
 800f382:	429d      	cmp	r5, r3
 800f384:	d11b      	bne.n	800f3be <_vfiprintf_r+0x56>
 800f386:	6875      	ldr	r5, [r6, #4]
 800f388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f38a:	07d9      	lsls	r1, r3, #31
 800f38c:	d405      	bmi.n	800f39a <_vfiprintf_r+0x32>
 800f38e:	89ab      	ldrh	r3, [r5, #12]
 800f390:	059a      	lsls	r2, r3, #22
 800f392:	d402      	bmi.n	800f39a <_vfiprintf_r+0x32>
 800f394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f396:	f000 fb97 	bl	800fac8 <__retarget_lock_acquire_recursive>
 800f39a:	89ab      	ldrh	r3, [r5, #12]
 800f39c:	071b      	lsls	r3, r3, #28
 800f39e:	d501      	bpl.n	800f3a4 <_vfiprintf_r+0x3c>
 800f3a0:	692b      	ldr	r3, [r5, #16]
 800f3a2:	b9eb      	cbnz	r3, 800f3e0 <_vfiprintf_r+0x78>
 800f3a4:	4629      	mov	r1, r5
 800f3a6:	4630      	mov	r0, r6
 800f3a8:	f000 f960 	bl	800f66c <__swsetup_r>
 800f3ac:	b1c0      	cbz	r0, 800f3e0 <_vfiprintf_r+0x78>
 800f3ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3b0:	07dc      	lsls	r4, r3, #31
 800f3b2:	d50e      	bpl.n	800f3d2 <_vfiprintf_r+0x6a>
 800f3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b8:	b01d      	add	sp, #116	; 0x74
 800f3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3be:	4b7b      	ldr	r3, [pc, #492]	; (800f5ac <_vfiprintf_r+0x244>)
 800f3c0:	429d      	cmp	r5, r3
 800f3c2:	d101      	bne.n	800f3c8 <_vfiprintf_r+0x60>
 800f3c4:	68b5      	ldr	r5, [r6, #8]
 800f3c6:	e7df      	b.n	800f388 <_vfiprintf_r+0x20>
 800f3c8:	4b79      	ldr	r3, [pc, #484]	; (800f5b0 <_vfiprintf_r+0x248>)
 800f3ca:	429d      	cmp	r5, r3
 800f3cc:	bf08      	it	eq
 800f3ce:	68f5      	ldreq	r5, [r6, #12]
 800f3d0:	e7da      	b.n	800f388 <_vfiprintf_r+0x20>
 800f3d2:	89ab      	ldrh	r3, [r5, #12]
 800f3d4:	0598      	lsls	r0, r3, #22
 800f3d6:	d4ed      	bmi.n	800f3b4 <_vfiprintf_r+0x4c>
 800f3d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3da:	f000 fb76 	bl	800faca <__retarget_lock_release_recursive>
 800f3de:	e7e9      	b.n	800f3b4 <_vfiprintf_r+0x4c>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3e4:	2320      	movs	r3, #32
 800f3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3ee:	2330      	movs	r3, #48	; 0x30
 800f3f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5b4 <_vfiprintf_r+0x24c>
 800f3f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3f8:	f04f 0901 	mov.w	r9, #1
 800f3fc:	4623      	mov	r3, r4
 800f3fe:	469a      	mov	sl, r3
 800f400:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f404:	b10a      	cbz	r2, 800f40a <_vfiprintf_r+0xa2>
 800f406:	2a25      	cmp	r2, #37	; 0x25
 800f408:	d1f9      	bne.n	800f3fe <_vfiprintf_r+0x96>
 800f40a:	ebba 0b04 	subs.w	fp, sl, r4
 800f40e:	d00b      	beq.n	800f428 <_vfiprintf_r+0xc0>
 800f410:	465b      	mov	r3, fp
 800f412:	4622      	mov	r2, r4
 800f414:	4629      	mov	r1, r5
 800f416:	4630      	mov	r0, r6
 800f418:	f7ff ff94 	bl	800f344 <__sfputs_r>
 800f41c:	3001      	adds	r0, #1
 800f41e:	f000 80aa 	beq.w	800f576 <_vfiprintf_r+0x20e>
 800f422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f424:	445a      	add	r2, fp
 800f426:	9209      	str	r2, [sp, #36]	; 0x24
 800f428:	f89a 3000 	ldrb.w	r3, [sl]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f000 80a2 	beq.w	800f576 <_vfiprintf_r+0x20e>
 800f432:	2300      	movs	r3, #0
 800f434:	f04f 32ff 	mov.w	r2, #4294967295
 800f438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f43c:	f10a 0a01 	add.w	sl, sl, #1
 800f440:	9304      	str	r3, [sp, #16]
 800f442:	9307      	str	r3, [sp, #28]
 800f444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f448:	931a      	str	r3, [sp, #104]	; 0x68
 800f44a:	4654      	mov	r4, sl
 800f44c:	2205      	movs	r2, #5
 800f44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f452:	4858      	ldr	r0, [pc, #352]	; (800f5b4 <_vfiprintf_r+0x24c>)
 800f454:	f7f0 fecc 	bl	80001f0 <memchr>
 800f458:	9a04      	ldr	r2, [sp, #16]
 800f45a:	b9d8      	cbnz	r0, 800f494 <_vfiprintf_r+0x12c>
 800f45c:	06d1      	lsls	r1, r2, #27
 800f45e:	bf44      	itt	mi
 800f460:	2320      	movmi	r3, #32
 800f462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f466:	0713      	lsls	r3, r2, #28
 800f468:	bf44      	itt	mi
 800f46a:	232b      	movmi	r3, #43	; 0x2b
 800f46c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f470:	f89a 3000 	ldrb.w	r3, [sl]
 800f474:	2b2a      	cmp	r3, #42	; 0x2a
 800f476:	d015      	beq.n	800f4a4 <_vfiprintf_r+0x13c>
 800f478:	9a07      	ldr	r2, [sp, #28]
 800f47a:	4654      	mov	r4, sl
 800f47c:	2000      	movs	r0, #0
 800f47e:	f04f 0c0a 	mov.w	ip, #10
 800f482:	4621      	mov	r1, r4
 800f484:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f488:	3b30      	subs	r3, #48	; 0x30
 800f48a:	2b09      	cmp	r3, #9
 800f48c:	d94e      	bls.n	800f52c <_vfiprintf_r+0x1c4>
 800f48e:	b1b0      	cbz	r0, 800f4be <_vfiprintf_r+0x156>
 800f490:	9207      	str	r2, [sp, #28]
 800f492:	e014      	b.n	800f4be <_vfiprintf_r+0x156>
 800f494:	eba0 0308 	sub.w	r3, r0, r8
 800f498:	fa09 f303 	lsl.w	r3, r9, r3
 800f49c:	4313      	orrs	r3, r2
 800f49e:	9304      	str	r3, [sp, #16]
 800f4a0:	46a2      	mov	sl, r4
 800f4a2:	e7d2      	b.n	800f44a <_vfiprintf_r+0xe2>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	1d19      	adds	r1, r3, #4
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	9103      	str	r1, [sp, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	bfbb      	ittet	lt
 800f4b0:	425b      	neglt	r3, r3
 800f4b2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4b6:	9307      	strge	r3, [sp, #28]
 800f4b8:	9307      	strlt	r3, [sp, #28]
 800f4ba:	bfb8      	it	lt
 800f4bc:	9204      	strlt	r2, [sp, #16]
 800f4be:	7823      	ldrb	r3, [r4, #0]
 800f4c0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4c2:	d10c      	bne.n	800f4de <_vfiprintf_r+0x176>
 800f4c4:	7863      	ldrb	r3, [r4, #1]
 800f4c6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4c8:	d135      	bne.n	800f536 <_vfiprintf_r+0x1ce>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	1d1a      	adds	r2, r3, #4
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	9203      	str	r2, [sp, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	bfb8      	it	lt
 800f4d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4da:	3402      	adds	r4, #2
 800f4dc:	9305      	str	r3, [sp, #20]
 800f4de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5c4 <_vfiprintf_r+0x25c>
 800f4e2:	7821      	ldrb	r1, [r4, #0]
 800f4e4:	2203      	movs	r2, #3
 800f4e6:	4650      	mov	r0, sl
 800f4e8:	f7f0 fe82 	bl	80001f0 <memchr>
 800f4ec:	b140      	cbz	r0, 800f500 <_vfiprintf_r+0x198>
 800f4ee:	2340      	movs	r3, #64	; 0x40
 800f4f0:	eba0 000a 	sub.w	r0, r0, sl
 800f4f4:	fa03 f000 	lsl.w	r0, r3, r0
 800f4f8:	9b04      	ldr	r3, [sp, #16]
 800f4fa:	4303      	orrs	r3, r0
 800f4fc:	3401      	adds	r4, #1
 800f4fe:	9304      	str	r3, [sp, #16]
 800f500:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f504:	482c      	ldr	r0, [pc, #176]	; (800f5b8 <_vfiprintf_r+0x250>)
 800f506:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f50a:	2206      	movs	r2, #6
 800f50c:	f7f0 fe70 	bl	80001f0 <memchr>
 800f510:	2800      	cmp	r0, #0
 800f512:	d03f      	beq.n	800f594 <_vfiprintf_r+0x22c>
 800f514:	4b29      	ldr	r3, [pc, #164]	; (800f5bc <_vfiprintf_r+0x254>)
 800f516:	bb1b      	cbnz	r3, 800f560 <_vfiprintf_r+0x1f8>
 800f518:	9b03      	ldr	r3, [sp, #12]
 800f51a:	3307      	adds	r3, #7
 800f51c:	f023 0307 	bic.w	r3, r3, #7
 800f520:	3308      	adds	r3, #8
 800f522:	9303      	str	r3, [sp, #12]
 800f524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f526:	443b      	add	r3, r7
 800f528:	9309      	str	r3, [sp, #36]	; 0x24
 800f52a:	e767      	b.n	800f3fc <_vfiprintf_r+0x94>
 800f52c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f530:	460c      	mov	r4, r1
 800f532:	2001      	movs	r0, #1
 800f534:	e7a5      	b.n	800f482 <_vfiprintf_r+0x11a>
 800f536:	2300      	movs	r3, #0
 800f538:	3401      	adds	r4, #1
 800f53a:	9305      	str	r3, [sp, #20]
 800f53c:	4619      	mov	r1, r3
 800f53e:	f04f 0c0a 	mov.w	ip, #10
 800f542:	4620      	mov	r0, r4
 800f544:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f548:	3a30      	subs	r2, #48	; 0x30
 800f54a:	2a09      	cmp	r2, #9
 800f54c:	d903      	bls.n	800f556 <_vfiprintf_r+0x1ee>
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d0c5      	beq.n	800f4de <_vfiprintf_r+0x176>
 800f552:	9105      	str	r1, [sp, #20]
 800f554:	e7c3      	b.n	800f4de <_vfiprintf_r+0x176>
 800f556:	fb0c 2101 	mla	r1, ip, r1, r2
 800f55a:	4604      	mov	r4, r0
 800f55c:	2301      	movs	r3, #1
 800f55e:	e7f0      	b.n	800f542 <_vfiprintf_r+0x1da>
 800f560:	ab03      	add	r3, sp, #12
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	462a      	mov	r2, r5
 800f566:	4b16      	ldr	r3, [pc, #88]	; (800f5c0 <_vfiprintf_r+0x258>)
 800f568:	a904      	add	r1, sp, #16
 800f56a:	4630      	mov	r0, r6
 800f56c:	f7fc f84c 	bl	800b608 <_printf_float>
 800f570:	4607      	mov	r7, r0
 800f572:	1c78      	adds	r0, r7, #1
 800f574:	d1d6      	bne.n	800f524 <_vfiprintf_r+0x1bc>
 800f576:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f578:	07d9      	lsls	r1, r3, #31
 800f57a:	d405      	bmi.n	800f588 <_vfiprintf_r+0x220>
 800f57c:	89ab      	ldrh	r3, [r5, #12]
 800f57e:	059a      	lsls	r2, r3, #22
 800f580:	d402      	bmi.n	800f588 <_vfiprintf_r+0x220>
 800f582:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f584:	f000 faa1 	bl	800faca <__retarget_lock_release_recursive>
 800f588:	89ab      	ldrh	r3, [r5, #12]
 800f58a:	065b      	lsls	r3, r3, #25
 800f58c:	f53f af12 	bmi.w	800f3b4 <_vfiprintf_r+0x4c>
 800f590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f592:	e711      	b.n	800f3b8 <_vfiprintf_r+0x50>
 800f594:	ab03      	add	r3, sp, #12
 800f596:	9300      	str	r3, [sp, #0]
 800f598:	462a      	mov	r2, r5
 800f59a:	4b09      	ldr	r3, [pc, #36]	; (800f5c0 <_vfiprintf_r+0x258>)
 800f59c:	a904      	add	r1, sp, #16
 800f59e:	4630      	mov	r0, r6
 800f5a0:	f7fc fad6 	bl	800bb50 <_printf_i>
 800f5a4:	e7e4      	b.n	800f570 <_vfiprintf_r+0x208>
 800f5a6:	bf00      	nop
 800f5a8:	080104c4 	.word	0x080104c4
 800f5ac:	080104e4 	.word	0x080104e4
 800f5b0:	080104a4 	.word	0x080104a4
 800f5b4:	08010454 	.word	0x08010454
 800f5b8:	0801045e 	.word	0x0801045e
 800f5bc:	0800b609 	.word	0x0800b609
 800f5c0:	0800f345 	.word	0x0800f345
 800f5c4:	0801045a 	.word	0x0801045a

0800f5c8 <__swbuf_r>:
 800f5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ca:	460e      	mov	r6, r1
 800f5cc:	4614      	mov	r4, r2
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	b118      	cbz	r0, 800f5da <__swbuf_r+0x12>
 800f5d2:	6983      	ldr	r3, [r0, #24]
 800f5d4:	b90b      	cbnz	r3, 800f5da <__swbuf_r+0x12>
 800f5d6:	f000 f9d9 	bl	800f98c <__sinit>
 800f5da:	4b21      	ldr	r3, [pc, #132]	; (800f660 <__swbuf_r+0x98>)
 800f5dc:	429c      	cmp	r4, r3
 800f5de:	d12b      	bne.n	800f638 <__swbuf_r+0x70>
 800f5e0:	686c      	ldr	r4, [r5, #4]
 800f5e2:	69a3      	ldr	r3, [r4, #24]
 800f5e4:	60a3      	str	r3, [r4, #8]
 800f5e6:	89a3      	ldrh	r3, [r4, #12]
 800f5e8:	071a      	lsls	r2, r3, #28
 800f5ea:	d52f      	bpl.n	800f64c <__swbuf_r+0x84>
 800f5ec:	6923      	ldr	r3, [r4, #16]
 800f5ee:	b36b      	cbz	r3, 800f64c <__swbuf_r+0x84>
 800f5f0:	6923      	ldr	r3, [r4, #16]
 800f5f2:	6820      	ldr	r0, [r4, #0]
 800f5f4:	1ac0      	subs	r0, r0, r3
 800f5f6:	6963      	ldr	r3, [r4, #20]
 800f5f8:	b2f6      	uxtb	r6, r6
 800f5fa:	4283      	cmp	r3, r0
 800f5fc:	4637      	mov	r7, r6
 800f5fe:	dc04      	bgt.n	800f60a <__swbuf_r+0x42>
 800f600:	4621      	mov	r1, r4
 800f602:	4628      	mov	r0, r5
 800f604:	f000 f92e 	bl	800f864 <_fflush_r>
 800f608:	bb30      	cbnz	r0, 800f658 <__swbuf_r+0x90>
 800f60a:	68a3      	ldr	r3, [r4, #8]
 800f60c:	3b01      	subs	r3, #1
 800f60e:	60a3      	str	r3, [r4, #8]
 800f610:	6823      	ldr	r3, [r4, #0]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	6022      	str	r2, [r4, #0]
 800f616:	701e      	strb	r6, [r3, #0]
 800f618:	6963      	ldr	r3, [r4, #20]
 800f61a:	3001      	adds	r0, #1
 800f61c:	4283      	cmp	r3, r0
 800f61e:	d004      	beq.n	800f62a <__swbuf_r+0x62>
 800f620:	89a3      	ldrh	r3, [r4, #12]
 800f622:	07db      	lsls	r3, r3, #31
 800f624:	d506      	bpl.n	800f634 <__swbuf_r+0x6c>
 800f626:	2e0a      	cmp	r6, #10
 800f628:	d104      	bne.n	800f634 <__swbuf_r+0x6c>
 800f62a:	4621      	mov	r1, r4
 800f62c:	4628      	mov	r0, r5
 800f62e:	f000 f919 	bl	800f864 <_fflush_r>
 800f632:	b988      	cbnz	r0, 800f658 <__swbuf_r+0x90>
 800f634:	4638      	mov	r0, r7
 800f636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f638:	4b0a      	ldr	r3, [pc, #40]	; (800f664 <__swbuf_r+0x9c>)
 800f63a:	429c      	cmp	r4, r3
 800f63c:	d101      	bne.n	800f642 <__swbuf_r+0x7a>
 800f63e:	68ac      	ldr	r4, [r5, #8]
 800f640:	e7cf      	b.n	800f5e2 <__swbuf_r+0x1a>
 800f642:	4b09      	ldr	r3, [pc, #36]	; (800f668 <__swbuf_r+0xa0>)
 800f644:	429c      	cmp	r4, r3
 800f646:	bf08      	it	eq
 800f648:	68ec      	ldreq	r4, [r5, #12]
 800f64a:	e7ca      	b.n	800f5e2 <__swbuf_r+0x1a>
 800f64c:	4621      	mov	r1, r4
 800f64e:	4628      	mov	r0, r5
 800f650:	f000 f80c 	bl	800f66c <__swsetup_r>
 800f654:	2800      	cmp	r0, #0
 800f656:	d0cb      	beq.n	800f5f0 <__swbuf_r+0x28>
 800f658:	f04f 37ff 	mov.w	r7, #4294967295
 800f65c:	e7ea      	b.n	800f634 <__swbuf_r+0x6c>
 800f65e:	bf00      	nop
 800f660:	080104c4 	.word	0x080104c4
 800f664:	080104e4 	.word	0x080104e4
 800f668:	080104a4 	.word	0x080104a4

0800f66c <__swsetup_r>:
 800f66c:	4b32      	ldr	r3, [pc, #200]	; (800f738 <__swsetup_r+0xcc>)
 800f66e:	b570      	push	{r4, r5, r6, lr}
 800f670:	681d      	ldr	r5, [r3, #0]
 800f672:	4606      	mov	r6, r0
 800f674:	460c      	mov	r4, r1
 800f676:	b125      	cbz	r5, 800f682 <__swsetup_r+0x16>
 800f678:	69ab      	ldr	r3, [r5, #24]
 800f67a:	b913      	cbnz	r3, 800f682 <__swsetup_r+0x16>
 800f67c:	4628      	mov	r0, r5
 800f67e:	f000 f985 	bl	800f98c <__sinit>
 800f682:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <__swsetup_r+0xd0>)
 800f684:	429c      	cmp	r4, r3
 800f686:	d10f      	bne.n	800f6a8 <__swsetup_r+0x3c>
 800f688:	686c      	ldr	r4, [r5, #4]
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f690:	0719      	lsls	r1, r3, #28
 800f692:	d42c      	bmi.n	800f6ee <__swsetup_r+0x82>
 800f694:	06dd      	lsls	r5, r3, #27
 800f696:	d411      	bmi.n	800f6bc <__swsetup_r+0x50>
 800f698:	2309      	movs	r3, #9
 800f69a:	6033      	str	r3, [r6, #0]
 800f69c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f6a0:	81a3      	strh	r3, [r4, #12]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	e03e      	b.n	800f726 <__swsetup_r+0xba>
 800f6a8:	4b25      	ldr	r3, [pc, #148]	; (800f740 <__swsetup_r+0xd4>)
 800f6aa:	429c      	cmp	r4, r3
 800f6ac:	d101      	bne.n	800f6b2 <__swsetup_r+0x46>
 800f6ae:	68ac      	ldr	r4, [r5, #8]
 800f6b0:	e7eb      	b.n	800f68a <__swsetup_r+0x1e>
 800f6b2:	4b24      	ldr	r3, [pc, #144]	; (800f744 <__swsetup_r+0xd8>)
 800f6b4:	429c      	cmp	r4, r3
 800f6b6:	bf08      	it	eq
 800f6b8:	68ec      	ldreq	r4, [r5, #12]
 800f6ba:	e7e6      	b.n	800f68a <__swsetup_r+0x1e>
 800f6bc:	0758      	lsls	r0, r3, #29
 800f6be:	d512      	bpl.n	800f6e6 <__swsetup_r+0x7a>
 800f6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6c2:	b141      	cbz	r1, 800f6d6 <__swsetup_r+0x6a>
 800f6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6c8:	4299      	cmp	r1, r3
 800f6ca:	d002      	beq.n	800f6d2 <__swsetup_r+0x66>
 800f6cc:	4630      	mov	r0, r6
 800f6ce:	f7ff fb27 	bl	800ed20 <_free_r>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	6363      	str	r3, [r4, #52]	; 0x34
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6dc:	81a3      	strh	r3, [r4, #12]
 800f6de:	2300      	movs	r3, #0
 800f6e0:	6063      	str	r3, [r4, #4]
 800f6e2:	6923      	ldr	r3, [r4, #16]
 800f6e4:	6023      	str	r3, [r4, #0]
 800f6e6:	89a3      	ldrh	r3, [r4, #12]
 800f6e8:	f043 0308 	orr.w	r3, r3, #8
 800f6ec:	81a3      	strh	r3, [r4, #12]
 800f6ee:	6923      	ldr	r3, [r4, #16]
 800f6f0:	b94b      	cbnz	r3, 800f706 <__swsetup_r+0x9a>
 800f6f2:	89a3      	ldrh	r3, [r4, #12]
 800f6f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6fc:	d003      	beq.n	800f706 <__swsetup_r+0x9a>
 800f6fe:	4621      	mov	r1, r4
 800f700:	4630      	mov	r0, r6
 800f702:	f000 fa09 	bl	800fb18 <__smakebuf_r>
 800f706:	89a0      	ldrh	r0, [r4, #12]
 800f708:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f70c:	f010 0301 	ands.w	r3, r0, #1
 800f710:	d00a      	beq.n	800f728 <__swsetup_r+0xbc>
 800f712:	2300      	movs	r3, #0
 800f714:	60a3      	str	r3, [r4, #8]
 800f716:	6963      	ldr	r3, [r4, #20]
 800f718:	425b      	negs	r3, r3
 800f71a:	61a3      	str	r3, [r4, #24]
 800f71c:	6923      	ldr	r3, [r4, #16]
 800f71e:	b943      	cbnz	r3, 800f732 <__swsetup_r+0xc6>
 800f720:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f724:	d1ba      	bne.n	800f69c <__swsetup_r+0x30>
 800f726:	bd70      	pop	{r4, r5, r6, pc}
 800f728:	0781      	lsls	r1, r0, #30
 800f72a:	bf58      	it	pl
 800f72c:	6963      	ldrpl	r3, [r4, #20]
 800f72e:	60a3      	str	r3, [r4, #8]
 800f730:	e7f4      	b.n	800f71c <__swsetup_r+0xb0>
 800f732:	2000      	movs	r0, #0
 800f734:	e7f7      	b.n	800f726 <__swsetup_r+0xba>
 800f736:	bf00      	nop
 800f738:	20000228 	.word	0x20000228
 800f73c:	080104c4 	.word	0x080104c4
 800f740:	080104e4 	.word	0x080104e4
 800f744:	080104a4 	.word	0x080104a4

0800f748 <abort>:
 800f748:	b508      	push	{r3, lr}
 800f74a:	2006      	movs	r0, #6
 800f74c:	f000 fa54 	bl	800fbf8 <raise>
 800f750:	2001      	movs	r0, #1
 800f752:	f7f4 ff2d 	bl	80045b0 <_exit>
	...

0800f758 <__sflush_r>:
 800f758:	898a      	ldrh	r2, [r1, #12]
 800f75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f75e:	4605      	mov	r5, r0
 800f760:	0710      	lsls	r0, r2, #28
 800f762:	460c      	mov	r4, r1
 800f764:	d458      	bmi.n	800f818 <__sflush_r+0xc0>
 800f766:	684b      	ldr	r3, [r1, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	dc05      	bgt.n	800f778 <__sflush_r+0x20>
 800f76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f76e:	2b00      	cmp	r3, #0
 800f770:	dc02      	bgt.n	800f778 <__sflush_r+0x20>
 800f772:	2000      	movs	r0, #0
 800f774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f77a:	2e00      	cmp	r6, #0
 800f77c:	d0f9      	beq.n	800f772 <__sflush_r+0x1a>
 800f77e:	2300      	movs	r3, #0
 800f780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f784:	682f      	ldr	r7, [r5, #0]
 800f786:	602b      	str	r3, [r5, #0]
 800f788:	d032      	beq.n	800f7f0 <__sflush_r+0x98>
 800f78a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f78c:	89a3      	ldrh	r3, [r4, #12]
 800f78e:	075a      	lsls	r2, r3, #29
 800f790:	d505      	bpl.n	800f79e <__sflush_r+0x46>
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	1ac0      	subs	r0, r0, r3
 800f796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f798:	b10b      	cbz	r3, 800f79e <__sflush_r+0x46>
 800f79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f79c:	1ac0      	subs	r0, r0, r3
 800f79e:	2300      	movs	r3, #0
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7a4:	6a21      	ldr	r1, [r4, #32]
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	47b0      	blx	r6
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	d106      	bne.n	800f7be <__sflush_r+0x66>
 800f7b0:	6829      	ldr	r1, [r5, #0]
 800f7b2:	291d      	cmp	r1, #29
 800f7b4:	d82c      	bhi.n	800f810 <__sflush_r+0xb8>
 800f7b6:	4a2a      	ldr	r2, [pc, #168]	; (800f860 <__sflush_r+0x108>)
 800f7b8:	40ca      	lsrs	r2, r1
 800f7ba:	07d6      	lsls	r6, r2, #31
 800f7bc:	d528      	bpl.n	800f810 <__sflush_r+0xb8>
 800f7be:	2200      	movs	r2, #0
 800f7c0:	6062      	str	r2, [r4, #4]
 800f7c2:	04d9      	lsls	r1, r3, #19
 800f7c4:	6922      	ldr	r2, [r4, #16]
 800f7c6:	6022      	str	r2, [r4, #0]
 800f7c8:	d504      	bpl.n	800f7d4 <__sflush_r+0x7c>
 800f7ca:	1c42      	adds	r2, r0, #1
 800f7cc:	d101      	bne.n	800f7d2 <__sflush_r+0x7a>
 800f7ce:	682b      	ldr	r3, [r5, #0]
 800f7d0:	b903      	cbnz	r3, 800f7d4 <__sflush_r+0x7c>
 800f7d2:	6560      	str	r0, [r4, #84]	; 0x54
 800f7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7d6:	602f      	str	r7, [r5, #0]
 800f7d8:	2900      	cmp	r1, #0
 800f7da:	d0ca      	beq.n	800f772 <__sflush_r+0x1a>
 800f7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7e0:	4299      	cmp	r1, r3
 800f7e2:	d002      	beq.n	800f7ea <__sflush_r+0x92>
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	f7ff fa9b 	bl	800ed20 <_free_r>
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	6360      	str	r0, [r4, #52]	; 0x34
 800f7ee:	e7c1      	b.n	800f774 <__sflush_r+0x1c>
 800f7f0:	6a21      	ldr	r1, [r4, #32]
 800f7f2:	2301      	movs	r3, #1
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	47b0      	blx	r6
 800f7f8:	1c41      	adds	r1, r0, #1
 800f7fa:	d1c7      	bne.n	800f78c <__sflush_r+0x34>
 800f7fc:	682b      	ldr	r3, [r5, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d0c4      	beq.n	800f78c <__sflush_r+0x34>
 800f802:	2b1d      	cmp	r3, #29
 800f804:	d001      	beq.n	800f80a <__sflush_r+0xb2>
 800f806:	2b16      	cmp	r3, #22
 800f808:	d101      	bne.n	800f80e <__sflush_r+0xb6>
 800f80a:	602f      	str	r7, [r5, #0]
 800f80c:	e7b1      	b.n	800f772 <__sflush_r+0x1a>
 800f80e:	89a3      	ldrh	r3, [r4, #12]
 800f810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f814:	81a3      	strh	r3, [r4, #12]
 800f816:	e7ad      	b.n	800f774 <__sflush_r+0x1c>
 800f818:	690f      	ldr	r7, [r1, #16]
 800f81a:	2f00      	cmp	r7, #0
 800f81c:	d0a9      	beq.n	800f772 <__sflush_r+0x1a>
 800f81e:	0793      	lsls	r3, r2, #30
 800f820:	680e      	ldr	r6, [r1, #0]
 800f822:	bf08      	it	eq
 800f824:	694b      	ldreq	r3, [r1, #20]
 800f826:	600f      	str	r7, [r1, #0]
 800f828:	bf18      	it	ne
 800f82a:	2300      	movne	r3, #0
 800f82c:	eba6 0807 	sub.w	r8, r6, r7
 800f830:	608b      	str	r3, [r1, #8]
 800f832:	f1b8 0f00 	cmp.w	r8, #0
 800f836:	dd9c      	ble.n	800f772 <__sflush_r+0x1a>
 800f838:	6a21      	ldr	r1, [r4, #32]
 800f83a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f83c:	4643      	mov	r3, r8
 800f83e:	463a      	mov	r2, r7
 800f840:	4628      	mov	r0, r5
 800f842:	47b0      	blx	r6
 800f844:	2800      	cmp	r0, #0
 800f846:	dc06      	bgt.n	800f856 <__sflush_r+0xfe>
 800f848:	89a3      	ldrh	r3, [r4, #12]
 800f84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f84e:	81a3      	strh	r3, [r4, #12]
 800f850:	f04f 30ff 	mov.w	r0, #4294967295
 800f854:	e78e      	b.n	800f774 <__sflush_r+0x1c>
 800f856:	4407      	add	r7, r0
 800f858:	eba8 0800 	sub.w	r8, r8, r0
 800f85c:	e7e9      	b.n	800f832 <__sflush_r+0xda>
 800f85e:	bf00      	nop
 800f860:	20400001 	.word	0x20400001

0800f864 <_fflush_r>:
 800f864:	b538      	push	{r3, r4, r5, lr}
 800f866:	690b      	ldr	r3, [r1, #16]
 800f868:	4605      	mov	r5, r0
 800f86a:	460c      	mov	r4, r1
 800f86c:	b913      	cbnz	r3, 800f874 <_fflush_r+0x10>
 800f86e:	2500      	movs	r5, #0
 800f870:	4628      	mov	r0, r5
 800f872:	bd38      	pop	{r3, r4, r5, pc}
 800f874:	b118      	cbz	r0, 800f87e <_fflush_r+0x1a>
 800f876:	6983      	ldr	r3, [r0, #24]
 800f878:	b90b      	cbnz	r3, 800f87e <_fflush_r+0x1a>
 800f87a:	f000 f887 	bl	800f98c <__sinit>
 800f87e:	4b14      	ldr	r3, [pc, #80]	; (800f8d0 <_fflush_r+0x6c>)
 800f880:	429c      	cmp	r4, r3
 800f882:	d11b      	bne.n	800f8bc <_fflush_r+0x58>
 800f884:	686c      	ldr	r4, [r5, #4]
 800f886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d0ef      	beq.n	800f86e <_fflush_r+0xa>
 800f88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f890:	07d0      	lsls	r0, r2, #31
 800f892:	d404      	bmi.n	800f89e <_fflush_r+0x3a>
 800f894:	0599      	lsls	r1, r3, #22
 800f896:	d402      	bmi.n	800f89e <_fflush_r+0x3a>
 800f898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f89a:	f000 f915 	bl	800fac8 <__retarget_lock_acquire_recursive>
 800f89e:	4628      	mov	r0, r5
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	f7ff ff59 	bl	800f758 <__sflush_r>
 800f8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8a8:	07da      	lsls	r2, r3, #31
 800f8aa:	4605      	mov	r5, r0
 800f8ac:	d4e0      	bmi.n	800f870 <_fflush_r+0xc>
 800f8ae:	89a3      	ldrh	r3, [r4, #12]
 800f8b0:	059b      	lsls	r3, r3, #22
 800f8b2:	d4dd      	bmi.n	800f870 <_fflush_r+0xc>
 800f8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8b6:	f000 f908 	bl	800faca <__retarget_lock_release_recursive>
 800f8ba:	e7d9      	b.n	800f870 <_fflush_r+0xc>
 800f8bc:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <_fflush_r+0x70>)
 800f8be:	429c      	cmp	r4, r3
 800f8c0:	d101      	bne.n	800f8c6 <_fflush_r+0x62>
 800f8c2:	68ac      	ldr	r4, [r5, #8]
 800f8c4:	e7df      	b.n	800f886 <_fflush_r+0x22>
 800f8c6:	4b04      	ldr	r3, [pc, #16]	; (800f8d8 <_fflush_r+0x74>)
 800f8c8:	429c      	cmp	r4, r3
 800f8ca:	bf08      	it	eq
 800f8cc:	68ec      	ldreq	r4, [r5, #12]
 800f8ce:	e7da      	b.n	800f886 <_fflush_r+0x22>
 800f8d0:	080104c4 	.word	0x080104c4
 800f8d4:	080104e4 	.word	0x080104e4
 800f8d8:	080104a4 	.word	0x080104a4

0800f8dc <std>:
 800f8dc:	2300      	movs	r3, #0
 800f8de:	b510      	push	{r4, lr}
 800f8e0:	4604      	mov	r4, r0
 800f8e2:	e9c0 3300 	strd	r3, r3, [r0]
 800f8e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8ea:	6083      	str	r3, [r0, #8]
 800f8ec:	8181      	strh	r1, [r0, #12]
 800f8ee:	6643      	str	r3, [r0, #100]	; 0x64
 800f8f0:	81c2      	strh	r2, [r0, #14]
 800f8f2:	6183      	str	r3, [r0, #24]
 800f8f4:	4619      	mov	r1, r3
 800f8f6:	2208      	movs	r2, #8
 800f8f8:	305c      	adds	r0, #92	; 0x5c
 800f8fa:	f7fb fddd 	bl	800b4b8 <memset>
 800f8fe:	4b05      	ldr	r3, [pc, #20]	; (800f914 <std+0x38>)
 800f900:	6263      	str	r3, [r4, #36]	; 0x24
 800f902:	4b05      	ldr	r3, [pc, #20]	; (800f918 <std+0x3c>)
 800f904:	62a3      	str	r3, [r4, #40]	; 0x28
 800f906:	4b05      	ldr	r3, [pc, #20]	; (800f91c <std+0x40>)
 800f908:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f90a:	4b05      	ldr	r3, [pc, #20]	; (800f920 <std+0x44>)
 800f90c:	6224      	str	r4, [r4, #32]
 800f90e:	6323      	str	r3, [r4, #48]	; 0x30
 800f910:	bd10      	pop	{r4, pc}
 800f912:	bf00      	nop
 800f914:	0800fc31 	.word	0x0800fc31
 800f918:	0800fc53 	.word	0x0800fc53
 800f91c:	0800fc8b 	.word	0x0800fc8b
 800f920:	0800fcaf 	.word	0x0800fcaf

0800f924 <_cleanup_r>:
 800f924:	4901      	ldr	r1, [pc, #4]	; (800f92c <_cleanup_r+0x8>)
 800f926:	f000 b8af 	b.w	800fa88 <_fwalk_reent>
 800f92a:	bf00      	nop
 800f92c:	0800f865 	.word	0x0800f865

0800f930 <__sfmoreglue>:
 800f930:	b570      	push	{r4, r5, r6, lr}
 800f932:	2268      	movs	r2, #104	; 0x68
 800f934:	1e4d      	subs	r5, r1, #1
 800f936:	4355      	muls	r5, r2
 800f938:	460e      	mov	r6, r1
 800f93a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f93e:	f7ff fa5b 	bl	800edf8 <_malloc_r>
 800f942:	4604      	mov	r4, r0
 800f944:	b140      	cbz	r0, 800f958 <__sfmoreglue+0x28>
 800f946:	2100      	movs	r1, #0
 800f948:	e9c0 1600 	strd	r1, r6, [r0]
 800f94c:	300c      	adds	r0, #12
 800f94e:	60a0      	str	r0, [r4, #8]
 800f950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f954:	f7fb fdb0 	bl	800b4b8 <memset>
 800f958:	4620      	mov	r0, r4
 800f95a:	bd70      	pop	{r4, r5, r6, pc}

0800f95c <__sfp_lock_acquire>:
 800f95c:	4801      	ldr	r0, [pc, #4]	; (800f964 <__sfp_lock_acquire+0x8>)
 800f95e:	f000 b8b3 	b.w	800fac8 <__retarget_lock_acquire_recursive>
 800f962:	bf00      	nop
 800f964:	200010c1 	.word	0x200010c1

0800f968 <__sfp_lock_release>:
 800f968:	4801      	ldr	r0, [pc, #4]	; (800f970 <__sfp_lock_release+0x8>)
 800f96a:	f000 b8ae 	b.w	800faca <__retarget_lock_release_recursive>
 800f96e:	bf00      	nop
 800f970:	200010c1 	.word	0x200010c1

0800f974 <__sinit_lock_acquire>:
 800f974:	4801      	ldr	r0, [pc, #4]	; (800f97c <__sinit_lock_acquire+0x8>)
 800f976:	f000 b8a7 	b.w	800fac8 <__retarget_lock_acquire_recursive>
 800f97a:	bf00      	nop
 800f97c:	200010c2 	.word	0x200010c2

0800f980 <__sinit_lock_release>:
 800f980:	4801      	ldr	r0, [pc, #4]	; (800f988 <__sinit_lock_release+0x8>)
 800f982:	f000 b8a2 	b.w	800faca <__retarget_lock_release_recursive>
 800f986:	bf00      	nop
 800f988:	200010c2 	.word	0x200010c2

0800f98c <__sinit>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	4604      	mov	r4, r0
 800f990:	f7ff fff0 	bl	800f974 <__sinit_lock_acquire>
 800f994:	69a3      	ldr	r3, [r4, #24]
 800f996:	b11b      	cbz	r3, 800f9a0 <__sinit+0x14>
 800f998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f99c:	f7ff bff0 	b.w	800f980 <__sinit_lock_release>
 800f9a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9a4:	6523      	str	r3, [r4, #80]	; 0x50
 800f9a6:	4b13      	ldr	r3, [pc, #76]	; (800f9f4 <__sinit+0x68>)
 800f9a8:	4a13      	ldr	r2, [pc, #76]	; (800f9f8 <__sinit+0x6c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9ae:	42a3      	cmp	r3, r4
 800f9b0:	bf04      	itt	eq
 800f9b2:	2301      	moveq	r3, #1
 800f9b4:	61a3      	streq	r3, [r4, #24]
 800f9b6:	4620      	mov	r0, r4
 800f9b8:	f000 f820 	bl	800f9fc <__sfp>
 800f9bc:	6060      	str	r0, [r4, #4]
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f000 f81c 	bl	800f9fc <__sfp>
 800f9c4:	60a0      	str	r0, [r4, #8]
 800f9c6:	4620      	mov	r0, r4
 800f9c8:	f000 f818 	bl	800f9fc <__sfp>
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	60e0      	str	r0, [r4, #12]
 800f9d0:	2104      	movs	r1, #4
 800f9d2:	6860      	ldr	r0, [r4, #4]
 800f9d4:	f7ff ff82 	bl	800f8dc <std>
 800f9d8:	68a0      	ldr	r0, [r4, #8]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	2109      	movs	r1, #9
 800f9de:	f7ff ff7d 	bl	800f8dc <std>
 800f9e2:	68e0      	ldr	r0, [r4, #12]
 800f9e4:	2202      	movs	r2, #2
 800f9e6:	2112      	movs	r1, #18
 800f9e8:	f7ff ff78 	bl	800f8dc <std>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	61a3      	str	r3, [r4, #24]
 800f9f0:	e7d2      	b.n	800f998 <__sinit+0xc>
 800f9f2:	bf00      	nop
 800f9f4:	08010060 	.word	0x08010060
 800f9f8:	0800f925 	.word	0x0800f925

0800f9fc <__sfp>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	4607      	mov	r7, r0
 800fa00:	f7ff ffac 	bl	800f95c <__sfp_lock_acquire>
 800fa04:	4b1e      	ldr	r3, [pc, #120]	; (800fa80 <__sfp+0x84>)
 800fa06:	681e      	ldr	r6, [r3, #0]
 800fa08:	69b3      	ldr	r3, [r6, #24]
 800fa0a:	b913      	cbnz	r3, 800fa12 <__sfp+0x16>
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f7ff ffbd 	bl	800f98c <__sinit>
 800fa12:	3648      	adds	r6, #72	; 0x48
 800fa14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	d503      	bpl.n	800fa24 <__sfp+0x28>
 800fa1c:	6833      	ldr	r3, [r6, #0]
 800fa1e:	b30b      	cbz	r3, 800fa64 <__sfp+0x68>
 800fa20:	6836      	ldr	r6, [r6, #0]
 800fa22:	e7f7      	b.n	800fa14 <__sfp+0x18>
 800fa24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa28:	b9d5      	cbnz	r5, 800fa60 <__sfp+0x64>
 800fa2a:	4b16      	ldr	r3, [pc, #88]	; (800fa84 <__sfp+0x88>)
 800fa2c:	60e3      	str	r3, [r4, #12]
 800fa2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa32:	6665      	str	r5, [r4, #100]	; 0x64
 800fa34:	f000 f847 	bl	800fac6 <__retarget_lock_init_recursive>
 800fa38:	f7ff ff96 	bl	800f968 <__sfp_lock_release>
 800fa3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa44:	6025      	str	r5, [r4, #0]
 800fa46:	61a5      	str	r5, [r4, #24]
 800fa48:	2208      	movs	r2, #8
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa50:	f7fb fd32 	bl	800b4b8 <memset>
 800fa54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa60:	3468      	adds	r4, #104	; 0x68
 800fa62:	e7d9      	b.n	800fa18 <__sfp+0x1c>
 800fa64:	2104      	movs	r1, #4
 800fa66:	4638      	mov	r0, r7
 800fa68:	f7ff ff62 	bl	800f930 <__sfmoreglue>
 800fa6c:	4604      	mov	r4, r0
 800fa6e:	6030      	str	r0, [r6, #0]
 800fa70:	2800      	cmp	r0, #0
 800fa72:	d1d5      	bne.n	800fa20 <__sfp+0x24>
 800fa74:	f7ff ff78 	bl	800f968 <__sfp_lock_release>
 800fa78:	230c      	movs	r3, #12
 800fa7a:	603b      	str	r3, [r7, #0]
 800fa7c:	e7ee      	b.n	800fa5c <__sfp+0x60>
 800fa7e:	bf00      	nop
 800fa80:	08010060 	.word	0x08010060
 800fa84:	ffff0001 	.word	0xffff0001

0800fa88 <_fwalk_reent>:
 800fa88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa8c:	4606      	mov	r6, r0
 800fa8e:	4688      	mov	r8, r1
 800fa90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa94:	2700      	movs	r7, #0
 800fa96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa9a:	f1b9 0901 	subs.w	r9, r9, #1
 800fa9e:	d505      	bpl.n	800faac <_fwalk_reent+0x24>
 800faa0:	6824      	ldr	r4, [r4, #0]
 800faa2:	2c00      	cmp	r4, #0
 800faa4:	d1f7      	bne.n	800fa96 <_fwalk_reent+0xe>
 800faa6:	4638      	mov	r0, r7
 800faa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faac:	89ab      	ldrh	r3, [r5, #12]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d907      	bls.n	800fac2 <_fwalk_reent+0x3a>
 800fab2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fab6:	3301      	adds	r3, #1
 800fab8:	d003      	beq.n	800fac2 <_fwalk_reent+0x3a>
 800faba:	4629      	mov	r1, r5
 800fabc:	4630      	mov	r0, r6
 800fabe:	47c0      	blx	r8
 800fac0:	4307      	orrs	r7, r0
 800fac2:	3568      	adds	r5, #104	; 0x68
 800fac4:	e7e9      	b.n	800fa9a <_fwalk_reent+0x12>

0800fac6 <__retarget_lock_init_recursive>:
 800fac6:	4770      	bx	lr

0800fac8 <__retarget_lock_acquire_recursive>:
 800fac8:	4770      	bx	lr

0800faca <__retarget_lock_release_recursive>:
 800faca:	4770      	bx	lr

0800facc <__swhatbuf_r>:
 800facc:	b570      	push	{r4, r5, r6, lr}
 800face:	460e      	mov	r6, r1
 800fad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad4:	2900      	cmp	r1, #0
 800fad6:	b096      	sub	sp, #88	; 0x58
 800fad8:	4614      	mov	r4, r2
 800fada:	461d      	mov	r5, r3
 800fadc:	da08      	bge.n	800faf0 <__swhatbuf_r+0x24>
 800fade:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fae2:	2200      	movs	r2, #0
 800fae4:	602a      	str	r2, [r5, #0]
 800fae6:	061a      	lsls	r2, r3, #24
 800fae8:	d410      	bmi.n	800fb0c <__swhatbuf_r+0x40>
 800faea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faee:	e00e      	b.n	800fb0e <__swhatbuf_r+0x42>
 800faf0:	466a      	mov	r2, sp
 800faf2:	f000 f903 	bl	800fcfc <_fstat_r>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	dbf1      	blt.n	800fade <__swhatbuf_r+0x12>
 800fafa:	9a01      	ldr	r2, [sp, #4]
 800fafc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb04:	425a      	negs	r2, r3
 800fb06:	415a      	adcs	r2, r3
 800fb08:	602a      	str	r2, [r5, #0]
 800fb0a:	e7ee      	b.n	800faea <__swhatbuf_r+0x1e>
 800fb0c:	2340      	movs	r3, #64	; 0x40
 800fb0e:	2000      	movs	r0, #0
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	b016      	add	sp, #88	; 0x58
 800fb14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb18 <__smakebuf_r>:
 800fb18:	898b      	ldrh	r3, [r1, #12]
 800fb1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb1c:	079d      	lsls	r5, r3, #30
 800fb1e:	4606      	mov	r6, r0
 800fb20:	460c      	mov	r4, r1
 800fb22:	d507      	bpl.n	800fb34 <__smakebuf_r+0x1c>
 800fb24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	6123      	str	r3, [r4, #16]
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	6163      	str	r3, [r4, #20]
 800fb30:	b002      	add	sp, #8
 800fb32:	bd70      	pop	{r4, r5, r6, pc}
 800fb34:	ab01      	add	r3, sp, #4
 800fb36:	466a      	mov	r2, sp
 800fb38:	f7ff ffc8 	bl	800facc <__swhatbuf_r>
 800fb3c:	9900      	ldr	r1, [sp, #0]
 800fb3e:	4605      	mov	r5, r0
 800fb40:	4630      	mov	r0, r6
 800fb42:	f7ff f959 	bl	800edf8 <_malloc_r>
 800fb46:	b948      	cbnz	r0, 800fb5c <__smakebuf_r+0x44>
 800fb48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb4c:	059a      	lsls	r2, r3, #22
 800fb4e:	d4ef      	bmi.n	800fb30 <__smakebuf_r+0x18>
 800fb50:	f023 0303 	bic.w	r3, r3, #3
 800fb54:	f043 0302 	orr.w	r3, r3, #2
 800fb58:	81a3      	strh	r3, [r4, #12]
 800fb5a:	e7e3      	b.n	800fb24 <__smakebuf_r+0xc>
 800fb5c:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <__smakebuf_r+0x7c>)
 800fb5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb60:	89a3      	ldrh	r3, [r4, #12]
 800fb62:	6020      	str	r0, [r4, #0]
 800fb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb68:	81a3      	strh	r3, [r4, #12]
 800fb6a:	9b00      	ldr	r3, [sp, #0]
 800fb6c:	6163      	str	r3, [r4, #20]
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	6120      	str	r0, [r4, #16]
 800fb72:	b15b      	cbz	r3, 800fb8c <__smakebuf_r+0x74>
 800fb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f000 f8d1 	bl	800fd20 <_isatty_r>
 800fb7e:	b128      	cbz	r0, 800fb8c <__smakebuf_r+0x74>
 800fb80:	89a3      	ldrh	r3, [r4, #12]
 800fb82:	f023 0303 	bic.w	r3, r3, #3
 800fb86:	f043 0301 	orr.w	r3, r3, #1
 800fb8a:	81a3      	strh	r3, [r4, #12]
 800fb8c:	89a0      	ldrh	r0, [r4, #12]
 800fb8e:	4305      	orrs	r5, r0
 800fb90:	81a5      	strh	r5, [r4, #12]
 800fb92:	e7cd      	b.n	800fb30 <__smakebuf_r+0x18>
 800fb94:	0800f925 	.word	0x0800f925

0800fb98 <_malloc_usable_size_r>:
 800fb98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb9c:	1f18      	subs	r0, r3, #4
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	bfbc      	itt	lt
 800fba2:	580b      	ldrlt	r3, [r1, r0]
 800fba4:	18c0      	addlt	r0, r0, r3
 800fba6:	4770      	bx	lr

0800fba8 <_raise_r>:
 800fba8:	291f      	cmp	r1, #31
 800fbaa:	b538      	push	{r3, r4, r5, lr}
 800fbac:	4604      	mov	r4, r0
 800fbae:	460d      	mov	r5, r1
 800fbb0:	d904      	bls.n	800fbbc <_raise_r+0x14>
 800fbb2:	2316      	movs	r3, #22
 800fbb4:	6003      	str	r3, [r0, #0]
 800fbb6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fbbe:	b112      	cbz	r2, 800fbc6 <_raise_r+0x1e>
 800fbc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbc4:	b94b      	cbnz	r3, 800fbda <_raise_r+0x32>
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 f830 	bl	800fc2c <_getpid_r>
 800fbcc:	462a      	mov	r2, r5
 800fbce:	4601      	mov	r1, r0
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbd6:	f000 b817 	b.w	800fc08 <_kill_r>
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d00a      	beq.n	800fbf4 <_raise_r+0x4c>
 800fbde:	1c59      	adds	r1, r3, #1
 800fbe0:	d103      	bne.n	800fbea <_raise_r+0x42>
 800fbe2:	2316      	movs	r3, #22
 800fbe4:	6003      	str	r3, [r0, #0]
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	e7e7      	b.n	800fbba <_raise_r+0x12>
 800fbea:	2400      	movs	r4, #0
 800fbec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	4798      	blx	r3
 800fbf4:	2000      	movs	r0, #0
 800fbf6:	e7e0      	b.n	800fbba <_raise_r+0x12>

0800fbf8 <raise>:
 800fbf8:	4b02      	ldr	r3, [pc, #8]	; (800fc04 <raise+0xc>)
 800fbfa:	4601      	mov	r1, r0
 800fbfc:	6818      	ldr	r0, [r3, #0]
 800fbfe:	f7ff bfd3 	b.w	800fba8 <_raise_r>
 800fc02:	bf00      	nop
 800fc04:	20000228 	.word	0x20000228

0800fc08 <_kill_r>:
 800fc08:	b538      	push	{r3, r4, r5, lr}
 800fc0a:	4d07      	ldr	r5, [pc, #28]	; (800fc28 <_kill_r+0x20>)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	4608      	mov	r0, r1
 800fc12:	4611      	mov	r1, r2
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	f7f4 fcbb 	bl	8004590 <_kill>
 800fc1a:	1c43      	adds	r3, r0, #1
 800fc1c:	d102      	bne.n	800fc24 <_kill_r+0x1c>
 800fc1e:	682b      	ldr	r3, [r5, #0]
 800fc20:	b103      	cbz	r3, 800fc24 <_kill_r+0x1c>
 800fc22:	6023      	str	r3, [r4, #0]
 800fc24:	bd38      	pop	{r3, r4, r5, pc}
 800fc26:	bf00      	nop
 800fc28:	200010bc 	.word	0x200010bc

0800fc2c <_getpid_r>:
 800fc2c:	f7f4 bca8 	b.w	8004580 <_getpid>

0800fc30 <__sread>:
 800fc30:	b510      	push	{r4, lr}
 800fc32:	460c      	mov	r4, r1
 800fc34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc38:	f000 f894 	bl	800fd64 <_read_r>
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	bfab      	itete	ge
 800fc40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc42:	89a3      	ldrhlt	r3, [r4, #12]
 800fc44:	181b      	addge	r3, r3, r0
 800fc46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc4a:	bfac      	ite	ge
 800fc4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc4e:	81a3      	strhlt	r3, [r4, #12]
 800fc50:	bd10      	pop	{r4, pc}

0800fc52 <__swrite>:
 800fc52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc56:	461f      	mov	r7, r3
 800fc58:	898b      	ldrh	r3, [r1, #12]
 800fc5a:	05db      	lsls	r3, r3, #23
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	460c      	mov	r4, r1
 800fc60:	4616      	mov	r6, r2
 800fc62:	d505      	bpl.n	800fc70 <__swrite+0x1e>
 800fc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc68:	2302      	movs	r3, #2
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f000 f868 	bl	800fd40 <_lseek_r>
 800fc70:	89a3      	ldrh	r3, [r4, #12]
 800fc72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc7a:	81a3      	strh	r3, [r4, #12]
 800fc7c:	4632      	mov	r2, r6
 800fc7e:	463b      	mov	r3, r7
 800fc80:	4628      	mov	r0, r5
 800fc82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc86:	f000 b817 	b.w	800fcb8 <_write_r>

0800fc8a <__sseek>:
 800fc8a:	b510      	push	{r4, lr}
 800fc8c:	460c      	mov	r4, r1
 800fc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc92:	f000 f855 	bl	800fd40 <_lseek_r>
 800fc96:	1c43      	adds	r3, r0, #1
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	bf15      	itete	ne
 800fc9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fca2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fca6:	81a3      	strheq	r3, [r4, #12]
 800fca8:	bf18      	it	ne
 800fcaa:	81a3      	strhne	r3, [r4, #12]
 800fcac:	bd10      	pop	{r4, pc}

0800fcae <__sclose>:
 800fcae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb2:	f000 b813 	b.w	800fcdc <_close_r>
	...

0800fcb8 <_write_r>:
 800fcb8:	b538      	push	{r3, r4, r5, lr}
 800fcba:	4d07      	ldr	r5, [pc, #28]	; (800fcd8 <_write_r+0x20>)
 800fcbc:	4604      	mov	r4, r0
 800fcbe:	4608      	mov	r0, r1
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	602a      	str	r2, [r5, #0]
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	f7f4 fc99 	bl	80045fe <_write>
 800fccc:	1c43      	adds	r3, r0, #1
 800fcce:	d102      	bne.n	800fcd6 <_write_r+0x1e>
 800fcd0:	682b      	ldr	r3, [r5, #0]
 800fcd2:	b103      	cbz	r3, 800fcd6 <_write_r+0x1e>
 800fcd4:	6023      	str	r3, [r4, #0]
 800fcd6:	bd38      	pop	{r3, r4, r5, pc}
 800fcd8:	200010bc 	.word	0x200010bc

0800fcdc <_close_r>:
 800fcdc:	b538      	push	{r3, r4, r5, lr}
 800fcde:	4d06      	ldr	r5, [pc, #24]	; (800fcf8 <_close_r+0x1c>)
 800fce0:	2300      	movs	r3, #0
 800fce2:	4604      	mov	r4, r0
 800fce4:	4608      	mov	r0, r1
 800fce6:	602b      	str	r3, [r5, #0]
 800fce8:	f7f4 fca5 	bl	8004636 <_close>
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	d102      	bne.n	800fcf6 <_close_r+0x1a>
 800fcf0:	682b      	ldr	r3, [r5, #0]
 800fcf2:	b103      	cbz	r3, 800fcf6 <_close_r+0x1a>
 800fcf4:	6023      	str	r3, [r4, #0]
 800fcf6:	bd38      	pop	{r3, r4, r5, pc}
 800fcf8:	200010bc 	.word	0x200010bc

0800fcfc <_fstat_r>:
 800fcfc:	b538      	push	{r3, r4, r5, lr}
 800fcfe:	4d07      	ldr	r5, [pc, #28]	; (800fd1c <_fstat_r+0x20>)
 800fd00:	2300      	movs	r3, #0
 800fd02:	4604      	mov	r4, r0
 800fd04:	4608      	mov	r0, r1
 800fd06:	4611      	mov	r1, r2
 800fd08:	602b      	str	r3, [r5, #0]
 800fd0a:	f7f4 fca0 	bl	800464e <_fstat>
 800fd0e:	1c43      	adds	r3, r0, #1
 800fd10:	d102      	bne.n	800fd18 <_fstat_r+0x1c>
 800fd12:	682b      	ldr	r3, [r5, #0]
 800fd14:	b103      	cbz	r3, 800fd18 <_fstat_r+0x1c>
 800fd16:	6023      	str	r3, [r4, #0]
 800fd18:	bd38      	pop	{r3, r4, r5, pc}
 800fd1a:	bf00      	nop
 800fd1c:	200010bc 	.word	0x200010bc

0800fd20 <_isatty_r>:
 800fd20:	b538      	push	{r3, r4, r5, lr}
 800fd22:	4d06      	ldr	r5, [pc, #24]	; (800fd3c <_isatty_r+0x1c>)
 800fd24:	2300      	movs	r3, #0
 800fd26:	4604      	mov	r4, r0
 800fd28:	4608      	mov	r0, r1
 800fd2a:	602b      	str	r3, [r5, #0]
 800fd2c:	f7f4 fc9f 	bl	800466e <_isatty>
 800fd30:	1c43      	adds	r3, r0, #1
 800fd32:	d102      	bne.n	800fd3a <_isatty_r+0x1a>
 800fd34:	682b      	ldr	r3, [r5, #0]
 800fd36:	b103      	cbz	r3, 800fd3a <_isatty_r+0x1a>
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	bd38      	pop	{r3, r4, r5, pc}
 800fd3c:	200010bc 	.word	0x200010bc

0800fd40 <_lseek_r>:
 800fd40:	b538      	push	{r3, r4, r5, lr}
 800fd42:	4d07      	ldr	r5, [pc, #28]	; (800fd60 <_lseek_r+0x20>)
 800fd44:	4604      	mov	r4, r0
 800fd46:	4608      	mov	r0, r1
 800fd48:	4611      	mov	r1, r2
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	602a      	str	r2, [r5, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	f7f4 fc98 	bl	8004684 <_lseek>
 800fd54:	1c43      	adds	r3, r0, #1
 800fd56:	d102      	bne.n	800fd5e <_lseek_r+0x1e>
 800fd58:	682b      	ldr	r3, [r5, #0]
 800fd5a:	b103      	cbz	r3, 800fd5e <_lseek_r+0x1e>
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	bd38      	pop	{r3, r4, r5, pc}
 800fd60:	200010bc 	.word	0x200010bc

0800fd64 <_read_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4d07      	ldr	r5, [pc, #28]	; (800fd84 <_read_r+0x20>)
 800fd68:	4604      	mov	r4, r0
 800fd6a:	4608      	mov	r0, r1
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	2200      	movs	r2, #0
 800fd70:	602a      	str	r2, [r5, #0]
 800fd72:	461a      	mov	r2, r3
 800fd74:	f7f4 fc26 	bl	80045c4 <_read>
 800fd78:	1c43      	adds	r3, r0, #1
 800fd7a:	d102      	bne.n	800fd82 <_read_r+0x1e>
 800fd7c:	682b      	ldr	r3, [r5, #0]
 800fd7e:	b103      	cbz	r3, 800fd82 <_read_r+0x1e>
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	bd38      	pop	{r3, r4, r5, pc}
 800fd84:	200010bc 	.word	0x200010bc

0800fd88 <acosf>:
 800fd88:	b508      	push	{r3, lr}
 800fd8a:	ed2d 8b02 	vpush	{d8}
 800fd8e:	eeb0 8a40 	vmov.f32	s16, s0
 800fd92:	f000 f843 	bl	800fe1c <__ieee754_acosf>
 800fd96:	eeb4 8a48 	vcmp.f32	s16, s16
 800fd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9e:	eef0 8a40 	vmov.f32	s17, s0
 800fda2:	d615      	bvs.n	800fdd0 <acosf+0x48>
 800fda4:	eeb0 0a48 	vmov.f32	s0, s16
 800fda8:	f000 f933 	bl	8010012 <fabsf>
 800fdac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fdb0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fdb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb8:	dd0a      	ble.n	800fdd0 <acosf+0x48>
 800fdba:	f7fb fb45 	bl	800b448 <__errno>
 800fdbe:	ecbd 8b02 	vpop	{d8}
 800fdc2:	2321      	movs	r3, #33	; 0x21
 800fdc4:	6003      	str	r3, [r0, #0]
 800fdc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fdca:	4804      	ldr	r0, [pc, #16]	; (800fddc <acosf+0x54>)
 800fdcc:	f7fc b9f6 	b.w	800c1bc <nanf>
 800fdd0:	eeb0 0a68 	vmov.f32	s0, s17
 800fdd4:	ecbd 8b02 	vpop	{d8}
 800fdd8:	bd08      	pop	{r3, pc}
 800fdda:	bf00      	nop
 800fddc:	080104a0 	.word	0x080104a0

0800fde0 <sqrtf>:
 800fde0:	b508      	push	{r3, lr}
 800fde2:	ed2d 8b02 	vpush	{d8}
 800fde6:	eeb0 8a40 	vmov.f32	s16, s0
 800fdea:	f000 f90f 	bl	801000c <__ieee754_sqrtf>
 800fdee:	eeb4 8a48 	vcmp.f32	s16, s16
 800fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf6:	d60c      	bvs.n	800fe12 <sqrtf+0x32>
 800fdf8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800fe18 <sqrtf+0x38>
 800fdfc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fe00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe04:	d505      	bpl.n	800fe12 <sqrtf+0x32>
 800fe06:	f7fb fb1f 	bl	800b448 <__errno>
 800fe0a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fe0e:	2321      	movs	r3, #33	; 0x21
 800fe10:	6003      	str	r3, [r0, #0]
 800fe12:	ecbd 8b02 	vpop	{d8}
 800fe16:	bd08      	pop	{r3, pc}
 800fe18:	00000000 	.word	0x00000000

0800fe1c <__ieee754_acosf>:
 800fe1c:	b508      	push	{r3, lr}
 800fe1e:	ee10 3a10 	vmov	r3, s0
 800fe22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fe26:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800fe2a:	ed2d 8b0c 	vpush	{d8-d13}
 800fe2e:	d10a      	bne.n	800fe46 <__ieee754_acosf+0x2a>
 800fe30:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800ffc8 <__ieee754_acosf+0x1ac>
 800fe34:	ed9f 8a65 	vldr	s16, [pc, #404]	; 800ffcc <__ieee754_acosf+0x1b0>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	bfd8      	it	le
 800fe3c:	eeb0 0a48 	vmovle.f32	s0, s16
 800fe40:	ecbd 8b0c 	vpop	{d8-d13}
 800fe44:	bd08      	pop	{r3, pc}
 800fe46:	dd04      	ble.n	800fe52 <__ieee754_acosf+0x36>
 800fe48:	ee30 8a40 	vsub.f32	s16, s0, s0
 800fe4c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800fe50:	e7f6      	b.n	800fe40 <__ieee754_acosf+0x24>
 800fe52:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800fe56:	da3c      	bge.n	800fed2 <__ieee754_acosf+0xb6>
 800fe58:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800fe5c:	f340 80b1 	ble.w	800ffc2 <__ieee754_acosf+0x1a6>
 800fe60:	ee60 7a00 	vmul.f32	s15, s0, s0
 800fe64:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800ffd0 <__ieee754_acosf+0x1b4>
 800fe68:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800ffd4 <__ieee754_acosf+0x1b8>
 800fe6c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800ffd8 <__ieee754_acosf+0x1bc>
 800fe70:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 800ffdc <__ieee754_acosf+0x1c0>
 800fe74:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fe78:	eddf 6a59 	vldr	s13, [pc, #356]	; 800ffe0 <__ieee754_acosf+0x1c4>
 800fe7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fe80:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800ffe4 <__ieee754_acosf+0x1c8>
 800fe84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fe88:	eddf 6a57 	vldr	s13, [pc, #348]	; 800ffe8 <__ieee754_acosf+0x1cc>
 800fe8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fe90:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800ffec <__ieee754_acosf+0x1d0>
 800fe94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800fe98:	eddf 6a55 	vldr	s13, [pc, #340]	; 800fff0 <__ieee754_acosf+0x1d4>
 800fe9c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800fea0:	eddf 6a54 	vldr	s13, [pc, #336]	; 800fff4 <__ieee754_acosf+0x1d8>
 800fea4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800fea8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800fff8 <__ieee754_acosf+0x1dc>
 800feac:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800feb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feb4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800feb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800febc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fec0:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fec4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fffc <__ieee754_acosf+0x1e0>
 800fec8:	ee30 0a48 	vsub.f32	s0, s0, s16
 800fecc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fed0:	e7b6      	b.n	800fe40 <__ieee754_acosf+0x24>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	eddf da3e 	vldr	s27, [pc, #248]	; 800ffd0 <__ieee754_acosf+0x1b4>
 800fed8:	eddf ca3e 	vldr	s25, [pc, #248]	; 800ffd4 <__ieee754_acosf+0x1b8>
 800fedc:	ed9f ca40 	vldr	s24, [pc, #256]	; 800ffe0 <__ieee754_acosf+0x1c4>
 800fee0:	eddf ba40 	vldr	s23, [pc, #256]	; 800ffe4 <__ieee754_acosf+0x1c8>
 800fee4:	ed9f ba40 	vldr	s22, [pc, #256]	; 800ffe8 <__ieee754_acosf+0x1cc>
 800fee8:	eddf 8a40 	vldr	s17, [pc, #256]	; 800ffec <__ieee754_acosf+0x1d0>
 800feec:	ed9f da40 	vldr	s26, [pc, #256]	; 800fff0 <__ieee754_acosf+0x1d4>
 800fef0:	eddf aa39 	vldr	s21, [pc, #228]	; 800ffd8 <__ieee754_acosf+0x1bc>
 800fef4:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800fff4 <__ieee754_acosf+0x1d8>
 800fef8:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800fff8 <__ieee754_acosf+0x1dc>
 800fefc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800ff00:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ff04:	da28      	bge.n	800ff58 <__ieee754_acosf+0x13c>
 800ff06:	ee30 0a09 	vadd.f32	s0, s0, s18
 800ff0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ff0e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800ff12:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800ff16:	eeac ca80 	vfma.f32	s24, s25, s0
 800ff1a:	eeaa aa80 	vfma.f32	s20, s21, s0
 800ff1e:	eeec ba00 	vfma.f32	s23, s24, s0
 800ff22:	eeea 9a00 	vfma.f32	s19, s20, s0
 800ff26:	eeab ba80 	vfma.f32	s22, s23, s0
 800ff2a:	eea9 9a80 	vfma.f32	s18, s19, s0
 800ff2e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800ff32:	ee68 8a80 	vmul.f32	s17, s17, s0
 800ff36:	f000 f869 	bl	801000c <__ieee754_sqrtf>
 800ff3a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800ff3e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010000 <__ieee754_acosf+0x1e4>
 800ff42:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ff46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ff4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ff4e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8010004 <__ieee754_acosf+0x1e8>
 800ff52:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff56:	e773      	b.n	800fe40 <__ieee754_acosf+0x24>
 800ff58:	ee39 8a40 	vsub.f32	s16, s18, s0
 800ff5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ff60:	eeb0 0a48 	vmov.f32	s0, s16
 800ff64:	f000 f852 	bl	801000c <__ieee754_sqrtf>
 800ff68:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800ff6c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800ff70:	eeac ca88 	vfma.f32	s24, s25, s16
 800ff74:	eeaa aa88 	vfma.f32	s20, s21, s16
 800ff78:	eeec ba08 	vfma.f32	s23, s24, s16
 800ff7c:	ee10 3a10 	vmov	r3, s0
 800ff80:	eeab ba88 	vfma.f32	s22, s23, s16
 800ff84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ff88:	f023 030f 	bic.w	r3, r3, #15
 800ff8c:	eeea 9a08 	vfma.f32	s19, s20, s16
 800ff90:	ee07 3a90 	vmov	s15, r3
 800ff94:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800ff98:	eeb0 6a48 	vmov.f32	s12, s16
 800ff9c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800ffa0:	eea9 9a88 	vfma.f32	s18, s19, s16
 800ffa4:	ee70 6a27 	vadd.f32	s13, s0, s15
 800ffa8:	ee68 8a88 	vmul.f32	s17, s17, s16
 800ffac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ffb0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800ffb4:	eea0 7a26 	vfma.f32	s14, s0, s13
 800ffb8:	ee37 0a87 	vadd.f32	s0, s15, s14
 800ffbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ffc0:	e73e      	b.n	800fe40 <__ieee754_acosf+0x24>
 800ffc2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8010008 <__ieee754_acosf+0x1ec>
 800ffc6:	e73b      	b.n	800fe40 <__ieee754_acosf+0x24>
 800ffc8:	00000000 	.word	0x00000000
 800ffcc:	40490fdb 	.word	0x40490fdb
 800ffd0:	3811ef08 	.word	0x3811ef08
 800ffd4:	3a4f7f04 	.word	0x3a4f7f04
 800ffd8:	bf303361 	.word	0xbf303361
 800ffdc:	33a22168 	.word	0x33a22168
 800ffe0:	bd241146 	.word	0xbd241146
 800ffe4:	3e4e0aa8 	.word	0x3e4e0aa8
 800ffe8:	bea6b090 	.word	0xbea6b090
 800ffec:	3e2aaaab 	.word	0x3e2aaaab
 800fff0:	3d9dc62e 	.word	0x3d9dc62e
 800fff4:	4001572d 	.word	0x4001572d
 800fff8:	c019d139 	.word	0xc019d139
 800fffc:	3fc90fda 	.word	0x3fc90fda
 8010000:	b3a22168 	.word	0xb3a22168
 8010004:	40490fda 	.word	0x40490fda
 8010008:	3fc90fdb 	.word	0x3fc90fdb

0801000c <__ieee754_sqrtf>:
 801000c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010010:	4770      	bx	lr

08010012 <fabsf>:
 8010012:	ee10 3a10 	vmov	r3, s0
 8010016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801001a:	ee00 3a10 	vmov	s0, r3
 801001e:	4770      	bx	lr

08010020 <_init>:
 8010020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010022:	bf00      	nop
 8010024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010026:	bc08      	pop	{r3}
 8010028:	469e      	mov	lr, r3
 801002a:	4770      	bx	lr

0801002c <_fini>:
 801002c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801002e:	bf00      	nop
 8010030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010032:	bc08      	pop	{r3}
 8010034:	469e      	mov	lr, r3
 8010036:	4770      	bx	lr
